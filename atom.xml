<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Hu&#39;s Blog</title>
  
  <subtitle>A Hungry Fool</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.kevinhu.me/"/>
  <updated>2021-09-06T17:08:02.767Z</updated>
  <id>https://blog.kevinhu.me/</id>
  
  <author>
    <name>Kevin Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building Applications With Cassandra: Experience And Gotchas</title>
    <link href="https://blog.kevinhu.me/2021/09/03/22-cassandra-experience-and-gotchas/"/>
    <id>https://blog.kevinhu.me/2021/09/03/22-cassandra-experience-and-gotchas/</id>
    <published>2021-09-03T06:30:00.000Z</published>
    <updated>2021-09-06T17:08:02.767Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I’ve summarized <a href="/2021/08/21/17-cassandra-experience/">some experience on quickly getting started with Cassadra</a>. And for this post I’d like to keep writing about some of our experience using and operating Cassandra. Hopefully it could be useful to you, and help you avoid future unwanted surprises.</p><h1 id="election-and-paxos"><a class="markdownIt-Anchor" href="#election-and-paxos"></a> Election and Paxos</h1><p>Cassandra is always considered to be favoring the “AP” in “CAP” theorem, where it guarantees eventual consistency for availability and performance. But when really necessary, you can still leverage Cassandra’s built-in <a href="https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useInsertLWT.html">“Light-weight Transaction”</a> for elections to determine a leader node in the cluster.</p><p>Basically, it works by writing to a table with your own lease:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> leases (name, owner) <span class="keyword">VALUES</span> (<span class="string">&#x27;lease_master&#x27;</span>, <span class="string">&#x27;server_1&#x27;</span>) IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>;</span><br></pre></td></tr></table></figure><p>The <code>IF NOT EXISTS</code> triggers the Cassandra built-in Light-weight Transaction and can be used to declare a consensus among a cluster. With a default TTL in the table, this can be used for leases control, or master election. For example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> leases (</span><br><span class="line">    name text,</span><br><span class="line">    owner text,</span><br><span class="line">) <span class="keyword">WITH</span> default_time_to_live <span class="operator">=</span> <span class="number">16</span>; </span><br></pre></td></tr></table></figure><p>So that the lease owner needs to keep writing to the lease row for heartbeats.</p><p>I’m not sure about the performance characteristics of Cassandra’s election behavior with other applications (etcd, Zookeeper, …) and it’ll be interesting to see a study. But since those are already more full-featured and well-understood in keeping consensus, I’d recommend delegating this behavior to them unless you’re stuck with Cassandra for your application.</p><span id="more"></span><h1 id="optimizing-time-series-data-retention"><a class="markdownIt-Anchor" href="#optimizing-time-series-data-retention"></a> Optimizing Time-series Data Retention</h1><p>One great use case of Cassandra is logs and timeseries data saving. But what if you’d want to automatically drop stale data and don’t want to populate the tombstones in Cassandra? Removing and updating data frequently <a href="https://www.instaclustr.com/support/documentation/cassandra/using-cassandra/managing-tombstones-in-cassandra/#section-when-do-tombstones-cause-problems">may actually cause problems</a> in Cassandra.</p><p>Cassandra team developed a very useful strategy to just handle this situation. It’s called TWCS (Time Window Compaction Strategy). And it works by grouping your timeseries data into chunks (in the same SSTable) and directly dropping them when their TTL is reached, instead of generating new tombstones. Check out <a href="https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html">this blog</a> for use cases and details.</p><p>So that you can create a table with these flags enabled:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- creating table compacting data every day, with 7 days TTL and TWCS</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> timeseries (</span><br><span class="line">    ...</span><br><span class="line">) <span class="keyword">WITH</span> CLUSTERING <span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">value</span> <span class="keyword">ASC</span>)</span><br><span class="line">    <span class="keyword">AND</span> gc_grace_seconds <span class="operator">=</span> <span class="number">60</span></span><br><span class="line">    <span class="keyword">AND</span> default_time_to_live <span class="operator">=</span> <span class="number">604800</span>  </span><br><span class="line">    <span class="keyword">AND</span> compaction <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="string">&#x27;compaction_window_size&#x27;</span>: <span class="string">&#x27;24&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;compaction_window_unit&#x27;</span>: <span class="string">&#x27;HOURS&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;org.apache.cassandra.db.compaction.TimeWindowCompactionStrategy&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>It’s some neat optimizations you can do while saving time-series data with a deadline in mind.</p><h1 id="membership-change-when-one-node-is-down"><a class="markdownIt-Anchor" href="#membership-change-when-one-node-is-down"></a> Membership Change When One Node Is Down</h1><p>Interestingly enough, Cassandra can get grumpy when you try to man-handle its membership. For example, during our development and testing, we encountered this issue where the cassandra cluster is just reluctant to accept a new node when there’s already a node down. The logs from the node shows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CassandraDaemon.java:465 - Exception encountered during startup</span><br><span class="line">java.lang.RuntimeException: A node required to move the data consistently is down (/x.x.x.x).  </span><br><span class="line">If you wish to move the data from a potentially inconsistent replica, restart the node with -Dcassandra.consistent.rangemovement=false</span><br></pre></td></tr></table></figure><p>It turns out that Cassandra needs to move the data consistently to the new node. And when one node is down and Cassandra cannot form a quorum for the data with one node missing, it’ll be reluctant to hand the potentially broken data to the newcomer.</p><p>Here’s also an interesting <a href="https://medium.com/analytics-vidhya/replacing-a-dead-node-in-cassandra-and-surprises-4681287eeddf">blog</a> about replacing Cassandra dead node and all the surprises along the way. The lesson is: managing Cassandra membership could be harder than you actually thought. So it might be a good idea to read the manual.</p><p>In short, if you don’t understand Cassandra, it’ll give you surprises.</p><h1 id="dynamically-manipulating-tables-is-bad"><a class="markdownIt-Anchor" href="#dynamically-manipulating-tables-is-bad"></a> Dynamically Manipulating Tables Is Bad</h1><p>When we started building our application, we used a way to automatically create new tables. It worked well for a while, and then we kept hitting this weird error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.cassandra.exceptions.ConfigurationException: </span><br><span class="line">  Column family ID mismatch (found &lt;SOME UUID-1&gt;; expected &lt;SOME UUID-2&gt;)</span><br></pre></td></tr></table></figure><p>It turns out Cassandra long had this problem with running into race conditions with creating Column Families (a.k.a Cassandra’s tables).</p><ul><li><a href="https://stackoverflow.com/questions/64410561/how-to-resolve-column-family-id-mismatch-error">https://stackoverflow.com/questions/64410561/how-to-resolve-column-family-id-mismatch-error</a></li><li><a href="https://stackoverflow.com/questions/68979637/getting-around-column-family-id-mismatch-exception-when-i-retry-the-query-while">https://stackoverflow.com/questions/68979637/getting-around-column-family-id-mismatch-exception-when-i-retry-the-query-while</a></li></ul><p>After searching through the Internet, our conclusion is simply: do not attempt to dynamically create tables in a distributed system in the first place. We redesigned our application and schema and this problem went away since.</p><h1 id="deletion-in-cassandra-is-hard"><a class="markdownIt-Anchor" href="#deletion-in-cassandra-is-hard"></a> Deletion In Cassandra Is Hard</h1><p>It’s not from our own experience, but I still feel like it’s worth sharing. When not careful, Cassandra’s Quorum read/write can still result in dirty data in very special cases. Due to its design, Cassandra can have some pretty complex steps to delete data!</p><p><a href="https://thelastpickle.com/blog/2016/07/27/about-deletes-and-tombstones.html">https://thelastpickle.com/blog/2016/07/27/about-deletes-and-tombstones.html</a></p><p>Rule of thumb from this experience: repair time &lt;= gc_grace_seconds. So that repair would propagate tombstones before GC cleans it up. Still, it’s recommended that Cassandra cluster be constantly repaired.</p><p><a href="https://docs.datastax.com/en/archived/cassandra/2.1/cassandra/operations/opsRepairNodesWhen.html">https://docs.datastax.com/en/archived/cassandra/2.1/cassandra/operations/opsRepairNodesWhen.html</a></p><p>Here’s another interesting case for deletion in Cassandra causing headaches and surprises, due to tombstone hurting performance. It’s from <a href="https://blog.discord.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7">Discord’s Experience</a>:</p><blockquote><p>We noticed Cassandra was running 10 second “stop-the-world” GC constantly but we had no idea why. We started digging and found a Discord channel that was taking 20 seconds to load.…To our surprise, the channel had only 1 message in it. It was at that moment that it became obvious they deleted millions of messages using our API, leaving only 1 message in the channel.If you have been paying attention you might remember how Cassandra handles deletes using tombstones (mentioned in Eventual Consistency). When a user loaded this channel, even though &gt; there was only 1 message, Cassandra had to effectively scan millions of message tombstones (generating garbage faster than the JVM could collect it).</p></blockquote><p>Basically if you are not careful, deletion in Cassandra could actually be a part of the query burden due to the tombstones. Understanding Cassandra’s behavior is essential to operation at its best performance.</p><h1 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h1><ul><li>Consensus in Cassandra: <a href="https://www.datastax.com/blog/consensus-cassandra">https://www.datastax.com/blog/consensus-cassandra</a></li><li>Lightweight Transactions in Cassandra: <a href="https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlLtwtTransactions.html">https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlLtwtTransactions.html</a></li><li>Leader election with Cassandra <a href="https://www.dotconferences.com/2015/06/matthieu-nantern-leader-election-with-cassandra">https://www.dotconferences.com/2015/06/matthieu-nantern-leader-election-with-cassandra</a></li><li>Time Window CompactionStrategy <a href="https://cassandra.apache.org/doc/latest/cassandra/operating/compaction/twcs.html">https://cassandra.apache.org/doc/latest/cassandra/operating/compaction/twcs.html</a></li><li>TWCS part 1 - how does it work and when should you use it?  <a href="https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html">https://thelastpickle.com/blog/2016/12/08/TWCS-part1.html</a></li><li>Replacing a dead node in Cassandra and surprises <a href="https://medium.com/analytics-vidhya/replacing-a-dead-node-in-cassandra-and-surprises-4681287eeddf">https://medium.com/analytics-vidhya/replacing-a-dead-node-in-cassandra-and-surprises-4681287eeddf</a></li><li>StackOverflow <a href="https://stackoverflow.com/questions/28376437/how-to-recover-cassandra-node-from-failed-bootstrap/28379751">https://stackoverflow.com/questions/28376437/how-to-recover-cassandra-node-from-failed-bootstrap/28379751</a></li><li>Manual For Adding/Removing Node: <a href="https://docs.datastax.com/en/cassandra-oss/2.1/cassandra/operations/opsAddingRemovingNodeTOC.html">https://docs.datastax.com/en/cassandra-oss/2.1/cassandra/operations/opsAddingRemovingNodeTOC.html</a></li><li>How Discord Stores Billions of Messages <a href="https://blog.discord.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7">https://blog.discord.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I’ve summarized &lt;a href=&quot;/2021/08/21/17-cassandra-experience/&quot;&gt;some experience on quickly getting started with Cassadra&lt;/a&gt;. And for this post I’d like to keep writing about some of our experience using and operating Cassandra. Hopefully it could be useful to you, and help you avoid future unwanted surprises.&lt;/p&gt;
&lt;h1 id=&quot;election-and-paxos&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#election-and-paxos&quot;&gt;&lt;/a&gt; Election and Paxos&lt;/h1&gt;
&lt;p&gt;Cassandra is always considered to be favoring the “AP” in “CAP” theorem, where it guarantees eventual consistency for availability and performance. But when really necessary, you can still leverage Cassandra’s built-in &lt;a href=&quot;https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useInsertLWT.html&quot;&gt;“Light-weight Transaction”&lt;/a&gt; for elections to determine a leader node in the cluster.&lt;/p&gt;
&lt;p&gt;Basically, it works by writing to a table with your own lease:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; leases (name, owner) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&amp;#x27;lease_master&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;server_1&amp;#x27;&lt;/span&gt;) IF &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;IF NOT EXISTS&lt;/code&gt; triggers the Cassandra built-in Light-weight Transaction and can be used to declare a consensus among a cluster. With a default TTL in the table, this can be used for leases control, or master election. For example:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; leases (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    owner text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; default_time_to_live &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So that the lease owner needs to keep writing to the lease row for heartbeats.&lt;/p&gt;
&lt;p&gt;I’m not sure about the performance characteristics of Cassandra’s election behavior with other applications (etcd, Zookeeper, …) and it’ll be interesting to see a study. But since those are already more full-featured and well-understood in keeping consensus, I’d recommend delegating this behavior to them unless you’re stuck with Cassandra for your application.&lt;/p&gt;
    
    </summary>
    
      <category term="ComputerSystem" scheme="https://blog.kevinhu.me/categories/ComputerSystem/"/>
    
    
      <category term="Cassandra" scheme="https://blog.kevinhu.me/tags/Cassandra/"/>
    
      <category term="Database" scheme="https://blog.kevinhu.me/tags/Database/"/>
    
      <category term="NoSQL" scheme="https://blog.kevinhu.me/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Building Applications With Cassandra: A Very Quick Guide</title>
    <link href="https://blog.kevinhu.me/2021/08/21/17-cassandra-experience/"/>
    <id>https://blog.kevinhu.me/2021/08/21/17-cassandra-experience/</id>
    <published>2021-08-21T23:02:00.000Z</published>
    <updated>2021-08-29T21:02:45.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cassandra-overview"><a class="markdownIt-Anchor" href="#cassandra-overview"></a> Cassandra Overview</h1><p>Cassandra as an open-source NoSQL database has gained popularity in cloud and big data applications. Inspired by DynamoDB, it also has good latency, tunable consistency, easy to achieve scalability, and high-availability with cluster setup.</p><p>Our team’s been using Cassandra as the backend for an application we’ve been shipping to customers. We chose it for its high-availability setup, and good performance. We used to store time-series data and some simple configuration data as Key-value pairs. So it felt like a natural choice. And in our experience over time, it has proven to be highly capabable at serving our purposes.</p><p>With impressive availability, scalability, and read/write performance, Casandra also comes with its limitations. We cannot design data models the same way we did with traditional relational databases with SQL interface. And it doesn’t come with many of the guarantees from traditional databases, like consistency level, transactions, cascading deletion, etc. Like other NoSQL databases, Cassandra was designed to optimize batch write operations with good read and write latency. It fits applications without too much update/delete operations, especially ones with no high amounts of transactions.</p><p>So the best use cases for Cassandra can be:</p><ul><li>You have a high volume of data with availability concerns.</li><li>Most data is sequential read/write or append, e.g.: logs, time-series, IoT applications, track records, messages, etc.</li><li>You don’t have complex data relations between data entities that requires high amount of transactions.</li></ul><span id="more"></span><p>I hope this blog could be useful if you’re starting off a new application or a module, and evaluting databases of choice. It starts with an overview of Cassandra, its architecture, then how to evaluate Cassandra for your project, and how to design your data models with examples. It will give you a better picture of whether and how Cassandra can fit in your project. So that you can start thinking about your application and data modeling from a high-level. And then, you can go on to learn more about this database’s details from other references provided in this blog or other resources.</p><p>With the prevalence of Machine Learning and Big Data applications, I strongly believe Cassandra can play an important role and it’s definitely worth learning about its ideas.</p><p>As an alternative, ScyllaDB could be a very neat open-source replacement for Cassandra, with compatible CQL and driver interface. See more at: <a href="https://www.scylladb.com/">https://www.scylladb.com/</a> Its blog also provides with some use case studies.</p><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><ul><li>Cassandra Overview: <a href="https://docs.datastax.com/en/cassandra-oss/3.x/cassandra/cassandraAbout.html">https://docs.datastax.com/en/cassandra-oss/3.x/cassandra/cassandraAbout.html</a></li><li>Cassandra Use Cases from DataStax: <a href="https://www.datastax.com/blog/what-earth-are-people-using-cassandra-anyway">https://www.datastax.com/blog/what-earth-are-people-using-cassandra-anyway</a></li><li>Cassandra: Principle and Applications <a href="http://disi.unitn.it/~montreso/ds/papers/Cassandra.pdf">http://disi.unitn.it/~montreso/ds/papers/Cassandra.pdf</a></li><li>ScyllaDB <a href="https://www.scylladb.com/">https://www.scylladb.com/</a></li><li>ScyllaDB User Stories <a href="https://www.scylladb.com/category/user-stories/">https://www.scylladb.com/category/user-stories/</a></li><li>How Discord Stores Billions of Messages <a href="https://blog.discord.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7">https://blog.discord.com/how-discord-stores-billions-of-messages-7fa6ec7ee4c7</a></li></ul><h1 id="cassandra-architecture-for-the-impatient"><a class="markdownIt-Anchor" href="#cassandra-architecture-for-the-impatient"></a> Cassandra Architecture For the Impatient</h1><p>Cassandra has some interesting architectural design ideas to achieve its availability as well as performance. The tradeoff is its own limitations.</p><p>A Cassandra cluster consists of one or many decentralized nodes with that shares the client query load for scalability as well as replication for high-availability. Cassandra cluster has no master node, it maintains its membership information with the Gossip Protocol.</p><p>Cassandra cluster partitions its data among nodes as a token ring. All data in Cassandra is partitioned to its nodes in the ring based on the key hash and replication configurations.</p><p><img src="cassandra_ring.png" alt="Cassandra Cluster Ring, from Cassandra: The Definitive Guide" /></p><p>Node membership and sharing is decided by the <a href="https://en.wikipedia.org/wiki/Consistent_hashing">Consistent Hashing</a> algorithm for load-balancing and minimal data movement during membership changes. For each table, the partition key decides which replicas it writes to. Therefore it’s important to keep in mind to include the partition key in the design of your schema (as discussed below).</p><p>Client queries can go to multiple nodes in the cluster based on your replication and query configuration. This is Cassandra’s “Tunable Consistency”: higher number of nodes for each query would sacrifice response time and availability, but maintains higher consistency. And vice versa. (See more at <a href="https://www.ibm.com/cloud/learn/cap-theorem">CAP theorem</a>.) Tunable Consistency allows users to decide what consistent level is for data read/write. For Eventual Consistency, Cassandra responds with confirmation after writing to any one of the replicated nodes for low latency and high availability. While for Quorum Consistency, Cassandra reads/writes from a quorum of the replicated nodes, and takes the latest write as the final result (LWW Last Write Wins strategy). You can choose the consistency level based on your application needs.</p><p>Same as BigTable and DynamoDB design, Cassandra uses MemTable as in memory storage, and SSTable (Sorted Strings Table) as storage backend. MemTables are periodically flushed to disk as SSTables, which are immutable, sorted by key, and gives impressive batch read/write performance. But updating/deletion in SSTable uses new records and tombstones. It appends the new records to new SSTables instead of overwriting the existing ones. So huge amounts of update/delete operations will be inefficient in Cassandra.</p><p>So Cassandra’s architecture decides that:</p><ul><li>You should decide the partition key in your data schema design.</li><li>You should decide the replication, consistency level, and availability of your tables and queries.</li><li>Cassandra works very well with sequential batch read/writes, but not so much with high amount of modifications and deletions.</li></ul><p>For more information, I found the book <em>“Cassandra: The Definitive Guide”</em> a very helpful reference.</p><p>Update: though it’s a blog about ScyllaDB, it’s closely modeled after Cassandra and DynamoDB: <a href="https://docs.scylladb.com/architecture/">https://docs.scylladb.com/architecture/</a>. And I’ve found it a very helpful source as well.</p><h2 id="references-2"><a class="markdownIt-Anchor" href="#references-2"></a> References</h2><ul><li>Cassandra Paper: <a href="http://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf">http://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf</a></li><li>Cassandra and CAP theorem <a href="https://www.ibm.com/cloud/learn/cap-theorem">https://www.ibm.com/cloud/learn/cap-theorem</a></li><li>Consistent Hashing <a href="https://en.wikipedia.org/wiki/Consistent_hashing">https://en.wikipedia.org/wiki/Consistent_hashing</a></li><li>Cassandra: The Definitive Guide <a href="https://www.oreilly.com/library/view/cassandra-the-definitive/9781098115159/">https://www.oreilly.com/library/view/cassandra-the-definitive/9781098115159/</a></li><li>ScyllaDB Architecture: <a href="https://docs.scylladb.com/architecture/">https://docs.scylladb.com/architecture/</a></li></ul><h1 id="data-modeling"><a class="markdownIt-Anchor" href="#data-modeling"></a> Data Modeling</h1><p>To start off building applications with Cassandra, first thing to come to mind is your data schema, and whether they can fit nicely into the Cassandra paradigm.</p><h2 id="beyond-rdbms"><a class="markdownIt-Anchor" href="#beyond-rdbms"></a> Beyond RDBMS</h2><p>In the book <em>“Cassandra: The Definitive Guide”</em>, I found a paragraph that best summarizes schema design with NoSQL databases:</p><blockquote><p>By contrast, in Cassandra you don’t start with the data model; you start with the query model. Instead of modeling the data first and then writing queries, with Cassandra you model the queries and let the data be organized around them. Think of the most common query paths your application will use, and then create the tables that you need to support them.</p></blockquote><p>Users need to keep in mind not to design its application schema as Entity-Relation model with traditional SQL databases, but start by thinking of all the queries you’ll need from the database.</p><h2 id="data-modeling-time-series-example"><a class="markdownIt-Anchor" href="#data-modeling-time-series-example"></a> Data Modeling: Time-Series Example</h2><p>For example, from <a href="https://www.scylladb.com/2020/02/20/nauto-achieving-consistency-in-an-eventually-consistent-environment/">ScyllaDB blog</a>, here’s an example of a typical Cassandra time-series table schema design.</p><p>Cassandra requires a composite primary key for each table: one as row key (or partition key) used to locate the row data for writing as well as reading; another as sorting key (or clustering key).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Example from https://www.scylladb.com/2020/02/20/nauto-achieving-consistency-in-an-eventually-consistent-environment/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> trips (</span><br><span class="line">    version <span class="type">int</span>,</span><br><span class="line">    id text,</span><br><span class="line">    bucket <span class="type">timestamp</span>,</span><br><span class="line">    end_ms <span class="type">timestamp</span>,</span><br><span class="line">    start_ms <span class="type">timestamp</span>,</span><br><span class="line">    details <span class="type">blob</span>,</span><br><span class="line">    summary <span class="type">blob</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY ((version, id, bucket), end_ms, start_ms))</span><br><span class="line"><span class="keyword">WITH</span> CLUSTERING <span class="keyword">ORDER</span> <span class="keyword">BY</span> (end_ms <span class="keyword">DESC</span>, start_ms <span class="keyword">DESC</span>)</span><br></pre></td></tr></table></figure><p>The Primary Key is used to identify and locate the rows in the Cassandra cluster, and it’s of two parts: the partition key and the clustering key.</p><p>The first part (<code>version</code>, <code>id</code>, <code>bucket</code>) as partition key, is used to locate the right partition in the cluster and the nodes where the data resides. It is required for writing, and efficient reading as well.</p><p>The second part <code>end_ms</code>, <code>start_ms</code> as clustering key is for sorting rows. Choosing the right clustering key gives you better performance for batch reading.</p><h2 id="data-modeling-hotel-service-example"><a class="markdownIt-Anchor" href="#data-modeling-hotel-service-example"></a> Data Modeling: Hotel Service Example</h2><p>The Cassandra book includes an example of designing data schema with Cassandra.</p><p><a href="https://www.oreilly.com/library/view/cassandra-the-definitive/9781449399764/ch04.html">https://www.oreilly.com/library/view/cassandra-the-definitive/9781449399764/ch04.html</a></p><p>Think of a hotel booking application, where you’ll need to look up what hotels are in the city, what hotels are close to site-seeing locations, book reservations, look up detailed amenities for hotel rooms, and so on.</p><p>So A query-first approach to schema design is, start by thinking about all the queries you’ll make to the backend service:</p><ul><li>Find the hotels by city name.</li><li>Find the hotels by Point of Interest locations (site-seeing, tourism points).</li><li>Find the rooms in the hotels.</li><li>Find the amenities of given rooms in the hotel.</li><li>Find the Point of Interest locations around the hotels.</li></ul><p>And for reservations, you’ll probably need to find the right reservation by different types of query info, for example:</p><ul><li>Find the reservation of certain dates for a room.</li><li>Find the reservation by confirmation ID.</li><li>Find the reservation by guest.</li></ul><p>If you link all your queries based on the keys and results of each query, you’ll end up with a diagram of all the supported queries from the client workflow. And based on this diagram, we can come up with the tables necessary for our application, along with the best keys for partition and sorting.</p><p><img src="hotel_query_diagram.png" alt="Hotel Service: Client Query Diagram, from Cassandra: The Definitive Guide" /></p><p>All the queries will form a workflow diagram linking all the tables together. This could be represented as “Chebotko Diagram” for schema design. A Chebotko Diagram is a way to visualize the relationships between table and queries, including the table key and field design in the schema. With this schema, it’s much clearer how to finally implement your tables and the application workflow.</p><p>A part of the final diagram would look like this, an example from the book.</p><p><img src="hotel_chebotko.png" alt="Hotel Service: Chebotko Diagram for Data Modeling, from Cassandra: The Definitive Guide" /></p><p>For the reservation procedure. The denormalized schema design will be based on queries, and might be replicated across different tables, contrary to the E-R model for SQL schemas:</p><p><img src="hotel_denormalized_reservation.png" alt="Hotel Service: Diagram for Reservation Service" /></p><h2 id="data-modeling-pet-service-exercise"><a class="markdownIt-Anchor" href="#data-modeling-pet-service-exercise"></a> Data Modeling: Pet Service Exercise</h2><p>Here’s also a fun exercise you can do with the example in Scylla’s User Stories section. Imagine a Pet Care service where each user tags their pets with remote monitor sensors (e.g. for heart rate, Geolocation, and other metrics). And you’ll need to design an application to log and query the metrics for each pet.</p><p><a href="https://www.scylladb.com/2020/09/09/carepet-an-example-iot-use-case-for-hands-on-app-developers/">https://www.scylladb.com/2020/09/09/carepet-an-example-iot-use-case-for-hands-on-app-developers/</a></p><p>So you’re working for a service for pet health monitoring. You’ll need to design the backend service that saves and queries pet’s health metrics over time for all customers and their pets. Each pet monitor gathers data and saves in the backend database, which is Cassandra in this case. And you’ll need to design the schema to fit in the Cassandra model.</p><p>From the database, you’ll need provide following queries:</p><ul><li>Query by owner ID, returns owner’s account info.</li><li>Query by owner ID, returns owner’s pets information.</li><li>Query by pet ID, returns the sensors info.</li><li>Query by sensor ID, returns the time-series data from the sensor.</li></ul><p>Try design the tables and see if your solution is close to the example’s.</p><p><a href="https://github.com/scylladb/care-pet/blob/master/docs/design_and_data_model.md">https://github.com/scylladb/care-pet/blob/master/docs/design_and_data_model.md</a></p><h2 id="references-3"><a class="markdownIt-Anchor" href="#references-3"></a> References</h2><ul><li>On Chetbotko Diagram: <a href="https://www.researchgate.net/publication/308856170_A_Big_Data_Modeling_Methodology_for_Apache_Cassandra">https://www.researchgate.net/publication/308856170_A_Big_Data_Modeling_Methodology_for_Apache_Cassandra</a></li><li>Scylla Example: <a href="https://www.scylladb.com/2020/09/09/carepet-an-example-iot-use-case-for-hands-on-app-developers/">https://www.scylladb.com/2020/09/09/carepet-an-example-iot-use-case-for-hands-on-app-developers/</a></li><li>My Previous Notes on NoSQL Data Modeling: <a href="https://blog.kevinhu.me/2020/07/03/03-Cassandra-Data-Modeling/">https://blog.kevinhu.me/2020/07/03/03-Cassandra-Data-Modeling/</a></li><li>Detailed Guide From DataStax: <a href="https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236%20-%20Data%20Modeling%20in%20Apache%20Cassandra%20%E2%84%A2%20White%20Paper-4.pdf">https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236 - Data Modeling in Apache Cassandra ™ White Paper-4.pdf</a></li></ul><h1 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h1><p>To summarize, Cassandra’s architectural design decides that:</p><ul><li>Cassandra has some special use cases. Understand when you should choose Cassandra and when you should not.</li><li>Data Modeling: design with query-oriented，denormalized schema. Start with the query diagram in your applications, and not E-R models.</li><li>Data Modeling: pick a composite key with partition key and clustering key in mind.</li><li>Transactions in Cassandra is possible, but is painful and with lots of limitations. Try to avoid them.</li><li>Just like any other databases, there are several maintenance burdens to keep in mind for best correctness and performance. Better understanding of the inner workings grants you better stability, performance, and less unpleasant surprises.</li></ul><p>It’s a powerful tool with its limitations. When used in the right scenarios, it can be a formidable weapon in your arsenal.</p><p>If you feel like Cassandra can be a good fit for your application, you can then go on to learn more about:</p><ul><li>Its architecture design:<ul><li>SSTable.</li><li>Snitch.</li><li>Merkel Tree Anti-entropy Process.</li><li>…</li></ul></li><li>Advanced queries and use cases:<ul><li>Batch updates.</li><li>Lightweight Paxos procedure.</li><li>Materialized views.</li></ul></li><li>Deployment, maintainance, and other operations around Cassandra.</li><li>CQL, language drivers, and actual appliaction implementation.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cassandra-overview&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cassandra-overview&quot;&gt;&lt;/a&gt; Cassandra Overview&lt;/h1&gt;
&lt;p&gt;Cassandra as an open-source NoSQL database has gained popularity in cloud and big data applications. Inspired by DynamoDB, it also has good latency, tunable consistency, easy to achieve scalability, and high-availability with cluster setup.&lt;/p&gt;
&lt;p&gt;Our team’s been using Cassandra as the backend for an application we’ve been shipping to customers. We chose it for its high-availability setup, and good performance. We used to store time-series data and some simple configuration data as Key-value pairs. So it felt like a natural choice. And in our experience over time, it has proven to be highly capabable at serving our purposes.&lt;/p&gt;
&lt;p&gt;With impressive availability, scalability, and read/write performance, Casandra also comes with its limitations. We cannot design data models the same way we did with traditional relational databases with SQL interface. And it doesn’t come with many of the guarantees from traditional databases, like consistency level, transactions, cascading deletion, etc. Like other NoSQL databases, Cassandra was designed to optimize batch write operations with good read and write latency. It fits applications without too much update/delete operations, especially ones with no high amounts of transactions.&lt;/p&gt;
&lt;p&gt;So the best use cases for Cassandra can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a high volume of data with availability concerns.&lt;/li&gt;
&lt;li&gt;Most data is sequential read/write or append, e.g.: logs, time-series, IoT applications, track records, messages, etc.&lt;/li&gt;
&lt;li&gt;You don’t have complex data relations between data entities that requires high amount of transactions.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ComputerSystem" scheme="https://blog.kevinhu.me/categories/ComputerSystem/"/>
    
    
      <category term="Cassandra" scheme="https://blog.kevinhu.me/tags/Cassandra/"/>
    
      <category term="Database" scheme="https://blog.kevinhu.me/tags/Database/"/>
    
      <category term="NoSQL" scheme="https://blog.kevinhu.me/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Ray: A Distributed Framework for Emerging AI Applications</title>
    <link href="https://blog.kevinhu.me/2021/08/02/01-ray-first-impressions/"/>
    <id>https://blog.kevinhu.me/2021/08/02/01-ray-first-impressions/</id>
    <published>2021-08-02T05:21:00.000Z</published>
    <updated>2021-09-03T06:34:22.920Z</updated>
    
    <content type="html"><![CDATA[<p>Paper link: <a href="https://www.usenix.org/system/files/osdi18-moritz.pdf">https://www.usenix.org/system/files/osdi18-moritz.pdf</a></p><h1 id="overview"><a class="markdownIt-Anchor" href="#overview"></a> Overview</h1><p>Ray is a new and grossing distributed programming framework, with an ambitious plan to be the foundation of emerging AI/ML applications. In its own words, it aims to “provide a universal API for distributed computing”.Which means it needs to provide a programming interface that’s flexible enough for new applications, and a backend system designed to scale for elastic computing needs with some good performance.This paper (OSDI 18’) explains its API and architecture design to fulfill this goal. And I’ve found some very interesting points.</p><span id="more"></span><h1 id="programming-interface"><a class="markdownIt-Anchor" href="#programming-interface"></a> Programming Interface</h1><h2 id="actor-pattern-and-future-like-interface"><a class="markdownIt-Anchor" href="#actor-pattern-and-future-like-interface"></a> Actor Pattern and Future Like Interface</h2><p>At the programming interface level, Ray provides the “Actor Pattern”. A Python function invocation or a user-defined class object can work as an “Actor” in Ray. Simply annotate the function or class with <code>@ray.remote</code>, and call with <code>f.remote(args)</code> or initiate with <code>Class.remote(args)</code>.</p><p><img src="ray_api.png" alt="Ray API" /></p><p>Ray’s computing results are always returned as Future for asynchronous computations. In this way, Ray’s Actors can spawn more Actors, and submit the workload in parallel.</p><p>These two tools combined can be real powerful in expressing complicated distributed computing computations and the dependencies between them, which often forms a DAG (Directed Acyclic Graph) dynamically. Like the paper described the dynamic task graph when training Reinforcement Learning models.</p><p>The programming API can also emulate co≤mputing patterns like <a href="https://docs.ray.io/en/master/ray-design-patterns/map-reduce.html">MapReduce design pattern</a>. In this example, map functions are defined as Ray actors and called to get results as Futures. Reduce function can also be called remotely and gather all their actual results from Futures.Granted this level of abstraction is not really equivalent to other common MapReduce frameworks. But still, it demos Ray’s flexibility.</p><h2 id="remote-object"><a class="markdownIt-Anchor" href="#remote-object"></a> Remote Object</h2><p>Ray allows you to save large memory objects in the cluster for Actors to access (known as the <a href="https://docs.ray.io/en/ray-0.4.0/plasma-object-store.html">Plasma store</a>). The location is decided by scheduler based on task and data affinity. They can be used for saving intermediate results to speed up computation.</p><h1 id="architecture"><a class="markdownIt-Anchor" href="#architecture"></a> Architecture</h1><h2 id="architecture-overview"><a class="markdownIt-Anchor" href="#architecture-overview"></a> Architecture Overview</h2><p>Ray’s architecture follows a straightforward client-server model, where client is the Ray program and the client library, which communicates with servers that schedules the actual workloads and data to worker nodes.</p><p><img src="ray_arch.png" alt="Ray Architecture Overview" /></p><p>Ray servers use a primary-follower pattern. Primary nodes is responsible for</p><ul><li>GCS (Global Content Store) that saves the metadata of Actors and memory objects.</li><li>Global scheduler, for when the local scheduler cannot decide its task scheduling.</li><li>Web UI, debugger, profilers, etc.</li></ul><p>Each worker node has its own object store and local scheduler.</p><h2 id="global-content-store"><a class="markdownIt-Anchor" href="#global-content-store"></a> Global Content Store</h2><p>The GCS is a a sharded storage for metadata (default backed by Redis), keeping track of tasks and object details, including:</p><ul><li>Specification of every task submitted to the cluster.</li><li>Serialized Python code for remote function.</li><li>Computation graph.</li><li>Current location of all objects.</li><li>Every scheduling event.</li></ul><p>It provides a pub-sub infrastructure to enable efficient communications.</p><h2 id="bottom-up-scheduler"><a class="markdownIt-Anchor" href="#bottom-up-scheduler"></a> Bottom-Up Scheduler</h2><p>Ray’s scheduler is very unique and interesting. It took a bottom-up approach, with local scheduler on each node as well as a global scheduler for scalability.</p><p><img src="ray_scheduler.png" alt="Ray's Scheduler Design" /></p><p>Each nodes runs a worker that periodically reports back node load for offloading or centralized global scheduling.Tasks are submitted bottom-up, to local schedulers, and only forward when the local scheduler is under heavy load.</p><h2 id="object-storage"><a class="markdownIt-Anchor" href="#object-storage"></a> Object Storage</h2><p>A distributed memory storage of memory. It uses immutable data which simplifies the system design (e.g. avoid consistency issues). It keeps in memory and supports emitting to disk on a memory spill, with LRU policy.</p><p><img src="ray_plasma.png" alt="Ray Object Storage" /></p><p>It saves data lineage information (like in Spark) in GCS, so as to tolerate failures: once a result crashes, it’ll re-compute based on the parent data as well as function.</p><p>Object store uses Apache Arrow library for serialization.</p><h1 id="summary-and-closing-thoughts"><a class="markdownIt-Anchor" href="#summary-and-closing-thoughts"></a> Summary and Closing Thoughts</h1><p>In summary, Ray provides a distributed programming framework for a diversity of tasks,with easy programming interface and good performance.It also has a strong backend: a job scheduler and a remote memory object cache. It’s everythinga distributed computing framework ever needs.</p><p>Also, It’s getting support for a variety of Machine Learning frameworks and integrations(e.g. scikit-learn, Spark, Tensorflow, PyTorch, Hyper-parameter tuning, and future distributed applications, etc).The Ray project itself has focused on RayTune and RayServe projects.With Ray’s flexibility, it’s totally possiblethat it could be a “glue” framework for all other frameworks.</p><p>There’s a case study from Burger King with a <a href="https://databricks.com/session_na20/running-emerging-ai-applications-on-big-data-platforms-with-ray-on-apache-spark">very interesting use case</a>of Ray and Spark, with Ray deeply integrated with Spark to access its memory. According to the article:</p><p>So they choose MXNet as their deep learning framework, and before cooperating with us,they would allocate a separate GPU cluster dedicated for distributed MXNet trainingbut they find that such a solution is not quite efficient, since in the entire pipeline,a large portion of the total time is spent on copying data from the big data clusters to the GPU cluster.</p><p>After deploying RayOnSpark, Ray can now access Spark’s memory. And with a wrapper around MXNet,Ray can combine these two procedures and run the applications in the same cluster. It has betterefficiency and is easier to maintain.</p><p>This is where I see it can shine, not just as the foundation for emerging frameworks,but as the missing link between ML procedures and applications,speeding up the ML pipeline with the glue layer. In this way, it truly haslots of potential.</p><h1 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h1><ul><li>Paper link: Ray: A Distributed Framework for Emerging AI Applications <a href="https://www.usenix.org/system/files/osdi18-moritz.pdf">https://www.usenix.org/system/files/osdi18-moritz.pdf</a></li><li>Ray <a href="https://ray.io/">https://ray.io/</a></li><li>Ray: A Distributed Framework for Emerging AI Applications <a href="https://www.micahlerner.com/2021/06/27/ray-a-distributed-framework-for-emerging-ai-applications.html">https://www.micahlerner.com/2021/06/27/ray-a-distributed-framework-for-emerging-ai-applications.html</a></li><li>Ray Architecture Documentation <a href="https://docs.google.com/document/d/1lAy0Owi-vPz2jEqBSaHNQcy2IBSDEHyXNOQZlGuj93c/preview#heading=h.ojukhb92k93n0">https://docs.google.com/document/d/1lAy0Owi-vPz2jEqBSaHNQcy2IBSDEHyXNOQZlGuj93c/preview#heading=h.ojukhb92k93n0</a></li><li><a href="https://docs.ray.io/en/master/ray-design-patterns/map-reduce.html">https://docs.ray.io/en/master/ray-design-patterns/map-reduce.html</a></li><li>Ray Plasma Store <a href="https://docs.ray.io/en/ray-0.4.0/plasma-object-store.html">https://docs.ray.io/en/ray-0.4.0/plasma-object-store.html</a></li><li>RayOnSpark Example <a href="https://databricks.com/session_na20/running-emerging-ai-applications-on-big-data-platforms-with-ray-on-apache-spark">https://databricks.com/session_na20/running-emerging-ai-applications-on-big-data-platforms-with-ray-on-apache-spark</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paper link: &lt;a href=&quot;https://www.usenix.org/system/files/osdi18-moritz.pdf&quot;&gt;https://www.usenix.org/system/files/osdi18-moritz.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;overview&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#overview&quot;&gt;&lt;/a&gt; Overview&lt;/h1&gt;
&lt;p&gt;Ray is a new and grossing distributed programming framework, with an ambitious plan to be the foundation of emerging AI/ML applications. In its own words, it aims to “provide a universal API for distributed computing”.
Which means it needs to provide a programming interface that’s flexible enough for new applications, and a backend system designed to scale for elastic computing needs with some good performance.
This paper (OSDI 18’) explains its API and architecture design to fulfill this goal. And I’ve found some very interesting points.&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
      <category term="Ray" scheme="https://blog.kevinhu.me/tags/Ray/"/>
    
  </entry>
  
  <entry>
    <title>Golang Channel Idioms</title>
    <link href="https://blog.kevinhu.me/2021/05/31/31-go-channel-examples/"/>
    <id>https://blog.kevinhu.me/2021/05/31/31-go-channel-examples/</id>
    <published>2021-05-31T23:51:00.000Z</published>
    <updated>2021-06-01T00:37:42.167Z</updated>
    
    <content type="html"><![CDATA[<p>While learning Golang, I was fascinated with the power Golang’s goroutines and channels.Channel is a powerful tool to tackle synchronization problemsin asynchronous programs. It acts as a bridge between async goroutines and can describesome complicated logic expressively.Together they can be powerful weapons in building async applications. On the other hand, when misused, they can be a nightmare to debug.</p><p>Here I’ve summarized a few of the valuable idioms of using Golang routines from multiple references as well as my own experience. They can serve as a helpful toolbox that comes in handy for similar problems.So that you don’t have to design them from scratch, which might help you avoid synchronization errors.</p><span id="more"></span><p>For more information on Golang channels, see links in the <a href="#references">references</a>.They should give you a good introduction to channels and theirbasic behaviors.</p><p>If you found any problems or some idioms that you think this experience summary can provide.Please feel free to message me and let me know. Many thanks in advance!</p><p>I suggest you read the description and implement a toy version of each of these idioms first.Building your own implementation serves as a good exercise.</p><h1 id="1-use-channels-to-get-results"><a class="markdownIt-Anchor" href="#1-use-channels-to-get-results"></a> 1. Use Channels To Get Results</h1><h2 id="11-get-results-from-async-functions"><a class="markdownIt-Anchor" href="#11-get-results-from-async-functions"></a> 1.1. Get Results From Async Functions</h2><p>This is a very common usage of goroutines: to get results back from multiple async goroutines. Child goroutine can return a channel that finally sends back the result, which is akin to the Future/Promise idiom in some other languages.</p><p>Exercise: How to create an example, where you spawn multiple goroutines with work asynchronously (emulated with <code>time.Sleep()</code>), and then collect and print the results in the main thread?</p><p>See my implementation <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/get_result.go">here</a>.</p><h2 id="12-future-like-implementation"><a class="markdownIt-Anchor" href="#12-future-like-implementation"></a> 1.2. Future-like implementation</h2><p>You can also emulate Future/Promise. Functions can return channels wrapped in Futures, so as to process and return results asynchronously.</p><p>See my implementation <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/future.go">here</a>.</p><h2 id="13-iterate-through-all-results-from-channel"><a class="markdownIt-Anchor" href="#13-iterate-through-all-results-from-channel"></a> 1.3. Iterate through all results from channel</h2><p>A processor can be put in a goroutine and keep getting results until it’s closed.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> mychannl &#123;</span><br><span class="line">  <span class="comment">// process</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idiom is for the sender to close the channel. to avoid race conditions where sender sends on a closed channel. Sending on a closed channel will cause panic!</p><p>Exercise: how to create an example where you use the “for-range” idiom to get all results from the worker threads?</p><p>Hint: you’ll need proper way to make sure all worker threads are done with sending to the channel and close it properly. Consider <code>sync.WorkGroup</code>.</p><p>See my implementation <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/iterate_channel.go">here</a></p><h1 id="2-use-channels-for-timeouts-signals-and-cancellations"><a class="markdownIt-Anchor" href="#2-use-channels-for-timeouts-signals-and-cancellations"></a> 2. Use Channels For Timeouts, Signals, and Cancellations</h1><h2 id="21-handling-context"><a class="markdownIt-Anchor" href="#21-handling-context"></a> 2.1. Handling Context</h2><p>For network requests, exec commands, Golang actually has a great mechanism on setting timeouts and cancelling: <code>context</code>.</p><p>See more at: <a href="https://golang.org/pkg/context/">https://golang.org/pkg/context/</a></p><p>It is actually my recommended way of handling cancelling and timeouts in requests. It has a neat and clean interface, easier to use, and less error-prone to home-brew solutions with channels.</p><p>For example, golang’s <code>cmd/exec.Command</code> can be cancelled either by user or timeouts.The underlying implementation listens to <code>context.Done()</code></p><p>See: <a href="https://golang.org/src/os/exec/exec.go?s=6768:6841#L394">https://golang.org/src/os/exec/exec.go?s=6768:6841#L394</a></p><p>What if you’ll need to implement your own requests that takes in a context and respect the cancelling signal? You can learn from the example above in Golang library.</p><p>My example of <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/context.go">handling context</a>.</p><h2 id="22-timeouts-and-tickers"><a class="markdownIt-Anchor" href="#22-timeouts-and-tickers"></a> 2.2. Timeouts and Tickers.</h2><p>You can use <code>time</code> package to handle timeouts, periodic events.Golang’s <code>time</code> package uses channels for callbacks, which makes logic easier to read and understand.</p><p>Exercise: how to create an example that uses timer/ticker to trigger/cancel an action?</p><p>My example <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/timer.go">here</a>.</p><h2 id="23-processing-os-signals"><a class="markdownIt-Anchor" href="#23-processing-os-signals"></a> 2.3. Processing OS Signals</h2><p>You can use channels for notifications. One example is OS signals.Instead of installing signal handlers like some other languages, Golang’s signal package actually returns a channel. So users can handle channels like any other channels.</p><p>Notice:</p><p>From Go documentation (<a href="https://golang.org/pkg/os/signal/#Notify">https://golang.org/pkg/os/signal/#Notify</a>)</p><p>Package signal will not block sending to c: the caller must ensure that c has sufficient buffer space to keep up with the expected signal rate. For a channel used for notification of just one signal value, a buffer of size 1 is sufficient.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Set up channel on which to send signal notifications.</span><br><span class="line">// We must use a buffered channel or risk missing the signal</span><br><span class="line">// if we&#x27;re not ready to receive when the signal is sent.</span><br></pre></td></tr></table></figure><p>Exercise: how to create an example of using OS signals to cancel current work?</p><p>My example <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/signal.go">here</a>.</p><h2 id="24-use-channels-as-message-broker"><a class="markdownIt-Anchor" href="#24-use-channels-as-message-broker"></a> 2.4. Use Channels As Message Broker</h2><p>Channels can be used as a message broker when you need to send messages to multiple child goroutines.</p><p>It’s a kind of like the reverse of handling multiple message sources. The parent channel can send signal to each one of the channels that’s accepted by each child goroutine.</p><p>Exercise: how to create an example where child workers start after parent broadcasts a ready signal?</p><p>My implementation <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/message_broker.go">here</a>.</p><h1 id="3-use-channels-for-rate-limiting"><a class="markdownIt-Anchor" href="#3-use-channels-for-rate-limiting"></a> 3. Use Channels For Rate Limiting</h1><h2 id="31-acts-like-semaphore-for-limiting-worker-rate"><a class="markdownIt-Anchor" href="#31-acts-like-semaphore-for-limiting-worker-rate"></a> 3.1. Acts Like Semaphore For Limiting Worker Rate</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init semaphore</span></span><br><span class="line">sem := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">4</span>)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">  sem &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run the actual work, taking one from semaphore before</span></span><br><span class="line"><span class="comment">// starting, and give back once work is done</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  &lt;- sem</span><br><span class="line">  <span class="keyword">defer</span>() &#123;</span><br><span class="line">    sem &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">  &#125;()</span><br><span class="line"> <span class="comment">// some work here</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>Exercise: how to use channel as a semaphore that limits parallel processing to a given rate? i.e. Limit to at most N workers processing at the same time?</p><p>My example <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/semaphore.go">here</a>.</p><p>(How is this implementation better than evenly dividing the work to multiple goroutines before work starts? e.g. dividing 16 works to 4 goroutines, each processes 4 works?)</p><h2 id="32-competing-consumers"><a class="markdownIt-Anchor" href="#32-competing-consumers"></a> 3.2. Competing consumers</h2><p>Similarly, you can solve the above examples with competing consumers. Start N consumers from the start, and all of them take from the same channel.</p><p>My example <a href="https://github.com/hxy9243/go-examples/blob/main/src/channels/consumers.go">here</a>.</p><h1 id="4-other-interesting-use-cases"><a class="markdownIt-Anchor" href="#4-other-interesting-use-cases"></a> 4. Other Interesting Use Cases:</h1><ul><li>Rate Limiting (Leaky bucket like implementation) with Go channels: <a href="https://github.com/golang/go/wiki/RateLimiting">https://github.com/golang/go/wiki/RateLimiting</a></li><li>Pubsub with Go channels: <a href="https://eli.thegreenplace.net/2020/pubsub-using-channels-in-go/">https://eli.thegreenplace.net/2020/pubsub-using-channels-in-go/</a></li></ul><h1 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h1><ul><li>Golang Tour: <a href="https://tour.golang.org/concurrency/2">https://tour.golang.org/concurrency/2</a></li><li>Golang context: <a href="https://golang.org/pkg/context/">https://golang.org/pkg/context/</a></li><li>Go101 on Channels: <a href="https://go101.org/article/channel.html">https://go101.org/article/channel.html</a></li><li>Go101 on Channel Use Cases: <a href="https://go101.org/article/channel-use-cases.html">https://go101.org/article/channel-use-cases.html</a></li><li>Go Pubsub implementation in Channels: <a href="https://eli.thegreenplace.net/2020/pubsub-using-channels-in-go/">https://eli.thegreenplace.net/2020/pubsub-using-channels-in-go/</a></li><li>Leaky Bucket implementation with Go channels: <a href="https://github.com/golang/go/wiki/RateLimiting">https://github.com/golang/go/wiki/RateLimiting</a></li><li>The Behavior Of Channels: <a href="https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html">https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;While learning Golang, I was fascinated with the power Golang’s goroutines and channels.
Channel is a powerful tool to tackle synchronization problems
in asynchronous programs. It acts as a bridge between async goroutines and can describe
some complicated logic expressively.
Together they can be powerful weapons in building async applications. On the other hand, when misused, they can be a nightmare to debug.&lt;/p&gt;
&lt;p&gt;Here I’ve summarized a few of the valuable idioms of using Golang routines from multiple references as well as my own experience. They can serve as a helpful toolbox that comes in handy for similar problems.
So that you don’t have to design them from scratch, which might help you avoid synchronization errors.&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://blog.kevinhu.me/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://blog.kevinhu.me/tags/Golang/"/>
    
      <category term="Channel" scheme="https://blog.kevinhu.me/tags/Channel/"/>
    
      <category term="Learning" scheme="https://blog.kevinhu.me/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: 150 Successful Machine Learning Models Deployed: 6 Lessons Learned At Booking.com</title>
    <link href="https://blog.kevinhu.me/2021/04/25/25-Paper-Reading-Booking.com-Experiences/"/>
    <id>https://blog.kevinhu.me/2021/04/25/25-Paper-Reading-Booking.com-Experiences/</id>
    <published>2021-04-25T22:39:34.000Z</published>
    <updated>2021-04-25T22:51:58.441Z</updated>
    
    <content type="html"><![CDATA[<p>Paper link: <a href="https://www.kdd.org/kdd2019/accepted-papers/view/150-successful-machine-learning-models-6-lessons-learned-at-booking.com">https://www.kdd.org/kdd2019/accepted-papers/view/150-successful-machine-learning-models-6-lessons-learned-at-booking.com</a></p><p>Or <a href="bernardi2019.pdf">download</a>.</p><p>First published in KDD from <a href="http://booking.com">booking.com</a>, the paper described its lessons from deploying Machine Learning models in their production service. It provided some intriguing insights. I believe many are very valuable to understanding applying Machine Learning in real-world scenarios.</p><p>Here are some of my takeaways.</p><span id="more"></span><h1 id="1-model-families-machine-learning-is-applied-everywhere-in-the-service"><a class="markdownIt-Anchor" href="#1-model-families-machine-learning-is-applied-everywhere-in-the-service"></a> 1. Model Families: Machine Learning is Applied Everywhere In The Service</h1><p><a href="http://Booking.com">Booking.com</a> uses an abundance of Machine Learning models in its website service. Example includes:</p><ul><li><strong>Traveller Preference Models:</strong> predict the users’ flexibility in terms of traveling date, property location, property price.</li><li><strong>Traveller Context Models:</strong> gives the context of the traveler. E.g., if one’s traveling for family, with friends, or for business. This data can be used to optimize recommendations and user experience at the website.</li><li><strong>Item Space Navigation Model:</strong> gathers information about user interactions with the website to optimize the experience.</li><li><strong>User Interface Optimization Models:</strong> optimizes font sizes, number of items in the list, background colors or images, with Machine Learning models based on user context.</li><li><strong>Content Curation:</strong> curates content from different sources and formats of information to best display to human users.</li><li><strong>Content Augmentation:</strong> based on user context, predicts the best value for the end-user and predicts the reservation price in the future.</li></ul><p>From experience in the paper, all model families can provide value in the real world. Though some values are hard to quantify, the multiplying effort is clear.</p><p>What struck me most from this section is the number of models which is deployed for a service and how many aspects of user experience can be modeled, optimized, and fine-tuned with the power of Machine Learning.</p><p>Everything we see now on modern websites can be decided by a Machine Learning model behind it, and it learns our interactions with it to feedback our experience.</p><h1 id="2-modeling-offline-model-performance-is-just-a-health-check"><a class="markdownIt-Anchor" href="#2-modeling-offline-model-performance-is-just-a-health-check"></a> 2. Modeling: Offline Model Performance Is Just A Health Check</h1><p>The one-sentence takeaway: model performance offline can not be directly translated to business value, i.e., a model that excels in performance in the lab doesn’t necessarily do well in the real world!</p><p>There are some possible explanations for this effect. For example, the saturation of a model: a model cannot drive business value to infinite after you optimize it to a threshold. Or the uncanny valley effect (which I found to be interesting): when you optimize a model too well, it can scare the users and bring negative value.</p><p>As the paper summarizes, the offline model performance can be entirely uncorrelated to business outcomes!</p><h1 id="3-modeling-before-solving-a-problem-design-it"><a class="markdownIt-Anchor" href="#3-modeling-before-solving-a-problem-design-it"></a> 3. Modeling: Before Solving A Problem, Design It</h1><p>This section introduces the experience of designing Machine Learning models and the challenges.</p><p>For example, when modeling very subjective concepts, target variables are not given as ground truth. They are constructed. Therefore some setups are harder than others from a learning perspective. For some setups, data is closer to the concept we want to model.</p><p>Another common problem is the Selection Bias issue. For example, if you gather data by the user filling in the questionnaire, the data collected is strongly biased toward those who fill in.</p><p>The paper provided a mouthful to explain the detection of Selection Bias:</p><blockquote><p>Diagnosing selection bias is straightforward: consider a sample of the natural observation space (users or sessions in the dates flexibility case), we can then construct a classification problem that classifies each observation into the class of the observations for which a target variable can be computed and the class of the observations for which a target variable cannot be computed. If this classification problem is easy (in the sense that a simple algorithm performs significantly better than random), then the bias is severe and must be addressed.</p></blockquote><p>The way I understand it: construct a classification problem to classify if the target variable can be computed (e.g., those who fill in the questionnaire) and those who cannot. And if the classification is easy (better than random), it means the selection process (in this case, the questionnaire filter) <strong>is not random</strong>!</p><p>Coming up with better models to unlock business values can require many iterations.</p><h1 id="4-deployment-time-is-money"><a class="markdownIt-Anchor" href="#4-deployment-time-is-money"></a> 4. Deployment: Time Is Money</h1><p>This section introduces an important observation that website response speed correlates to user conversion.</p><blockquote><p>Visual inspection shows a clear trend, in which an increase of about 30% in latency costs more than 0.5% in conversion rate (a relevant cost for our business).</p></blockquote><p>The paper introduces some infrastructure optimization to amortize latency (redundancy, caching, etc.) and also emphasizes how some simple models (e.g., linear models) can actually outperform more accurate but slower models.</p><h1 id="5-monitoring-unsupervised-red-flags"><a class="markdownIt-Anchor" href="#5-monitoring-unsupervised-red-flags"></a> 5. Monitoring: Unsupervised Red Flags</h1><p>This section provides a great experience in monitoring model output based on output distribution and how it can be an indicator of model health in production.</p><p><img src="examples_distribution_charts.png" alt="Example Distribution Charts" /></p><p>For example, quoted from the original paper:</p><ul><li>A smooth unimodal distribution with a central mode might indicate high bias in the model or high Bayes error in the data</li><li>An extreme, high frequency mode might indicate defects in the feature layer like wrong scaling or false outliers in the training data</li><li>Non-smooth, very noisy distributions point to too excessively sparse models</li><li>Difference in distributions between training and serving data may indicate concept drift, feature drift, bias in the training set, or other forms of training-serving skew.</li><li>Smooth bimodal distributions with one clear stable point are signs of a model that successfully distinguishes two classes</li></ul><h1 id="6-evaluation-experiment-design-sophistication-pays-off"><a class="markdownIt-Anchor" href="#6-evaluation-experiment-design-sophistication-pays-off"></a> 6. Evaluation: Experiment Design Sophistication Pays Off</h1><p>This section introduces its experience through Experimentation through Randomized Controlled Trials (RCT). The experiment design and analysis gives a huge boost to understanding the data collected from the website and to the development of Machine Learning models.</p><blockquote><p>The large majority of the successful use cases of machine learning studied in this work have been enabled by sophisticated experiment designs, either to guide the development process or to detect their impact.</p></blockquote><p>The paper introduces a couple of methods for designing experiments for Machine Learning products.</p><p>Terminology for understanding trigger-based experiment process:</p><ul><li><strong>Treatment:</strong> whether the change is applied to the end-user. If a user is treated, then she sees the studied change applied to the website (as compared to the control group.)</li><li><strong>Triggered:</strong> whether the user should be included in the final analysis of the data, based on the conditions of her data.</li></ul><p><img src="experiment_design.png" alt="Experiments Design" /></p><p>Experiment design:</p><ul><li><strong>Selective Triggering:</strong> Dividing the population into control and treatment groups. And <strong>trigger</strong> the users whose data is available for model features among the treated and non-treated.</li><li><strong>Model-output Dependent Triggering:</strong> The treatment criteria might depend on one model output. Divide users into the control group where the model is not invoked and where the model is invoked. And where the model is invoked, further divide users into group 1: treatment, and group 2: non-treatment, where group 2 users are not treated even if the model output satisfies.Then the experiment is limited to users whose model satisfies.</li><li><strong>Comparing Models:</strong> To evaluate a new model 2 against model 1, create a control group where only model 1 is invoked. Create experiment groups where both models are invoked, with group 1 uses model 2 output, and a compare group 2 which uses model 1 output. And only <strong>trigger</strong> the users where the two models disagree.</li></ul><p>In this way, we’re limiting the experiment subjects that are most interesting to model performance and limiting noise in the dataset.</p><h1 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h1><p>This paper shares great experiences in understanding and tackling Machine Learning challenges in real-world services. And it provides guidance in designing and analyzing Machine Learning models in production.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paper link: &lt;a href=&quot;https://www.kdd.org/kdd2019/accepted-papers/view/150-successful-machine-learning-models-6-lessons-learned-at-booking.com&quot;&gt;https://www.kdd.org/kdd2019/accepted-papers/view/150-successful-machine-learning-models-6-lessons-learned-at-booking.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&quot;bernardi2019.pdf&quot;&gt;download&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First published in KDD from &lt;a href=&quot;http://booking.com&quot;&gt;booking.com&lt;/a&gt;, the paper described its lessons from deploying Machine Learning models in their production service. It provided some intriguing insights. I believe many are very valuable to understanding applying Machine Learning in real-world scenarios.&lt;/p&gt;
&lt;p&gt;Here are some of my takeaways.&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="Paper" scheme="https://blog.kevinhu.me/tags/Paper/"/>
    
      <category term="Learning" scheme="https://blog.kevinhu.me/tags/Learning/"/>
    
      <category term="Machine Learning" scheme="https://blog.kevinhu.me/tags/Machine-Learning/"/>
    
      <category term="Data Science" scheme="https://blog.kevinhu.me/tags/Data-Science/"/>
    
      <category term="AI" scheme="https://blog.kevinhu.me/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: The Death of Expertise</title>
    <link href="https://blog.kevinhu.me/2020/11/14/08-Book-Review-Death-Of-Expertise/"/>
    <id>https://blog.kevinhu.me/2020/11/14/08-Book-Review-Death-Of-Expertise/</id>
    <published>2020-11-15T00:23:00.000Z</published>
    <updated>2020-11-15T06:44:10.397Z</updated>
    
    <content type="html"><![CDATA[<p>The Death of Expertise: The Campaign Against Established Knowledge and Why It Matters</p><p><a href="https://en.wikipedia.org/wiki/The_Death_of_Expertise">https://en.wikipedia.org/wiki/The_Death_of_Expertise</a></p><p>“The Death of Expertise” by Tom Nichols is a timely piece to theongoing information endemic, especially in America. Quoting Issac Asimov:</p><blockquote><p>There is a cult of ignorance in the United States, and there always has been. The strain of anti-intellectualism has been a constant thread winding its way through our political and cultural life, nurtured by the false notion that democracy means that “my ignorance is just a good as your knowledge.”</p></blockquote><p>The book describes the author’s view of why experts are so important in a democracyand the relationship between expertise the public. And it also goes on to decry theongoing decay in this relationship, where citizens are increasingly losing trustin experts, and experts are increasingly finding it difficult to communicate with their audience.</p><span id="more"></span><h2 id="our-own-brains"><a class="markdownIt-Anchor" href="#our-own-brains"></a> Our Own Brains</h2><p>The author explains his own view of the many reasons behind this divide. Most significantly:Our innate incapability to think rationally. The world is complex and dramatic,yet our own brains tend to think in a more intuitive, direct, and emotional fashion.We love simple facts and jump to premature conclusions.We’re naturally not good at discerning our own ignorance and stupidity.It’s a phenomenon dubbed the “Dunning-Kruger” effect. We’re often over-confident inourselves and hold dear our world views, to the point of denying facts we find inconvenient.</p><p>It has undoubtedly always been the case. But our ways of thinking has been fundamental to why we may reject the other opinions, and it’s exacerbated by recent trends.</p><h2 id="higher-education"><a class="markdownIt-Anchor" href="#higher-education"></a> Higher Education</h2><p>Higher education, for instance, has been one of the targets of the author.The author argues that colleges are slowly developing into a commercial productmore than a sanctuary of passing on knowledge and critical thinking.Colleges are more of an expensive “experience,” which caters to the “customers.”So much so that they avoid provoking students with uncomfortable ideas or evenunsatisfactory GPAs. This creates a generation of youngsters who cannot deal withreal-life situations, including accepting facts or opinions they find “offensive.”</p><h2 id="the-internet"><a class="markdownIt-Anchor" href="#the-internet"></a> The Internet</h2><p>The widespread of the Internet has not brought information for the mass,but also overconfidence and arrogance.“Let Me Google That For You” has become a catchphrase for the Internet users whocompare the hours-long “research” online to years of expertise training and work experience.The fact is misinformation and deliberate fake information.Conspiracy theories are so prevalent on the Internet that you can almostalways find some rabbit hole for misleading or completely faketheories and keep reinforcing them.</p><h2 id="journalism"><a class="markdownIt-Anchor" href="#journalism"></a> Journalism</h2><p>Modern-day journalism, to attract customers, is also increasingly becoming biasedand divisive, thanks to the audience. Journalists themselves always reported misleadinginformation due to the lack of expertise. But the growing trend of commercialjournalism has suffered the same fate as the Internet: it caters to the audience’sworst desires that create a feedback loop. The industry itself is undermining professionalismand turning journalism into entertainment.</p><h2 id="experts"><a class="markdownIt-Anchor" href="#experts"></a> Experts</h2><p>Experts, more often than not, are also wrong. Experts are also human and are not immuneto making human mistakes. There’s negligence, prejudice, and conflict of interest in all industries.Experts should be responsible for their own words and actions, but the misconception that“experts should always be right, or else they can never be trusted” is detrimental to ourrelationship with experts as well.</p><hr /><p>The author argues that expertise is crucial in a democracy,but we’re now in an epistemological crisis. We need to urgentlyreconcile the relationships between citizens, experts, and decision-makers.</p><p>It’s been a good read with the book. It’s a wake-up call to the anti-intellectualism prevalent in American society.But the author did not give an (in my opinion) satisfactory answer to how to solve the problems of “The death of expertise.” He admits that experts make mistakes, and the public should put the experts in check, but also concludes that “experts are more often right than the public.” I’d not be satisfied with the notion that we should accept the facts passed on by experts.</p><p>Like some comments from <a href="https://www.goodreads.com/book/show/26720949-the-death-of-expertise">GoodReads</a>,the book (somewhat ironically) falls short on providing concrete,authoritative sources to confirm some of the trends are happening.It lacks the intellectual rigor to actually back the problems with researches,statistics, and convincing sources, making it more of a long rant than careful analysis of the problems.</p><p>Also, some reviewer point out the author may have missed the fact of some of the underlying structuralproblems in society, like “the corporatization of media and neoliberalismin general.” Instead, it focuses most fire on the public for beingincreasingly partisan and prejudiced.</p><p>In all, I believe this book serves as an interesting read and a great wake-upcall for the public about the problems. It has excellent anecdotal stories andcritiques of the problem. But it doesn’t serve as a rigorous analysis for ourissues at hand. Nor does it serve well in suggesting what can be done about them.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Death of Expertise: The Campaign Against Established Knowledge and Why It Matters&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Death_of_Expertise&quot;&gt;https://en.wikipedia.org/wiki/The_Death_of_Expertise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“The Death of Expertise” by Tom Nichols is a timely piece to the
ongoing information endemic, especially in America. Quoting Issac Asimov:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a cult of ignorance in the United States, and there always has been. The strain of anti-intellectualism has been a constant thread winding its way through our political and cultural life, nurtured by the false notion that democracy means that “my ignorance is just a good as your knowledge.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The book describes the author’s view of why experts are so important in a democracy
and the relationship between expertise the public. And it also goes on to decry the
ongoing decay in this relationship, where citizens are increasingly losing trust
in experts, and experts are increasingly finding it difficult to communicate with their audience.&lt;/p&gt;
    
    </summary>
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/categories/BookReview/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
      <category term="Sociology" scheme="https://blog.kevinhu.me/tags/Sociology/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary: 11/06/2020</title>
    <link href="https://blog.kevinhu.me/2020/11/06/06-Reading-Summary-2020-11/"/>
    <id>https://blog.kevinhu.me/2020/11/06/06-Reading-Summary-2020-11/</id>
    <published>2020-11-07T05:23:00.000Z</published>
    <updated>2020-11-07T22:40:24.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="technology"><a class="markdownIt-Anchor" href="#technology"></a> Technology</h1><h2 id="edsger-dijkstra-the-man-who-carried-computer-science-on-his-shoulders"><a class="markdownIt-Anchor" href="#edsger-dijkstra-the-man-who-carried-computer-science-on-his-shoulders"></a> <a href="https://inference-review.com/article/the-man-who-carried-computer-science-on-his-shoulders">Edsger Dijkstra: The Man Who Carried Computer Science on His Shoulders</a></h2><p>The often untold story behind a mastermind of Computer Science: Dijkstra, whose name has been an importantalgorithm widely used in GPS navigation.</p><p>The blog described a wise, hard-thinker, a great mind who made unparallel contributions to both ComputerScience as a mathematical and logical view, as well as Software Engineering which focuses on buildingsoftware and hardware components.</p><p>He’s most famous for his private reports, named “EWD”, and continued for more than forty years,describing his views on Computer Science and Software Engineering in general, and sometimes workedas reviews for others’ work. One of the most influencing “EWD” report was “Notes on Structured Programming,”which argued programming as a serious form of skill that demands intellectual rigor.</p><p>In 1972, Dijkstra received the ACM Turing Award, he was recognized for:</p><blockquote><p>contributions to programming as a high, intellectual challenge; for eloquent insistence and practical demonstration that programs should be composed correctly, not just debugged into correctness; for illuminating perception of problems at the foundations of program design.</p></blockquote><p>He has great passion for his art, and his strong personality sometimes sparked controversies.One of the most famous was the discussion on critiquing “GOTO” statements as harmful. Itbrought widespread, heated debate, yet Dijkstra’s view finally prevailed, and his insistencemade a monumental change to programming paradigm.</p><p>There are much more interesting details around his personal and academic life in the original post,too long to be summarized here. For example, his had a mini-van in Austin, which he often drove tonational parks with his wife, and it was named the “Touring Machine.” If you are passionate with computers and software,have a long weekend afternoon, it’s worth a good read.</p><span id="more"></span><h1 id="programming"><a class="markdownIt-Anchor" href="#programming"></a> Programming</h1><h2 id="wtf-python"><a class="markdownIt-Anchor" href="#wtf-python"></a> <a href="https://github.com/satwikkansal/wtfpython#-some-fancy-title">WTF Python!</a></h2><p>The quirks around the Python programming language. The use cases described in the document areusually not recommended way of using Python, as it might trigger unexpected behaviors.They expose some underlying implementation details, the majority of which for optimizations,and may have some counter-intuitive side-effects.</p><p>No programming language, or tool, frameworks is perfect. If you’d like to use somethingfluently, you’ll also need to understand its weird corner cases.</p><h1 id="studying"><a class="markdownIt-Anchor" href="#studying"></a> Studying</h1><h2 id="introduction-to-the-zettelkasten-method"><a class="markdownIt-Anchor" href="#introduction-to-the-zettelkasten-method"></a> <a href="https://zettelkasten.de/introduction/">Introduction to the Zettelkasten Method</a></h2><p>An interesting notebook method I’ve recently bumped into. And I’ve been using Notion notebookwith it.</p><p>The idea is that: you’ll read and learn many small facts and concepts, but would forget them quickly.Zettelkasten method will record, and connect them into much more powerful ideas and concepts, sinceinnovations often arrive when ideas clash. Used correctly, this personal notebook methodcould be a significant way of boosting your creativity.</p><h1 id="society"><a class="markdownIt-Anchor" href="#society"></a> Society</h1><h2 id="to-combat-conspiracy-theories-teach-critical-thinking-and-community-values"><a class="markdownIt-Anchor" href="#to-combat-conspiracy-theories-teach-critical-thinking-and-community-values"></a> <a href="https://theconversation.com/to-combat-conspiracy-theories-teach-critical-thinking-and-community-values-147314?s=09">To Combat Conspiracy Theories, Teach Critical Thinking - And Community Values</a></h2><p>An interesting idea from studying the spread of conspiracy theory: most followers and spreadersare drawn to conspiracy theories, as they find comfort and a sense of community in it.</p><p>Fighting disinformation and conspiracy theories can be hard, but this idea could provide a way ofpreventing the agents from spreading it.</p><p>When someone feels unfit or even abandoned by the mainstream society, they seek comfort inoutlandish ideas. The conclusion? One important aspect of fighting conspiracy theory is to buildcommunity value.</p><h2 id="how-scientism-spawns-pseudoscience-and-science-denialism"><a class="markdownIt-Anchor" href="#how-scientism-spawns-pseudoscience-and-science-denialism"></a> <a href="https://thephilosophicalsalon.com/how-scientism-spawns-pseudoscience-and-science-denialism/">How Scientism Spawns Pseudoscience And Science Denialism</a></h2><p>Scientism is the idea that we should believe in science and scientists no matter what.This idea is the wrong way of pursuing the true spirit of science,is actually considered harmful, and might backfire with denial.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;technology&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#technology&quot;&gt;&lt;/a&gt; Technology&lt;/h1&gt;
&lt;h2 id=&quot;edsger-dijkstra-the-man-who-carried-computer-science-on-his-shoulders&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#edsger-dijkstra-the-man-who-carried-computer-science-on-his-shoulders&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://inference-review.com/article/the-man-who-carried-computer-science-on-his-shoulders&quot;&gt;Edsger Dijkstra: The Man Who Carried Computer Science on His Shoulders&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The often untold story behind a mastermind of Computer Science: Dijkstra, whose name has been an important
algorithm widely used in GPS navigation.&lt;/p&gt;
&lt;p&gt;The blog described a wise, hard-thinker, a great mind who made unparallel contributions to both Computer
Science as a mathematical and logical view, as well as Software Engineering which focuses on building
software and hardware components.&lt;/p&gt;
&lt;p&gt;He’s most famous for his private reports, named “EWD”, and continued for more than forty years,
describing his views on Computer Science and Software Engineering in general, and sometimes worked
as reviews for others’ work. One of the most influencing “EWD” report was “Notes on Structured Programming,”
which argued programming as a serious form of skill that demands intellectual rigor.&lt;/p&gt;
&lt;p&gt;In 1972, Dijkstra received the ACM Turing Award, he was recognized for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;contributions to programming as a high, intellectual challenge; for eloquent insistence and practical demonstration that programs should be composed correctly, not just debugged into correctness; for illuminating perception of problems at the foundations of program design.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He has great passion for his art, and his strong personality sometimes sparked controversies.
One of the most famous was the discussion on critiquing “GOTO” statements as harmful. It
brought widespread, heated debate, yet Dijkstra’s view finally prevailed, and his insistence
made a monumental change to programming paradigm.&lt;/p&gt;
&lt;p&gt;There are much more interesting details around his personal and academic life in the original post,
too long to be summarized here. For example, his had a mini-van in Austin, which he often drove to
national parks with his wife, and it was named the “Touring Machine.” If you are passionate with computers and software,
have a long weekend afternoon, it’s worth a good read.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Programming" scheme="https://blog.kevinhu.me/tags/Programming/"/>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Julia: Dynamism and Performance Reconciled by Design</title>
    <link href="https://blog.kevinhu.me/2020/11/05/05-Paper-Reading-Julia-Design/"/>
    <id>https://blog.kevinhu.me/2020/11/05/05-Paper-Reading-Julia-Design/</id>
    <published>2020-11-05T23:54:00.000Z</published>
    <updated>2020-11-07T07:47:52.743Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://dl.acm.org/doi/pdf/10.1145/3276490">https://dl.acm.org/doi/pdf/10.1145/3276490</a></p><p>The paper outlines the Julia programming language’s some most important design choices, andexplains how they build a bridge between user-friendliness and performance.</p><p>The paper provided with a few benchmarks, to compare its performance with a C baseline,along with other dynamic languages like Python, MATLAB, JavaScript, and so on.While other dynamic programming languages suffer great performance loss, due to its dynamism,Julia can compete relatively close with the C/C++ baseline, with up to native performance in a fewcases, most of the benchmarks are within 2x of C or C++, while Python can suffer more than 70x slowerperformance than C++.</p><p>This is significant, as it may eliminate the “prototype in dynamic language, then reimplementin static language for faster performance” cycle, eliminating extra time on coding to achieveefficiency without sacrificing much performance.</p><p>Some key takeouts from this paper:</p><span id="more"></span><h1 id="type-annotations"><a class="markdownIt-Anchor" href="#type-annotations"></a> Type Annotations</h1><p>Unlike Python, Julia incorporates option typing in its runtime, which helps to check itscorrectness at runtime, as well as enabling optimizations.</p><p>Type stability is an important concept in Julia code. It means that for a certain typecontext, an expression always return the value of the same type. And it’s the key toperformant Julia code, as the compiler can use the specialized low-level method for thattype.</p><p>In the example as following, the Julia compiler can spit x86 ASM almost the same as whata C/C++ compiler would:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function vsum(x)</span><br><span class="line">    sum = zero(x)</span><br><span class="line">    for i = 1:length(x)</span><br><span class="line">        @inbounds v = x[i]</span><br><span class="line">        if !is_na(v)</span><br><span class="line">            sum += v</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    sum</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>Julia compiler also infers type information based on user annotation as well asinput types at runtime, to better help JIT optimization.</p><h1 id="multiple-dispatch"><a class="markdownIt-Anchor" href="#multiple-dispatch"></a> Multiple Dispatch</h1><p>Multiple Dispatch is similar to the concept of operator overloading in other programminglanguages. It means overloading function behavior based on the input types.</p><p>For example, the + function can consist of 180 underlying methods based on the input types.Each method declares what types it can handle, and Julia will “dispatch” it to the correctmethod when it’s called.</p><h1 id="method-specialization"><a class="markdownIt-Anchor" href="#method-specialization"></a> Method Specialization</h1><p>At runtime, Julia can decide at function invocation time, what types are the inputs,and the method is “specialized” to these types, whichprovides JIT with the important information about the argument typefor “devirtualization.” So the method dispatch becomes a specialized compiled method,which enables more optimizations like inlining.</p><h1 id="llvm"><a class="markdownIt-Anchor" href="#llvm"></a> LLVM</h1><p>Julia compiler parses program input to Julia AST, which then lowered to Julia IR. It enablesJulia language level optimizations, and then translates to LLVM IR. LLVM IR enables a largenumber of optimizations that are critical to Julia performance.</p><h1 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h1><p>Based on skimming the paper, Julia is a very interesting language that’s inspired bymany former dynamic languages while providing more innovative solutions to issues thatused to trouble programmers. It’s definitely worth attention in areas like mathematical modeling,HPC, AI/ML, and etc.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/3276490&quot;&gt;https://dl.acm.org/doi/pdf/10.1145/3276490&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The paper outlines the Julia programming language’s some most important design choices, and
explains how they build a bridge between user-friendliness and performance.&lt;/p&gt;
&lt;p&gt;The paper provided with a few benchmarks, to compare its performance with a C baseline,
along with other dynamic languages like Python, MATLAB, JavaScript, and so on.
While other dynamic programming languages suffer great performance loss, due to its dynamism,
Julia can compete relatively close with the C/C++ baseline, with up to native performance in a few
cases, most of the benchmarks are within 2x of C or C++, while Python can suffer more than 70x slower
performance than C++.&lt;/p&gt;
&lt;p&gt;This is significant, as it may eliminate the “prototype in dynamic language, then reimplement
in static language for faster performance” cycle, eliminating extra time on coding to achieve
efficiency without sacrificing much performance.&lt;/p&gt;
&lt;p&gt;Some key takeouts from this paper:&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/tags/ProgrammingLanguage/"/>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Julia" scheme="https://blog.kevinhu.me/tags/Julia/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary: 07/20/2020</title>
    <link href="https://blog.kevinhu.me/2020/07/20/20-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2020/07/20/20-Reading-Summary/</id>
    <published>2020-07-20T06:30:00.000Z</published>
    <updated>2020-07-20T06:43:09.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="social"><a class="markdownIt-Anchor" href="#social"></a> Social</h1><h3 id="a-sino-american-bond-forged-by-chinese-students-is-in-peril"><a class="markdownIt-Anchor" href="#a-sino-american-bond-forged-by-chinese-students-is-in-peril"></a> <a href="https://amp.economist.com/china/2020/07/11/a-sino-american-bond-forged-by-chinese-students-is-in-peril">A Sino-American bond, forged by Chinese students, is in peril $</a></h3><p>How Chinese-American relationship is impacting the lives of many “stuck in between.”</p><h3 id="how-social-media-took-us-from-tahrir-square-to-donald-trump"><a class="markdownIt-Anchor" href="#how-social-media-took-us-from-tahrir-square-to-donald-trump"></a> <a href="https://www.technologyreview.com/2018/08/14/240325/how-social-media-took-us-from-tahrir-square-to-donald-trump/amp/">How social media took us from Tahrir Square to Donald Trump</a></h3><p>The author had the foresight about the dangerous impact social media has on a society,and he was right.</p><p>He also proposes: the cure cannot be a pure technological one, it requires fixing thevulnerabilities inside economics, political, and social systems.</p><h1 id="technology"><a class="markdownIt-Anchor" href="#technology"></a> Technology</h1><h3 id="testifying-at-the-senate-about-aiselected-content-on-the-internet-from-stephen-wolfram"><a class="markdownIt-Anchor" href="#testifying-at-the-senate-about-aiselected-content-on-the-internet-from-stephen-wolfram"></a> <a href="https://writings.stephenwolfram.com/2019/06/testifying-at-the-senate-about-a-i-selected-content-on-the-internet/">Testifying at the Senate about A.I.‑Selected Content on the Internet, from Stephen Wolfram</a></h3><p>Stephen Wolfram’s testimony at the Senate, on A.I. selected content, his ideas onwhy algorithmic bias is dangerous, and how we can address it with proper regulations,transparency, and user choice.</p><p>He basically proposed that users should have an idea of what algorithm is feeding them data,and the capability to choose. This requires some open benchmarks on recommendation algorithms,and frameworks for users to choose.</p><h1 id="programming"><a class="markdownIt-Anchor" href="#programming"></a> Programming</h1><h3 id="the-rise-of-embarrassingly-parallel-serverless-compute"><a class="markdownIt-Anchor" href="#the-rise-of-embarrassingly-parallel-serverless-compute"></a> <a href="https://davidwells.io/blog/rise-of-embarrassingly-parallel-serverless-compute">The Rise of Embarrassingly Parallel Serverless Compute</a></h3><p>What is serverless computing, why it is on the rise,and why is it useful for parallel data processing (data processing,CI/CD, compilation, ML, visualization, …, you name it).</p><h3 id="nosql-data-modeling-techniques"><a class="markdownIt-Anchor" href="#nosql-data-modeling-techniques"></a> <a href="https://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/">NoSQL Data Modeling Techniques</a></h3><p>A detailed guide for modeling your NoSQL data schemes.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;social&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#social&quot;&gt;&lt;/a&gt; Social&lt;/h1&gt;
&lt;h3 id=&quot;a-sino-american-bond-forged-by-chinese-students-is-in-p
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Aurora: Distributed Relational Database</title>
    <link href="https://blog.kevinhu.me/2020/07/04/04-Reading-Aurora-Database/"/>
    <id>https://blog.kevinhu.me/2020/07/04/04-Reading-Aurora-Database/</id>
    <published>2020-07-05T03:17:00.000Z</published>
    <updated>2020-07-05T03:35:56.611Z</updated>
    
    <content type="html"><![CDATA[<p>The following is my <strong>overly simplified</strong> summary of paper reading.</p><p>Aurora is a geo-distributed SQL database that supports replication, high-availability, and transactions,with its distributed design around replicating the database WAL log.</p><h1 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h1><ul><li><strong>Course Syllabus:</strong> <a href="https://pdos.csail.mit.edu/6.824/schedule.html">https://pdos.csail.mit.edu/6.824/schedule.html</a></li><li><strong>Video Lectures:</strong> <a href="https://www.youtube.com/channel/UC_7WrbZTCODu1o_kfUMq88g/videos">https://www.youtube.com/channel/UC_7WrbZTCODu1o_kfUMq88g/videos</a></li><li><strong>Lecture</strong>: <a href="https://www.youtube.com/watch?v=jJSh54J1s5o">https://www.youtube.com/watch?v=jJSh54J1s5o</a></li></ul><span id="more"></span><h1 id="design-choices"><a class="markdownIt-Anchor" href="#design-choices"></a> Design Choices</h1><ul><li>Saving data on EBS is too slow, unreliable, and generates too much traffic.</li><li>Building Storage as an independent Fault-Tolerant self healing service across data-centers.</li><li>Writing only redo log to disk, and across the network across AZs (Availability Zones).</li></ul><h1 id="the-log-is-the-database"><a class="markdownIt-Anchor" href="#the-log-is-the-database"></a> The Log is the Database</h1><p>Original design to mirror data on EBS is slow, unreliable, and incurs expensive network overheads.</p><p><strong>The log is the Database</strong>: write only redo log to disk and across the network. Backup disk to s3 on the background.</p><h2 id="durability-replication-and-quorum-model"><a class="markdownIt-Anchor" href="#durability-replication-and-quorum-model"></a> Durability, Replication and Quorum Model</h2><ul><li>Traditional Quorum is inadequate: Doesn’t prevent total AZ (Availability Zone) failure.</li><li>2 * 3 architecture:3 different AZ, 2 nodes per AZ, 6 way copy.Vw=4, Vr=3. Need 4 nodes to write, 3 nodes to read.</li><li>So that Write is Available even when AZ goes down. Read even when AZ + 1.</li></ul><h2 id="partitioning"><a class="markdownIt-Anchor" href="#partitioning"></a> Partitioning</h2><p>Partition the database volumes to small fixed size segments called PGs (Protection Groups), each PG is replicated 6 ways across 3 AZs.</p><p>PGs are implemented as storage nodes with EC2 VMs, and attached SSDs.</p><p>Partitioning also helps reducing the MTTF (Mean Time to Failure) to reduce probability of losing quorum.</p><h2 id="storage-service-design-points"><a class="markdownIt-Anchor" href="#storage-service-design-points"></a> Storage Service Design Points</h2><ul><li>Move majority of the storage processing to the background.</li><li>Every task is asynchronous processing.</li><li>Foreground processing writes to the updated queue. Background handles compacting, GC, backup, etc, which doesn’t impact latency.</li></ul><p><img src="aurora_io.png" alt="IO Traffic in Aurora Storage Nodes" /></p><h1 id="log-system-design-details"><a class="markdownIt-Anchor" href="#log-system-design-details"></a> Log System Design Details</h1><p>Problem: how to implement consistency on logs, without expensive 2PC, and how to handle recovery process.</p><h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2><p><strong>Terminology:</strong></p><ul><li><strong>LSN:</strong> Use monotonically increasing LSN (Log Sequence Number) for each Log entry.</li><li><strong>VCL:</strong> Volume Complete LSN: the highest LSN for which it can guarantee availability of all prior log records.Since all log replication is async, not all log entries are replicated before later log entries are replicated.</li><li><strong>MTR:</strong> Mini-transactions. Each database-level transaction is broken up into multiple mini-transactions that are ordered an must be performed atomically.</li><li><strong>CPL:</strong> Consistency Point LSNs. The LSN points that allows truncations, as mini-transactions can span across multiple LSNs, and should be performed atomically. The final log record of a MTR (mini-transaction) is marked as CPL.</li><li><strong>VDL:</strong> Volume Durable LSN. The highest CPL ≤ VCL, that is, it’s complete, and is the last log record that supports truncation to ensure the completeness of a MTR.During a recovery, logs after VDLs are truncated. It ensures all log records ≤ VDL are complete (all records all replicated), and doesn’t break MTRs (marked by CPL).</li></ul><p><strong>Writes:</strong></p><ul><li>Continuously logs to the storage service, establish write quorum for all writes, and register transactions as committed, therefore advancing VDL.</li><li>Limits concurrent LSNs that are higher than current VDL (concurrently writing but didn’t yet establish quorum).</li></ul><p><strong>Commits:</strong></p><ul><li>Aurora handles transaction commits asynchronously.</li><li>When a client commits a transaction, the thread handling the commit requests sets the transaction aside by recording its “commit LSN”.</li><li>When WAL’s VDL ≥ “commit LSN”, transaction is committed. Use dedicated thread to send ACK to client.</li></ul><p><strong>Reads:</strong></p><ul><li>Pages are served from the buffer cache.</li><li>Buffer caches only evict out-of-date pages. (where an evicted page from the cache only if it’s “page LSN” ≥ VDL.</li><li>Quorum reads during recovery only. Ordinary reads are from nodes with.</li><li>Read from the “up-to-date” read point with a low water mark.</li></ul><p><strong>Replicas:</strong></p><ul><li>Read replicas add additional costs.</li><li>Only log records that will be applied are ones whose LSN ≤ VDL.</li><li>The log records of a mini-transaction are applied atomically, so that replicas see a consistent view.</li></ul><p><strong>Recovery:</strong></p><ul><li>Aurora uses a Quorum read for recovery process.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The following is my &lt;strong&gt;overly simplified&lt;/strong&gt; summary of paper reading.&lt;/p&gt;
&lt;p&gt;Aurora is a geo-distributed SQL database that supports replication, high-availability, and transactions,
with its distributed design around replicating the database WAL log.&lt;/p&gt;
&lt;h1 id=&quot;references&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#references&quot;&gt;&lt;/a&gt; References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Course Syllabus:&lt;/strong&gt; &lt;a href=&quot;https://pdos.csail.mit.edu/6.824/schedule.html&quot;&gt;https://pdos.csail.mit.edu/6.824/schedule.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Video Lectures:&lt;/strong&gt; &lt;a href=&quot;https://www.youtube.com/channel/UC_7WrbZTCODu1o_kfUMq88g/videos&quot;&gt;https://www.youtube.com/channel/UC_7WrbZTCODu1o_kfUMq88g/videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lecture&lt;/strong&gt;: &lt;a href=&quot;https://www.youtube.com/watch?v=jJSh54J1s5o&quot;&gt;https://www.youtube.com/watch?v=jJSh54J1s5o&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Database" scheme="https://blog.kevinhu.me/tags/Database/"/>
    
      <category term="Aurora" scheme="https://blog.kevinhu.me/tags/Aurora/"/>
    
  </entry>
  
  <entry>
    <title>Reading: Cassandra Data Modeling</title>
    <link href="https://blog.kevinhu.me/2020/07/03/03-Cassandra-Data-Modeling/"/>
    <id>https://blog.kevinhu.me/2020/07/03/03-Cassandra-Data-Modeling/</id>
    <published>2020-07-04T03:55:00.000Z</published>
    <updated>2020-07-05T03:18:01.867Z</updated>
    
    <content type="html"><![CDATA[<p>Reading from Cassandra official website: <a href="https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236%20-%20Data%20Modeling%20in%20Apache%20Cassandra%20%E2%84%A2%20White%20Paper-4.pdf">https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236 - Data Modeling in Apache Cassandra ™ White Paper-4.pdf</a></p><p>Cassandra is a exemplary implmentation of NoSQL database, and gained popularity in various web, big data, and ML applications.Recently I’ve stumbled upon a good summary of Cassandra handbook, which includes a decent introduction to its datamodeling techniques, which can in term be used in other NoSQL databases.</p><p>Here are my notes and summaries:</p><h1 id="data-modeling-concepts"><a class="markdownIt-Anchor" href="#data-modeling-concepts"></a> Data Modeling Concepts</h1><p>There are great many ways Cassandra and traditional RDBMS are different: Cassandra is a wide-column database, with BASE eventual consistency guarantees, has looser relationships between tables. Therefore one needs to model their data very differently than traditional RDBMS for the application to run efficiently.</p><p>Namely NoSQL has following differences:</p><ul><li><strong>No Joins:</strong> tables have loose relationships with each other without database level joining.</li><li><strong>No Referential Integrity</strong>: RDBMS requires foreign keys to refer to primary key in another table. NoSQL doesn’t enforce this.</li><li><strong>Denormalization:</strong> contrary to what RDBMS normalization techniques, denormalization is first-class citizen in NoSQL. Many NoSQL databases supports aggregating fields in the same table to achieve row level atomicity.</li><li><strong>Query Firs</strong>t: SQL data modeling starts with entities and relations, while NoSQL data modeling starts with application queries.</li><li><strong>Sorting</strong>: Sorting is an important design decision, for Cassandra and many NoSQL databases.</li></ul><span id="more"></span><blockquote><p>(?) What are the major differences between NoSQL and SQL data modeling?</p></blockquote><h1 id="logical-data-modeling-in-cassandra"><a class="markdownIt-Anchor" href="#logical-data-modeling-in-cassandra"></a> Logical Data Modeling in Cassandra</h1><p>A Cassandra table uses a composite key as primary key: with a <strong>partition key (K)</strong> and a <strong>cluster key ©</strong>.</p><ul><li>Partition key (K) decides where the row stores in the cluster.</li><li>Clustering key © decides how the row is sorted under the same partition key.</li><li>Primary key can be composite of multiple Partition Keys (K) and Clustering Keys ©.e.g.: ((K1, K2), (C1, C2, C3)).</li></ul><p>Primary key is crucially important in Cassandra data modeling, as:</p><ul><li>Cassandra doesn’t support query filtering without partition key.</li><li>It impacts partitioning of data across databases, and therefore potentially impacts performance.</li><li>Sorting is a very important decision and it impacts query performance.</li></ul><blockquote><p>(?) What is Cassandra key and why is it important?</p></blockquote><h2 id="i-build-application-workflow"><a class="markdownIt-Anchor" href="#i-build-application-workflow"></a> I. Build Application Workflow</h2><p>Logical Data Modeling starts with overall Application workflow, known as the “query-first design.”</p><h2 id="ii-build-e-r-diagram"><a class="markdownIt-Anchor" href="#ii-build-e-r-diagram"></a> II. Build E-R Diagram</h2><p>Entity-Relation Diagram often used for SQL data modeling, but helpful to think through the E-Rs involved in the NoSQL modeling.</p><p>Iterate between Application Query Workflow and E-R Diagram.</p><h2 id="iii-use-chetboko-diagrams"><a class="markdownIt-Anchor" href="#iii-use-chetboko-diagrams"></a> III. Use Chetboko Diagrams</h2><p>Chetboko Diagram is a good tool to model the queries and tables required by the NoSQL application.</p><ul><li>It captures the schema, highlights the partition key (K) and clustering key © for each table.</li><li>It shows the application query workflow, and how queries link the tables together.</li></ul><p><img src="chetboko.png" alt="Chetboko Diagram" /></p><blockquote><p>(?) In NoSQL data modeling, what is a Chetboko Diagram and how does it help with modeling?</p></blockquote><h2 id="iv-create-tables"><a class="markdownIt-Anchor" href="#iv-create-tables"></a> IV. Create Tables</h2><p>Some items to consider when creating the tables:</p><ul><li>Design keys well. Create unique keys.</li><li>Use data types effectively. Cassandra supports collection (set, list, map, tuple, …).</li><li>Use user-defined data-types by creating types.</li><li>Denormalization is normal.</li><li>Use secondary indexes and materialized views when necessary.</li></ul><h1 id="references"><a class="markdownIt-Anchor" href="#references"></a> <strong>References</strong></h1><ul><li>NoSQL Data Modeling Techniques: <a href="https://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/">https://highlyscalable.wordpress.com/2012/03/01/nosql-data-modeling-techniques/</a></li><li>Data Modeling in Cassandra: <a href="https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236%20-%20Data%20Modeling%20in%20Apache%20Cassandra%20%E2%84%A2%20White%20Paper-4.pdf">https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236 - Data Modeling in Apache Cassandra ™ White Paper-4.pdf</a></li><li>Cassandra the Definitive Guide: <a href="https://www.datastax.com/resources/ebook/oreilly-cassandra-definitive-guide">https://www.datastax.com/resources/ebook/oreilly-cassandra-definitive-guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reading from Cassandra official website: &lt;a href=&quot;https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236%20-%20Data%20Modeling%20in%20Apache%20Cassandra%20%E2%84%A2%20White%20Paper-4.pdf&quot;&gt;https://www.datastax.com/sites/default/files/content/whitepaper/files/2019-10/CM2019236 - Data Modeling in Apache Cassandra ™ White Paper-4.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cassandra is a exemplary implmentation of NoSQL database, and gained popularity in various web, big data, and ML applications.
Recently I’ve stumbled upon a good summary of Cassandra handbook, which includes a decent introduction to its data
modeling techniques, which can in term be used in other NoSQL databases.&lt;/p&gt;
&lt;p&gt;Here are my notes and summaries:&lt;/p&gt;
&lt;h1 id=&quot;data-modeling-concepts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#data-modeling-concepts&quot;&gt;&lt;/a&gt; Data Modeling Concepts&lt;/h1&gt;
&lt;p&gt;There are great many ways Cassandra and traditional RDBMS are different: Cassandra is a wide-column database, with BASE eventual consistency guarantees, has looser relationships between tables. Therefore one needs to model their data very differently than traditional RDBMS for the application to run efficiently.&lt;/p&gt;
&lt;p&gt;Namely NoSQL has following differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Joins:&lt;/strong&gt; tables have loose relationships with each other without database level joining.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Referential Integrity&lt;/strong&gt;: RDBMS requires foreign keys to refer to primary key in another table. NoSQL doesn’t enforce this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Denormalization:&lt;/strong&gt; contrary to what RDBMS normalization techniques, denormalization is first-class citizen in NoSQL. Many NoSQL databases supports aggregating fields in the same table to achieve row level atomicity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query Firs&lt;/strong&gt;t: SQL data modeling starts with entities and relations, while NoSQL data modeling starts with application queries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt;: Sorting is an important design decision, for Cassandra and many NoSQL databases.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Cassandra" scheme="https://blog.kevinhu.me/tags/Cassandra/"/>
    
      <category term="Database" scheme="https://blog.kevinhu.me/tags/Database/"/>
    
      <category term="NoSQL" scheme="https://blog.kevinhu.me/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: Black Swan - The Impact of the Highly Improbable</title>
    <link href="https://blog.kevinhu.me/2020/04/05/05-Book-Review-Black-Swan/"/>
    <id>https://blog.kevinhu.me/2020/04/05/05-Book-Review-Black-Swan/</id>
    <published>2020-04-05T21:40:00.000Z</published>
    <updated>2020-04-05T22:18:03.709Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve just finished the major part (without the postscript essays) of the famous and oft-discussed book, once a best seller - the Black Swan. The author was knowledgable, and the book was insightful and well-crafted, with his unique style of discussing serious topics with occasional anecdotes and vivid storytelling. It was a fantastic ride.</p><span id="more"></span><h1 id="human-thinking-fallacy"><a class="markdownIt-Anchor" href="#human-thinking-fallacy"></a> Human Thinking Fallacy</h1><p>Humans tend to think and live in Mediocristan, where probability tends to be in normal distribution - and that’s what most things are. Like human height, weight.</p><p>Black Swan incidents are ones that people can barely predict, sometimes grossly overlook. Examples include the 9.11 incident, 2008 stock market crash, etc.</p><p>But many other distributions are best described as power distribution, and that’s referred to as Extremistan, where cases tend to be extreme. Like human wealth.</p><p>It’s human nature to draw conclusions, find correlations, assume everything is close to what we observed, and extreme cases are extremely unlikely. And that’s the basic recipe for Black Swan incidents.</p><p>Think of a turkey well-fed by its owner. It quickly concludes that the owner is a friend, until the day before Thanksgiving. The author advises in the book: don’t be a turkey.</p><p>The author discussed a few cognitive biases we’re vulnerable to:</p><ul><li><strong>Confirmation Bias</strong>: People seek validation and reenforce their bias.</li><li><strong>Narrative Fallacy</strong>: People tend to find causes, as stories are much easier to digest given causes and reasons. People love to conclude as part of our natural tendencies.</li><li><strong>The Antechamber of Hope</strong>: The success of specific careers require an extraordinary amount of input and lonely hours waiting for hope. But many people don’t realize that, even the pursuers of these careers themselves.</li><li><strong>Survival Bias</strong>: People tend to look at survivors or successful stories while overlook deaths, thus overlook the total probability.</li></ul><h1 id="how-are-we-bad-at-prediction"><a class="markdownIt-Anchor" href="#how-are-we-bad-at-prediction"></a> How Are We Bad At Prediction</h1><p>Human beings are particularly bad at making predictions. One phenomenon is the more information we have, the more confident we are, but not more accurate. It’s called “toxicity of information,” where noise is mistaken for signal.</p><p>The author argues that human technological advances are particularly unpredictable: “if you expect to expect something tomorrow, you should expect it today.” It’s especially true with new technologies. If we understand the details of new technology right now to predict it, we should already know how it’ll work and have it today.</p><p>In the book, the author slammed the so-called economists, social scientists, and the like, who build complicated mathematical models and beautiful charts to “forecast” the economic trends, stock market, etc., without taking into account chance plays in the outcomes. It makes them utterly vulnerable to Black Swans.</p><p>The author points out, however, that we should not try to predict Black Swans. Instead, build robustness against negative Black Swans, and shoot for positive Black Swans.</p><h1 id="gray-swans-of-extremistan"><a class="markdownIt-Anchor" href="#gray-swans-of-extremistan"></a> Gray Swans of Extremistan</h1><p>The final part of the book author argues that the foundation of Black Swans is power distribution. It happens everywhere in the world: economy, company, nation powers, where winners take all. It has several implications:</p><ul><li>Nobody is safe in Extremistan, but nobody is threatened with total extinction either.</li><li>More concentrated power means more devastating collapse, too.</li><li>There are always ways to soften Extremistan, e.g., tax to redistribute wealth, religion to bind people. But Extremistan is here to stay.</li><li>Black Swans are always going to happen. We can make it grayer by treating them with the correct attitude.</li></ul><hr /><p>Many book reviews have already gone through what they dislike about the author’s arrogant tone in this book, dismissing all social science as pseudo-science. Also, the author loved to paint himself as the lone wise oracle shunned by ordinary people, but that’s not the truth: many people have similar or close ideas of impending dangers and what we should do about them.</p><p>Nevertheless, the ideas in the book are still worth a read and close attention, especially in a fast-changing world as it is today.</p><p>One of the best examples might be the coronavirus that’s sweeping across the world right now, as I’m sitting in my own house, not being able to visit the restaurants and coffee shops I love. In retrospect, when the news first broke out, I never expected it could have such a drastic impact. Many people, myself included, like most popular news anchors, technologists, president of the US, and so so many more on social media, regarded the virus as “something just like the flu,” and “it’s just going to go away when the season passes.” Media today love to bring out the old comments, (especially with different political agenda), and use them to mock how ignorant and short-sighted they are - even though they are not so innocent themselves. I see this more like a common flaw in human predictions, just as the book described: as humans, we’re particularly bad at predictions.</p><p>There are also voices pointing out that it didn’t need to be a Black Swan. Nassim Taleb, the author of this book, <a href="https://www.bloomberg.com/news/videos/2020-03-30/nassim-taleb-says-white-swan-coronavirus-pandemic-was-preventable-video">stated in the recent interview</a>: coronavirus shouldn’t be a Black Swan, to governments, medical professionals, and epidemiologists who dealt with situations like this before. He was not alone. Bill Gates once warned us about the dangers of a <a href="https://www.youtube.com/watch?v=6Af6b_wyiwI">pending pandemic</a>. We didn’t take the advice seriously, and the pandemic still broke out as a Black Swan to all the rest of us.</p><p>Now instead of engaging in bitter political bickering, it’s wiser to learn from this lesson on all humanity and work together to make the next Black Swan grayer.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve just finished the major part (without the postscript essays) of the famous and oft-discussed book, once a best seller - the Black Swan. The author was knowledgable, and the book was insightful and well-crafted, with his unique style of discussing serious topics with occasional anecdotes and vivid storytelling. It was a fantastic ride.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary: Ultralearning</title>
    <link href="https://blog.kevinhu.me/2020/01/25/25-Ultralearning/"/>
    <id>https://blog.kevinhu.me/2020/01/25/25-Ultralearning/</id>
    <published>2020-01-25T22:55:34.000Z</published>
    <updated>2020-01-25T22:58:20.097Z</updated>
    
    <content type="html"><![CDATA[<p>Ultralearning is a quite interesting book from one of my favorite bloggers: Scott Young.Famous for his “MIT Challenge” – which he completed four years of MIT coursework in one single yearby completely self-studying – he now blogs regularly on studying methods, student cognitions,and everything related.</p><p>This book is his summary of his researches and experiences of studying.The book’s author argued that: there’s one possible way to learn and improve yourself,with intensive training and exercises. Like training muscles, you can adopt an extraordinary,unorthodox training plan for your brains, and pick up a new skill in a short amount of time,be it a foreign language, programming, sketch, or even public speaking. He called it “ultralearning.”In the book, he researched many references and interviewed like-minded friends,who had similar experiences of acquiring or improving a skill intensively.And he summarizes all the essential principles, as the guide to a successful “ultralearning” project.</p><span id="more"></span><ul><li><strong>Draw a Map</strong>: Research and layout a roadmap of what you try to study.Carve out enough time and make it a routine for you to follow.</li><li><strong>Focus</strong>: Train your focus. You cannot learn with efficiency if you can’t focus. It’s one of the most critical capabilities, yet it’s the most difficult to obtain. Most people suffer from not being able to start focusing (procrastination) or not being able to sustain focus (fatigue). It requires a large amount of practice.</li><li><strong>Directness</strong>: Contrary to some beliefs that learning can easily migrate from one skill to another, the author recommends directly target the very skill you’re trying to improve and be laser-focus on it.</li><li><strong>Drill</strong>: This is an area where you need excellent will power: keep finding out your weakest point and attack it ferociously. Do not live in the illusion of improvement, but keep exposing your week point.</li><li><strong>Retrieval</strong>: Test yourself to learn. The author notices though many students complain about missing lectures on online courses, few complain about missing tests. But learning isn’t about passively accepting knowledge. It’s really about acquiring and absorbing. Use the “Feynman techniques” to keep challenging your understanding.</li><li><strong>Feedback</strong>: Get feedback from others, preferably professionals. Their opinions can help you realize your blind spots.</li><li><strong>Retention</strong>: Memory is a huge aspect of learning. Use techniques to retain your knowledge of a subject, like spaced-repetition.</li><li><strong>Intuition</strong>: Study your subject and practice so hard, so that you develop insights on it, and put together what you’ve learned like jigsaw pieces.</li><li><strong>Experimentation</strong>: Finally, once you’ve gained enough skills, try to apply the skills and experiment on it to develop your original creations.</li></ul><p>I’ve finished this book in less than a week, and it was a pretty fun read.It included many anecdotes from authors’ friends and intellectual celebrities with high achievements (like Feynman, Ramanujan, Van Gogh, etc.)Also, it comes as a practical guidebook to your own learning projects.Although the book is named “ultralearning,” it does provide principles and tricks on learning, in or outside of school. In many places, it resonates with me as a student.</p><p>If I have to pick bones, as a guidebook to learning, this book feels a little verbose on stories.And as research on learning psychology, many of the stories don’t feel formal and convincing enough.But in all, it was a fun read for all the guidelines the book provides. I’d recommend it to anyone who believes learning is an essential part of their life.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ultralearning is a quite interesting book from one of my favorite bloggers: Scott Young.
Famous for his “MIT Challenge” – which he completed four years of MIT coursework in one single year
by completely self-studying – he now blogs regularly on studying methods, student cognitions,
and everything related.&lt;/p&gt;
&lt;p&gt;This book is his summary of his researches and experiences of studying.
The book’s author argued that: there’s one possible way to learn and improve yourself,
with intensive training and exercises. Like training muscles, you can adopt an extraordinary,
unorthodox training plan for your brains, and pick up a new skill in a short amount of time,
be it a foreign language, programming, sketch, or even public speaking. He called it “ultralearning.”
In the book, he researched many references and interviewed like-minded friends,
who had similar experiences of acquiring or improving a skill intensively.
And he summarizes all the essential principles, as the guide to a successful “ultralearning” project.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Learning" scheme="https://blog.kevinhu.me/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Zookeeper</title>
    <link href="https://blog.kevinhu.me/2020/01/20/20-Paper-Reading-Zookeeper/"/>
    <id>https://blog.kevinhu.me/2020/01/20/20-Paper-Reading-Zookeeper/</id>
    <published>2020-01-20T20:28:00.000Z</published>
    <updated>2020-01-20T22:35:06.437Z</updated>
    
    <content type="html"><![CDATA[<p>Paper: <a href="https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf">https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf</a></p><p>Presentation: <a href="https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems">https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems</a></p><span id="more"></span><h2 id="data-model"><a class="markdownIt-Anchor" href="#data-model"></a> Data Model</h2><p><img src="zookeeper_datamodel.png" alt="Zookeeper DataModel" /></p><p>Zookeeper’s data model is very like that of Unix tree-like file system paths.Every node is called a znode, with a key name and value, and may have its own children (except for ephermeral nodes).</p><p>Each znodes contain metadata like timestamps and data version number.</p><p>Nodes may be regular nodes, or ephermeral nodes, where clients keep alive bysending heartbeats to the server, and are removed in server after timeout.Handy for keeping membership information.</p><p>Provides basic client API like <code>create</code>, <code>get</code>, <code>set</code>, <code>delete</code>, <code>getChildren</code>,and <code>sync</code>, for clients to read the most up to date information.</p><h2 id="guarantees"><a class="markdownIt-Anchor" href="#guarantees"></a> Guarantees</h2><p>Keeps two consistency guarantees:</p><ul><li><strong>Linearizable writes</strong>: All writes are linearizable, and specifically<code>Asynchronous linearizabile</code>, meaning client requests are non-blocking (or wait-free),but requests are processed in serialized fashion.</li><li><strong>FIFO client order</strong>: All requests from clients are in processed in requestedorder. Meaning the client will see results in order when it’s issued. Thisprovides consistency guarantees in many applications.</li></ul><p>Zookeeper writes are processed at leader level, while reads are processed at all nodes,for better scalability and performance, and therefore doesn’t provide strongconsistency. Zookeeper provides a <code>sync()</code> API for clients to read up to date data.</p><h2 id="primitives-and-applications"><a class="markdownIt-Anchor" href="#primitives-and-applications"></a> Primitives and Applications</h2><p>With Zookeeper’s consistency model in mind, we can create powerful primitives based onZookeeper’s, for cluster key configuration management.</p><ul><li><strong>Configuration Management</strong>: Zookeeper’s A-Linearizibility consistency makes it idealfor managing consensus data across cluster. It also provides <code>watch</code> primitives for clientsto watch value changes.</li><li><strong>Rendezvous</strong>: Saves information when cluster is bootstrapping, and master of anotherapplication is undecided. Clients can read from a designated znode for cluster configuration.It works as a service discovery mechanism.</li><li><strong>Group Membership</strong>: Using ephemeral znodes, clients can save their liveness information,by keep sending heartbeats to the znodes. Once client disconnects/network partitions, znodegoes away. Can also use <code>SEQUENTIAL</code> flag to obtain unique name assignment.</li><li><strong>Locks</strong>: Client can create a ephemeral znode as a lock, all future clients will read iflock is in place befor modifying data. Lock is release when holder unlocks or dies/network partitions. Fancier locks are possible with some modifications.</li></ul><h2 id="implementation"><a class="markdownIt-Anchor" href="#implementation"></a> Implementation</h2><p><img src="zookeeper_components.png" alt="Zookeeper Components" /></p><h3 id="request-processor"><a class="markdownIt-Anchor" href="#request-processor"></a> Request Processor</h3><p>Request processor in Zookeeper is idempotent.</p><p>All write requests are processed as transactions, it either generates a new version number for datawhen request version number matched, or generates an error if failed.</p><h3 id="atomic-broadcast"><a class="markdownIt-Anchor" href="#atomic-broadcast"></a> Atomic Broadcast</h3><p>All servers process reads, and writes are forwarded to the leader. Zookeeper usesa protocol named <code>Zab</code> to keep consensus among the cluster. Like Paxos, it requiresa quorum to reach consensus.</p><h3 id="replicated-database"><a class="markdownIt-Anchor" href="#replicated-database"></a> Replicated Database</h3><p>Zookeeper replicates data in all followers’ database. It takes snapshots to compact data.</p><p>Zookeeper snapshots are called <code>fuzzy snapshot</code>, as it’s not necessarily a valid state of theZookeeper data tree. But during recovery data can be recovered with fuzzy snapshot andoperation logs.</p><h3 id="client-server-communication"><a class="markdownIt-Anchor" href="#client-server-communication"></a> Client-Server Communication</h3><p>Client reads from all servers for performance, and writes are transactions.To read the latest data, client <code>sync</code>s before read.</p><p>Followers process syncs by appending to previous write queues to leader.If there are no new writes before <code>sync</code>, it generates a dummy <code>sync</code> to guaranteethe leader is still leader.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paper: &lt;a href=&quot;https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf&quot;&gt;https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Presentation: &lt;a href=&quot;https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems&quot;&gt;https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Zookeeper" scheme="https://blog.kevinhu.me/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: What the Dormouse Said</title>
    <link href="https://blog.kevinhu.me/2019/11/03/03-Book-Summary-Dormouse/"/>
    <id>https://blog.kevinhu.me/2019/11/03/03-Book-Summary-Dormouse/</id>
    <published>2019-11-04T02:39:00.000Z</published>
    <updated>2020-11-08T07:28:42.872Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;id=cTyfxP-g2IIC">https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;id=cTyfxP-g2IIC</a></li><li><a href="https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769">https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769</a></li></ul><blockquote><p>When logic and proportion</p><p>Have fallen sloppy dead</p><p>And the White Knight is talking backwards</p><p>And the Red Queen’s off with her head</p><p>Remember what the dormouse said</p><p>Feed your head</p><p>Feed your head</p></blockquote><span id="more"></span><p>I recently came across this book on how the 1960’s counter-culture and anti-war movemententangled with the personal computer movement in California. Much have we known abouthow the pirates of the Silicon Valley: Bill Gates and Steve Jobs shaped built personalcomputing enterprises, but this book recorded some very fascinating details of the storiesbefore their age, and how they inspired the generation of Bill Gates and Steve Jobsby first putting forward this very extraordinary idea of personal computing.</p><p>Story dates back to 1945 when Doug Engelbart started his musing on a device that can extend human mind,with inspirations from “Memex”, a device conceived by Vannevar Bush. It’s a machine that could track andretrieve vast volumes of information.</p><p>After school, a year of teaching and several failed attempts to find a job that can pursue his digitalcomputer dream, he landed in Stanford Research Institute, where he began his research in digital computer system.</p><p>At the same time in California, Myron Stolaroff first came in touch with the power of LSD, and laterdevoted his entire life to researching and promoting the power of it. The LSD was popular among engineersdescribed in the book, many, including Engelbart himself, used it as a mind-expanding tool.</p><p>In 1959, a young man named Fred Moore came into the campus of Berkeley. As a young man with some radicallyprogressive ideas in mind, he quickly rose to fame in the anti-ROTC student protests, and became oneof the leaders of the student movement in the 1960s and 1970s.</p><p>Three major threads led to the birth of personal computing. Engelbart had this vision of creatingan augmenting device with the power of machines. Stolaroff was experimenting with this substancethat can expand on human creativity as well as human spirituality.And Fred Moore set out on a crusade to spread freedom and peace. All three contributed to the creation of personal computing.</p><p>With funding from military, Engelbart continued his endeavor to Intelligence Augmentation.</p><p>On Dec 9, 1968, Engelbart introduced his system that works on a terminal with remote connectionsthrough ARPANET in the annual Fall Joint Computer Conference. Dubbed “the mother of all demos”,Engelbart and his team first demonstrated to the world the power of computers in empowering humans,and inspired a generation of young engineers to join his team, or pursue smiliar goals.</p><p>Book also introduced many interesting and important figures that influenced that age, e.g.</p><ul><li><strong>John McCarthy</strong>: who was a legendary figure who led the development of Stanford AI Lab (SAIL),not too far from SRI, but with different goal in mind: AI should totally be overpower human mind.</li><li><strong>Alan Kay</strong>: later the Turing Award laureate, the father of SamllTalk and the concept of Dynabook.He pioneered the research in language design and human computer interactions in Stanford.</li><li><strong>Steward Brand</strong>: one of many influenced by Staroloff’s experiments on LSD. He later influenced thewhole generation with the lengendary Whole Earth Catalog.</li><li><strong>Jim Warren</strong>, a teacher in school at the time, he later was involved in the radical movementsof Midpeninsula Free U movement, and founded the most respected West Coast Computer Faire,an annual convention for minicomputers. He was also the founder of Dr. Dobb’s Journal.</li><li><strong>JCR Licklider</strong>, the head of DARPA and the early funder of Engelbart’s research.</li><li><strong>Bill English</strong>, one of the engineers on Engelbart’s team, who later worked at Xerox PARC.He and Engelbart both shared credit for creating the world’s first mouse.</li></ul><p>With visionary and persistent figures like Engelbart, to genius engineers like Bill English,and student movement activists like Fred Moore, 1960s-1970s America, especially California,saw the shift of engineers sterotypes from uptight traditional stereotypes they used to be, to the LSD-sippinghippies who valued freedom and liberal ideas most, and pursued personal empowerment and individualism.The engineers in this story had influences from the radical Californian shifts in ideologies and activism,as well as the MIT hacker spirits. These people were not just geniuses, butthe ones who pursued individualism, and believed personal computers were the key to it.And maybe that, in turn, pushed forward the developmentof the most personal empowering device that we saw in the last century - personal computer.</p><p>Though their efforts and visions were not immediately celebrated in their time, theirinfluenced from SRI, to Xerox PARC was felt throughout the world, when young Steven Jobs and Steven Wozniakstarted from the Home-brew Computer Lab, and brought research ideas like GUI, mouse and personalcomputing to the whole world.</p><p>In all it was a very interesting book that’s worth a read if you’re interested in computer developmentat the age, and the tremendous stories behind how personal computing came into being.</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;amp;id=cTyfxP-g2IIC&quot;&gt;https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;amp;id=cTyfxP-g2IIC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769&quot;&gt;https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When logic and proportion&lt;/p&gt;
&lt;p&gt;Have fallen sloppy dead&lt;/p&gt;
&lt;p&gt;And the White Knight is talking backwards&lt;/p&gt;
&lt;p&gt;And the Red Queen’s off with her head&lt;/p&gt;
&lt;p&gt;Remember what the dormouse said&lt;/p&gt;
&lt;p&gt;Feed your head&lt;/p&gt;
&lt;p&gt;Feed your head&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: Data and Goliath</title>
    <link href="https://blog.kevinhu.me/2019/09/16/16-Book-Summary-Data-Goliath/"/>
    <id>https://blog.kevinhu.me/2019/09/16/16-Book-Summary-Data-Goliath/</id>
    <published>2019-09-16T05:29:00.000Z</published>
    <updated>2020-11-08T07:28:29.436Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ">https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ</a><a href="https://www.amazon.com/dp/039335217X/">https://www.amazon.com/dp/039335217X/</a></p><p>“Data and Goliath” is an excellent book a friend recommended.It’s a summary of all the dangerous and negative ways data, and the “Big Data” technology canshape our societies. The author Bruce Schneier isa prominent expert in cryptography who published impactful works oncryptography and issues on privacy. He’s also on the board of directors of Electronic Frontier Foundation.</p><ul><li><a href="https://www.schneier.com/blog/about/">https://www.schneier.com/blog/about/</a></li><li><a href="https://en.m.wikipedia.org/wiki/Bruce_Schneier">https://en.m.wikipedia.org/wiki/Bruce_Schneier</a></li><li><a href="https://www.eff.org/press/releases/renowned-security-expert-bruce-schneier-joins-eff-board-directors">Renowned Security Expert Bruce Schneier Joins EFF Board of Directors</a></li></ul><h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <span id="more"></span></h2><p>The book provides abundant amount ofcases and examples related to big data misuse, as well as author’s carefuland in-depth analysis of different impacts data has on our societies,and pragmatic recommendations to different sides of the society on solvingthe “Big Data” problem.</p><p>The book mostly discusses how governments and corporates can abuseits use to profit, surveil or control citizens at the cost of our privacy, freedom, and even democracy. Without proper protection, regulationand activism, we are unknowingly giving up our rights to data.</p><p>Governments can abuse Big Data, and our political liberty and justice systemcan be corrupted, with mass surveillance on citizens, and surveillancedata can in turn be leveraged to accuse dissidents and silence politicalopponents. Government censorships can thwart free thinking and socialprogress, and make way for an oppressive regime.</p><p>The author provides an interesting thought experiment, originallyfrom English philosopher Jeremy Bentham: panopticon, meaning a prisonwhere all inmates can constantly be watched by the guard, even when guardis not actively watching them. In such a system, inmates are much moreconformant from the constant fear of criticism, judgements and punishments.A society becomes a panopticon with mass surveillance and censorship.</p><p>Some other examples include the political witch-hunting in 1950s led by senator Joseph McCarthy, and harassment Dr. Martin Luther King receivedfrom then then FBI directorJ. Edgar Hoover. The book described the chilling effect surveillance and abuseof power can have on political movements.</p><p>From a commercial perspective, misuse of “Big Data” can havedangerous effects on society as well. Surveillance-based discriminationbasically revive the “redlining” to the internet age, where discriminationcan be much more pervasive, intrusive and effective, and thus moredamaging. Large corporate collected data can be used for massive onlinemanipulation. A good example is how Facebook can nudge its users tovote with a rate of ~0.4%. Imagine if it discriminately displays thenudging information to vote.</p><p>(The book is finished around 2015, before the Cambridge Analytica incident,proving the author’s foresight.)</p><p>Finally the book stressed the importance of Software/Network security,privacy to our society, and analyzed why it doesn’t contradict thegovernments’ role of ensuring the security of the societies, corporates’role of leveraging data for profit. Finally it provides pragmatic recommendations on solving the “Big Data” mess,to governments, corporates, and the rest of us. In all it was a goodread.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ&quot;&gt;https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ&lt;/a&gt;
&lt;a href=&quot;https://www.amazon.com/dp/039335217X/&quot;&gt;https://www.amazon.com/dp/039335217X/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Data and Goliath” is an excellent book a friend recommended.
It’s a summary of all the dangerous and negative ways data, and the “Big Data” technology can
shape our societies. The author Bruce Schneier is
a prominent expert in cryptography who published impactful works on
cryptography and issues on privacy. He’s also on the board of directors of Electronic Frontier Foundation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.schneier.com/blog/about/&quot;&gt;https://www.schneier.com/blog/about/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Bruce_Schneier&quot;&gt;https://en.m.wikipedia.org/wiki/Bruce_Schneier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eff.org/press/releases/renowned-security-expert-bruce-schneier-joins-eff-board-directors&quot;&gt;Renowned Security Expert Bruce Schneier Joins EFF Board of Directors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-more-&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-more-&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2019-08</title>
    <link href="https://blog.kevinhu.me/2019/08/18/18-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2019/08/18/18-Reading-Summary/</id>
    <published>2019-08-19T03:15:57.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cassandra-time-series-bucketing"><a class="markdownIt-Anchor" href="#cassandra-time-series-bucketing"></a> <a href="http://msvaljek.blogspot.com/2015/11/cassandra-time-series-bucketing.html">Cassandra Time Series Bucketing</a></h2><p>How to model timeseries data with Cassandra.</p><h2 id="simple-gorpc"><a class="markdownIt-Anchor" href="#simple-gorpc"></a> <a href="https://github.com/ankur-anand/simple-go-rpc">Simple GoRPC</a></h2><p>The best way to understand something, is to build one yourself. This tutorial covers basic network programming in Go, struct design and the usage of <code>reflect</code> package.</p><h2 id="optimizing-m3-how-uber-halved-our-metrics-ingestion-latency-by-forking-the-go-compiler"><a class="markdownIt-Anchor" href="#optimizing-m3-how-uber-halved-our-metrics-ingestion-latency-by-forking-the-go-compiler"></a> <a href="https://eng.uber.com/optimizing-m3/">Optimizing M3: How Uber Halved Our Metrics Ingestion Latency by Forking the Go Compiler</a></h2><p>A great experience sharing blog on how to debug a performance issue in their services. And with profiling and analysis tools, the Uber team was able to pinpoint this issue in worker pool and goroutine stack allocation, and then they forked the Go compiler to prove it’s a regression in the Go compiler. A very nice read and analysis process.</p><h2 id="book-programming-models-for-distributed-computation"><a class="markdownIt-Anchor" href="#book-programming-models-for-distributed-computation"></a> <a href="https://github.com/heathermiller/dist-prog-book">Book: Programming Models for Distributed Computation</a></h2><p>A programming book on topics in distributed computation, from teaching experience in distributed system course, from Northeastern University.</p><h2 id="spotify-engineering-culture"><a class="markdownIt-Anchor" href="#spotify-engineering-culture"></a> <a href="https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/">Spotify Engineering Culture</a></h2><p>A very nice engineering blog from 2014. A excellent overview of Spotify culture, and an introduction on how to build the “agile” team.</p><h2 id="how-we-helped-our-reporters-learn-to-love-spreadsheets"><a class="markdownIt-Anchor" href="#how-we-helped-our-reporters-learn-to-love-spreadsheets"></a> <a href="https://open.nytimes.com/how-we-helped-our-reporters-learn-to-love-spreadsheets-adc43a93b919?gi=26f780cc274a">How We Helped Our Reporters Learn to Love Spreadsheets</a></h2><p>NYTimes has released its in-house course to teach journalists data science. Journalism can also benefit from a little coding/data analytics skills.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cassandra-time-series-bucketing&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cassandra-time-series-bucketing&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://msvaljek.
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
      <category term="Debug" scheme="https://blog.kevinhu.me/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2019-04</title>
    <link href="https://blog.kevinhu.me/2019/05/05/05-Reading-Summary-201905/"/>
    <id>https://blog.kevinhu.me/2019/05/05/05-Reading-Summary-201905/</id>
    <published>2019-05-06T03:40:34.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="an-overview-of-gos-tooling"><a class="markdownIt-Anchor" href="#an-overview-of-gos-tooling"></a> <a href="https://www.alexedwards.net/blog/an-overview-of-go-tooling#diagnosing-problems-and-making-optimizations">An Overview of Go’s Tooling</a></h2><p>If go is one of your favorite languages as well, this is a must read:it introduces all the basic tooling that comes with Go’s ecosystem, whichmight greatly save your time.</p><h2 id="hackernews-thread-on-tla"><a class="markdownIt-Anchor" href="#hackernews-thread-on-tla"></a> <a href="https://news.ycombinator.com/item?id=19634915">HackerNews thread on TLA+:</a></h2><p>A thread from HackerNews, discussing the importance of formal verificationfor distributed systems.</p><p>TLA+ and formal verification is notoriously known for its complexity and steeplearning curve. This might be one of my very future goals.</p><h2 id="are-you-a-software-architect"><a class="markdownIt-Anchor" href="#are-you-a-software-architect"></a> <a href="https://www.infoq.com/articles/brown-are-you-a-software-architect">Are You a Software Architect?</a></h2><p>What it takes to be a software architect, a great blog post from InfoQ.</p><h2 id="influxdata-is-building-a-fast-implementation-of-apache-arrow-in-go-using-c2goasm-and-simd"><a class="markdownIt-Anchor" href="#influxdata-is-building-a-fast-implementation-of-apache-arrow-in-go-using-c2goasm-and-simd"></a> <a href="https://www.influxdata.com/blog/influxdata-apache-arrow-go-implementation/">InfluxData is Building a Fast Implementation of Apache Arrow in Go Using c2goasm and SIMD</a></h2><p>TIL that it is possible to convert your C/C++ assembly into Go’s assembly, andcall from Go’s code. InfluxData leverages the tooling to embed AVX/SSE instructionsinto Golang’s assembly, thus boosts Go code’s performance, sometimes by ordersof magnitude.</p><p>More information on this tool, c2goasm, <a href="https://github.com/minio/c2goasm">work from Minio</a>.</p><h2 id="org-mode-is-one-of-the-most-reasonable-markup-languages-to-use-for-text"><a class="markdownIt-Anchor" href="#org-mode-is-one-of-the-most-reasonable-markup-languages-to-use-for-text"></a> <a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/">Org-Mode Is One of the Most Reasonable Markup Languages to Use for Text</a></h2><p>I think so, too. But it’ll require a community and proper tooling to see itreally prosper. Hope to see that some day.</p><h2 id="why-and-how-capitalism-needs-to-be-reformed"><a class="markdownIt-Anchor" href="#why-and-how-capitalism-needs-to-be-reformed"></a> <a href="https://www.economicprinciples.org/Why-and-How-Capitalism-Needs-To-Be-Reformed/">Why and How Capitalism Needs to Be Reformed</a></h2><p>A great piece from <a href="https://en.wikipedia.org/wiki/Ray_Dalio">Ray Dalio</a>, thefounder of investment firm Bridgewaters, a seasoned investor, discusses in hisrecent long post why American capitalism is sick in distributing resources,especially educational resources, and needs to be reformed to stay healthy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;an-overview-of-gos-tooling&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#an-overview-of-gos-tooling&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.alexedwards.ne
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Blog Reading: The log - What every software engineer should know about real-time data&#39;s unifying abstraction
</title>
    <link href="https://blog.kevinhu.me/2019/04/01/31-Blog-Reading-Kafka/"/>
    <id>https://blog.kevinhu.me/2019/04/01/31-Blog-Reading-Kafka/</id>
    <published>2019-04-02T04:39:10.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying">https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying</a></p><p>Kafka is a message queue, a pub-sub system, an event sourcing tool,and a stream processing infrastructure, is a key part of many streaming distributedsystems that requires streaming data. Its underlying idea, is to aggregate datafrom a distributed sources, to a unifying linear log structure.</p><p>The blog is from Kafka’s creator Jay Kreps when he was at LinkedIn,contemplating the log abstraction as a key part of any distributed systems. Thisis not Kafka’s design paper, implementation or a tutorial, but rather the process of brewingthe idea that led to its birth, and I found it equally interesting. The following aremy notes.</p><p>The link to Kafka paper: <a href="https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a">https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a</a></p><span id="more"></span><h2 id="what-is-a-log"><a class="markdownIt-Anchor" href="#what-is-a-log"></a> What Is a Log?</h2><p>Log is a simplest storage abstraction, similar to what we see in application logs,records are appended to the end of a log data structure, and reads proceeds left-to-right.This simple abstraction is powerful, in that:</p><ul><li>It keeps the records, and the ordering of records, by when it’s appended to the data structure.</li><li>In a deterministic system, you can reconstruct the state of the systems at any time, byreplaying the input in order for every single step of the input.</li></ul><p>The log centric approach arises from a simple observation that the author named“State Machine Replication Principle”:</p><blockquote><p>If two identical, deterministic processes begin in the same state and getthe same inputs in the same order, they will produce the same output and endin the same state.</p></blockquote><p>And there are two major different ways of leveraging logs in distributed processingand replication:</p><ul><li>A “Primary Backup” Model, AKA “active-passive” model, where one node is elected asmaster, and writes its states to log. Upon master failure, a replica is elected andtake over.</li><li>The “State Machine Model”, AKA “active-active” model, where changes/operationsare written to the log, and each replica picks up the log.</li></ul><p><img src="2019-03-31-Blog-Reading-Kafka-active_and_passive_arch.png" alt="Replication Architecture with Log" /></p><h2 id="what-can-log-be-used-for"><a class="markdownIt-Anchor" href="#what-can-log-be-used-for"></a> What can log be used for</h2><h3 id="data-integration"><a class="markdownIt-Anchor" href="#data-integration"></a> Data Integration</h3><p>Make all of an organization’s data easily available in all its storage and processingsystems.</p><p>An organization may have multiple data inputs, that gathers events and data frommany places, and different consumers to digest that data. A log structure can serveas a buffer as well as a central pipeline for all the different producers and consumers.In this way, the log serves as an asynchronous messaging system.All producers and consumers can read buffered data from the log, with different pace.e.g. a real-time system may need to read instantly, while an analytic platform mayread it only hourly or even daily.</p><p>Also, in a system where there are M inputs and N output, you’ll need M * N pipelines tomake sure each consumer can read from all data producers. But with a single unified data pipeline,every producer and consumer can all write and read from one single log. And that’s theidea behind Kafka.</p><p>Also, Kafka’s log structure also enables high-performance optimizations, e.g.:</p><ul><li>Enables partitioning.</li><li>Optimize high throughput by batching small reads and writes.</li><li>Avoids needless data copies, as it can keep same binary data structure in memory,on disk and in network transfers.</li></ul><h3 id="real-time-data-processing"><a class="markdownIt-Anchor" href="#real-time-data-processing"></a> Real-time Data Processing</h3><p>Computing derived data streams.</p><p>Log also makes real-time stream processing easier. Logs enables real-time data collectionfrom events or different data input, at different speed, that the consumers canread from at scale.</p><p>Log also enables more complicated data flow, e.g. when output of a log in the streamprocessing systems becomes the input of another. It can construct complicated data flowgraphs. And log has benefits:</p><ul><li>It makes each dataset multi-subscriber and ordered, and the order is permanent.</li><li>The log provides buffering to the processes, so that the system can work inasynchronous fashion.</li></ul><h3 id="distributed-system-desgin"><a class="markdownIt-Anchor" href="#distributed-system-desgin"></a> Distributed System Desgin</h3><p>Practical systems can be simplified with a log-centric design.</p><p>Log enables high-performance and easy integration of data producers and consumers,distributed systems are more likely to move away from monolithic relational databases,and toward more diverse data sources and consumers. Building distributed systemswould more feel like lego games with open-source data components.</p><p>And a log system can work as the following role in system architecture.</p><ul><li>Handle data consistency by sequencing concurrent updates to nodes.</li><li>Provide data replication between nodes.</li><li>Provide “commit” semantics to the writer (respond only when your write is guaranteednot to be lost).</li><li>Provide external data subscription feed from the system.</li><li>Provide the capability to restore failed replicas.</li><li>Handling data rebalancing of data between nodes.</li></ul><hr /><p>The author built the powerful ideas of a log into Kafka, one of the most influentialdata streaming platform. This long blog might bring some insights to incorporateKafka into a distributed system, as well as provide inside in building new systeminfrastructures.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kafka is a message queue, a pub-sub system, an event sourcing tool,
and a stream processing infrastructure, is a key part of many streaming distributed
systems that requires streaming data. Its underlying idea, is to aggregate data
from a distributed sources, to a unifying linear log structure.&lt;/p&gt;
&lt;p&gt;The blog is from Kafka’s creator Jay Kreps when he was at LinkedIn,
contemplating the log abstraction as a key part of any distributed systems. This
is not Kafka’s design paper, implementation or a tutorial, but rather the process of brewing
the idea that led to its birth, and I found it equally interesting. The following are
my notes.&lt;/p&gt;
&lt;p&gt;The link to Kafka paper: &lt;a href=&quot;https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a&quot;&gt;https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="Kafka" scheme="https://blog.kevinhu.me/tags/Kafka/"/>
    
      <category term="Log" scheme="https://blog.kevinhu.me/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2019-03</title>
    <link href="https://blog.kevinhu.me/2019/03/17/17-Reading-Summary-201903/"/>
    <id>https://blog.kevinhu.me/2019/03/17/17-Reading-Summary-201903/</id>
    <published>2019-03-18T04:39:10.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="10-breakthrough-technologies-in-2019-by-bill-gates"><a class="markdownIt-Anchor" href="#10-breakthrough-technologies-in-2019-by-bill-gates"></a> <a href="https://www.technologyreview.com/lists/technologies/2019/">10 Breakthrough Technologies in 2019, by Bill Gates</a></h2><p>Take a look at what Mr. Gates thinks are the greatest technologybreakthroughs right now. The list might surprise you.</p><h2 id="what-happens-when-you-click-play-button-on-netflix"><a class="markdownIt-Anchor" href="#what-happens-when-you-click-play-button-on-netflix"></a> <a href="http://highscalability.com/blog/2017/12/11/netflix-what-happens-when-you-press-play.html">What happens when you click Play button on Netflix</a></h2><p>How Netflix leverages AWS technologies to build world-scale, highly-availbile,fault-tolerant distributed video streaming system.​</p><h2 id="lyft-case-study-amazon-web-services"><a class="markdownIt-Anchor" href="#lyft-case-study-amazon-web-services"></a> <a href="https://aws.amazon.com/solutions/case-studies/lyft/">Lyft Case Study - Amazon Web Services</a></h2><p>Lyft architecture evolution on AWS.​</p><h2 id="compounding-knowledge"><a class="markdownIt-Anchor" href="#compounding-knowledge"></a> <a href="https://fs.blog/2019/02/compounding-knowledge/">Compounding Knowledge</a></h2><p>From Farnam Street – an interesting blog site I found recently.</p><p>Also on Farnam Street and its “mental models”: <a href="https://commoncog.com/blog/the-mental-model-fallacy/">The Mental Model Fallacy</a>.TL;DR: The so-called “mental models” from Farnam Street is not of much valuewhen it’s from non-practitioners. And to learn businees, like basketball, swimming,etc., you’ll need to actually practice to learn the intricate knowledge that arenot easily translated into writings.</p><h2 id="parsing-gigabytes-of-json-per-second"><a class="markdownIt-Anchor" href="#parsing-gigabytes-of-json-per-second"></a> <a href="https://arxiv.org/abs/1902.08318v1">Parsing Gigabytes of JSON per Second</a></h2><p>Unfortunately I didn’t have time to finish reading this paper. But it’s goodto learn the concept of branchless algorithms to fill the CPU pipeline andachieve amazing performance.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;10-breakthrough-technologies-in-2019-by-bill-gates&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#10-breakthrough-technologies-in-2019-by-bill
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Linux" scheme="https://blog.kevinhu.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center</title>
    <link href="https://blog.kevinhu.me/2019/03/10/Paper-Reading-Mesos/"/>
    <id>https://blog.kevinhu.me/2019/03/10/Paper-Reading-Mesos/</id>
    <published>2019-03-10T18:14:56.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link to paper: <a href="https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf">https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf</a></p><p>Presentation: <a href="https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center">https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center</a></p><p>Mesos is a cluster resource management software from UC Berkeley. Unlike many otherframeworks already existed, Mesos is designed to support heterogeneous frameworks (Hadoop,MPI, etc) in the same cluster and share resources between them, by providing a thin layerthat making resource offers to the framework schedulers, and delegate the schedulingdecision to the frameworks themselves.</p><p>With this design, Mesos can achieve pretty good elasticity between frameworks, andletting frameworks choose their own resources results in better data locality.</p><span id="more"></span><h2 id="design-choices"><a class="markdownIt-Anchor" href="#design-choices"></a> Design Choices</h2><ul><li>Mesos supports different frameworks, making them share cluster resources, toaccommodate differnt computation needs.</li><li>Find-grained sharing: Instead of allocating static amount of cluster to multipleframeworks, Mesos provides fine grained resources to all frameworks elastically.</li><li>Resource offers: Instead of making all decisions for everyone, supporting all frameworks outthere, Mesos implements “a scheduler of schedulers”, by providing <em>resources offers</em>to each framework and let it make scheduling and execution decisions, makingMesos itself thin, highly extensible, and scalable.</li><li>Frameworks are provided <em>resource offers</em>, and can make decisions on whether toaccept them based on their own requirements. For faster response time, each frameworkcan keep a white-list and/or black-list of all resource offers.</li></ul><h2 id="architecture"><a class="markdownIt-Anchor" href="#architecture"></a> Architecture</h2><p><img src="2019-03-Paper-Reading-Mesos-architecture3.jpg" alt="Mesos architecture diagram, showing two running frameworks (Hadoop and MPI)." /></p><ul><li>Mesos consists of master and agent (used to be slave) nodes, and resource offersare resources on each agent node.</li><li>Each framework provides two parts: <em>scheduler</em>, and <em>executor</em>. Scheduler registerswith Mesos and makes scheduling decisions based on the resource offered, and executorruns on each client node, to run actual commands on each agent node.</li><li>Mesos uses pluggable resource allocation modules for resource allocation decisions.</li><li>Mesos uses pluggable resource isolation modules for resource isolation between differenttasks (e.g. containers).</li><li>Mesos provides APIs for resource offers and resource offer responses. Frameworks thatworks with Mesos need to implement the APIs.</li><li>Mesos work with Zookeeper to keep a quorum of masters to provide fail-recovery.Its master keeps a soft state, that can be reconstructed from agent information, for resilience.</li></ul><p>A full cycle of resource offer works as follows:</p><p><img src="2019-03-Paper-Reading-Mesos-architecture-example.jpg" alt="Resource offer example" /></p><ul><li>Agent reports to Mesos master what resource it has.</li><li>Mesos master provides resource offers to a framework scheduler, based on organizationpolicies.</li><li>Scheduler decides on the offers, and returns decisions, and tasks to run on theoffers.</li><li>Master sends execution commands to corresponding agents to execute on the executors.</li><li>Repeat leftover offers to next framework.</li></ul><h2 id="performance-and-scalability"><a class="markdownIt-Anchor" href="#performance-and-scalability"></a> Performance and Scalability</h2><p>Mesos core is designed to be small, and from the paper it could scale to 50,000nodes with emulated load.</p><ul><li>Delay scheduling: The team built a new MapReduce framework on Mesos named “Spark”, to handle iterativeMapReduce workloads. Since Mesos allows framework scheduler to choose resources, it can chooseresources so that data is retained on the executor. This avoids reloading data from diskeach iteration, and allows Spark to achieve ~10x performance over traditional MapReduceframework on iterative tasks.</li><li>Fine-grained sharing: different framework can expand and shrink based on its ownworkload, as the following chart shows. By pooling resources, Mesos lets each workloadscale up to fill gaps in the demand of others. In addition, fine-grained sharingallows resources to be reallocated in tens of seconds.</li></ul><p><img src="2019-03-Paper-Reading-Mesos-Resource-Pooling.png" alt="Fine grained sharing among frameworks" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link to paper: &lt;a href=&quot;https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf&quot;&gt;https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Presentation: &lt;a href=&quot;https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center&quot;&gt;https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mesos is a cluster resource management software from UC Berkeley. Unlike many other
frameworks already existed, Mesos is designed to support heterogeneous frameworks (Hadoop,
MPI, etc) in the same cluster and share resources between them, by providing a thin layer
that making resource offers to the framework schedulers, and delegate the scheduling
decision to the frameworks themselves.&lt;/p&gt;
&lt;p&gt;With this design, Mesos can achieve pretty good elasticity between frameworks, and
letting frameworks choose their own resources results in better data locality.&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
      <category term="Mesos" scheme="https://blog.kevinhu.me/tags/Mesos/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Understanding Real-World Concurrency Bugs in Go
</title>
    <link href="https://blog.kevinhu.me/2019/03/04/Paper-Reading-Go-Concurrency-Bugs/"/>
    <id>https://blog.kevinhu.me/2019/03/04/Paper-Reading-Go-Concurrency-Bugs/</id>
    <published>2019-03-04T06:46:03.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://golangweekly.com/link/59972/b208593eda">https://golangweekly.com/link/59972/b208593eda</a></p><p>A team from Penn State University and Purdue published their latest study on concurrency bugs found in Golang projects, namely large projects from Github: Docker and Kubernetes, two datacenter container systems, etcd, a distributedkey-value store system, gRPC, an RPC library, and CockroachDB and BoltDB. The authors searched commit histories of each repository to understand concurrency bug fixes for categorization and study.</p><p><strong>TL;DR</strong>:</p><ul><li>Go’s message-passing concurrency mechanism, something Go is proud of, isn’t as easy to use as it’s generally perceived. It creates just as many bugs, if not more, than shared-memory concurrency model.</li><li>Shared memory synchronization is still used more in Go projects.</li><li>Go’s built-in race and deadlock bug detection library still cannot catch all the bugs. There’s room for more improvements.</li></ul><span id="more"></span><p>Abstract: The author of this paper analyzed 171 bugs in 6 aforementioned open-source Go projects for a systematic study of Go concurrency bugs, providing better understanding for go bugs and concurrency bug detection tools.</p><h2 id="type-of-bugs"><a class="markdownIt-Anchor" href="#type-of-bugs"></a> Type of Bugs</h2><p>The author categorized the bugs into <strong>blocking</strong> and <strong>non-blocking</strong> bugs. <strong>Blocking</strong> bugs are misuse of synchronization primitives that causes the program, or a subset of goroutines to hang. <strong>Non-Blocking</strong> bugs happen when shared memory is unprotected, causing data races, or errorneous message passing, e.g.: when goroutines don’t quit properly, causing resource leaks.</p><h3 id="blocking-bugs"><a class="markdownIt-Anchor" href="#blocking-bugs"></a> Blocking bugs</h3><p>The paper further divided blocking bugs into traditional shared memory bugs, and bugs caused by misuse of message passing, or libraries related to messaging.</p><p>This led to an interesting observation from this paper: contrary to common belief, message passing are potentially more likely to cause blocking bugs than shared memory.</p><p>An example of blocking bugs related to message passing, with its fix. similar to the one I had before:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// goroutine 1</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">goroutine1</span><span class="params">()</span></span> &#123;</span><br><span class="line">      m.Lock()</span><br><span class="line">-     ch &lt;- request <span class="comment">// blocks</span></span><br><span class="line">+     <span class="keyword">select</span> &#123;</span><br><span class="line">+         <span class="keyword">case</span> ch &lt;- request</span><br><span class="line">+         <span class="keyword">default</span>:</span><br><span class="line">+     &#125;</span><br><span class="line">      m.Unlock()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goroutine 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutine2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        m.Lock()   <span class="comment">// blocks</span></span><br><span class="line">        m.Unlock()</span><br><span class="line">        request &lt;- ch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An example for blocking bug related to messaging library from the paper is <code>Pipe</code> library.</p><p>The paper also noticed that for blocking bugs, there’s a high correlation between blocking bugs (shared memory as well as message passing) to their fixes, indicating there’s high potential in developing automated tools to help fix such bugs.</p><h3 id="non-blocking-bugs"><a class="markdownIt-Anchor" href="#non-blocking-bugs"></a> Non-Blocking bugs</h3><p>For non-blocking bugs, the paper also divided them into traditional bugs, (e.g. unprotected shared memory causing data races), misuse of channels, or shared data in special libraries.</p><p>An interesting example related to non-blocking bug caused by message passing, mentioned in the paper:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when multiple goroutines execute the following code, default</span></span><br><span class="line"><span class="comment">// can execute multiple times, closing the channel more than once,</span></span><br><span class="line"><span class="comment">// which leads to panic in Go runtime</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">select</span> &#123;</span><br><span class="line">-     <span class="keyword">case</span> &lt;- c.closed:</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">-     <span class="keyword">default</span>:</span><br><span class="line">+         Once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">              <span class="built_in">close</span>(c.closed)</span><br><span class="line">+         &#125;)</span><br><span class="line">- &#125;</span><br></pre></td></tr></table></figure><p>Example regarding non-blocking bug related to library, the paper mentioned the <code>context</code> library, where <code>context</code> object type is designed to be accessed by mulitple goroutines. And accessing string type in the <code>context</code> library could potentially lead to data races.</p><p>The paper observes some traditional data race detector cannot detect all types, calling for future researches on this topic.</p><h2 id="more-discussions"><a class="markdownIt-Anchor" href="#more-discussions"></a> More Discussions</h2><p>More discussions from HackerNews: <a href="https://news.ycombinator.com/item?id=19280927">https://news.ycombinator.com/item?id=19280927</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://golangweekly.com/link/59972/b208593eda&quot;&gt;https://golangweekly.com/link/59972/b208593eda&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A team from Penn State University and Purdue published their latest study on concurrency bugs found in Golang projects, namely large projects from Github: Docker and Kubernetes, two datacenter container systems, etcd, a distributedkey-value store system, gRPC, an RPC library, and CockroachDB and BoltDB. The authors searched commit histories of each repository to understand concurrency bug fixes for categorization and study.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go’s message-passing concurrency mechanism, something Go is proud of, isn’t as easy to use as it’s generally perceived. It creates just as many bugs, if not more, than shared-memory concurrency model.&lt;/li&gt;
&lt;li&gt;Shared memory synchronization is still used more in Go projects.&lt;/li&gt;
&lt;li&gt;Go’s built-in race and deadlock bug detection library still cannot catch all the bugs. There’s room for more improvements.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Golang" scheme="https://blog.kevinhu.me/tags/Golang/"/>
    
      <category term="Concurrency" scheme="https://blog.kevinhu.me/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Large-scale cluster management at Google with Borg
</title>
    <link href="https://blog.kevinhu.me/2019/02/27/24-Paper-Reading-Borg/"/>
    <id>https://blog.kevinhu.me/2019/02/27/24-Paper-Reading-Borg/</id>
    <published>2019-02-27T17:05:34.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://ai.google/research/pubs/pub43438">https://ai.google/research/pubs/pub43438</a></p><p>About: Borg is Google’s large cluster workload scheduling and management system, which handles Google’s most service and batch job workloads on a cluster on scale of thousands of machines. It hides users from burdens of management of cluster, and provides high-availability features that handles failures.</p><p>The now very famous and popular open-source docker orchestration tool Kubernetes, is an open source successor to Borg, and keeps borrowing ideas from Borg (see <a href="https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/">kubernetes</a>).</p><span id="more"></span><h2 id="concepts"><a class="markdownIt-Anchor" href="#concepts"></a> Concepts</h2><h3 id="workloads"><a class="markdownIt-Anchor" href="#workloads"></a> Workloads</h3><p>There are heterogeneous workloads on the cluster, that could mainly be categorized as</p><ul><li>long-running services: that responds to user requests.</li><li>batch jobs: computation work that might take long time to finish.</li></ul><h3 id="cluster-and-cells"><a class="markdownIt-Anchor" href="#cluster-and-cells"></a> Cluster and cells</h3><p>A cell is a collection of machines in a datacenter. A cluster hosts one large cell or several smaller cells for testing.</p><h3 id="jobs-and-tasks"><a class="markdownIt-Anchor" href="#jobs-and-tasks"></a> Jobs and tasks</h3><p>A job is made of one of multiple tasks. Tasks can:</p><ul><li>have constraints on what OS, what IP, processor it requires,</li><li>run inside a container with resources (CPU, memory, disk) limits with command-line flags.</li></ul><p>Users can operate by jobs with RPCs to Borg.</p><h3 id="allocs"><a class="markdownIt-Anchor" href="#allocs"></a> Allocs</h3><ul><li>Alloc: is a reserved set of resources on a machine for one or more tasks to be run.</li><li>Alloc Set: a set of Allocs on multiple machines. Once an Alloc Set is created, a job can be scheduled to run on it.</li></ul><h3 id="priority-quota-and-admission-control"><a class="markdownIt-Anchor" href="#priority-quota-and-admission-control"></a> Priority, Quota and Admission Control</h3><p>Every job has a priority, and the scheduler schedule them ranking by the priority.</p><p>Quota is assigned to/purchased by the user. It’s defined by resources at a certain priority. Quota is managed by admission control, and a job/user is over quota, the job is immediately rejected.</p><h3 id="naming-and-monitoring"><a class="markdownIt-Anchor" href="#naming-and-monitoring"></a> Naming and monitoring</h3><p>Borg names and monitors tasks with:</p><ul><li>“Borg name service”, that assigns each task a name and a DNS name, so that a task can be reachable at a certain DNS address.</li><li>Chubby consistency service: a task writes its info to Chubby upon creation, and updates when there’s a change in health.</li><li>Almost every task has an HTTP endpoint that exposes health metrics that can be queried by Borg health monitoring service.</li><li>Records all job submission and task events, resource usage metrics in a database for future query.</li></ul><h2 id="architecture"><a class="markdownIt-Anchor" href="#architecture"></a> Architecture</h2><h3 id="borgmaster-and-borglet"><a class="markdownIt-Anchor" href="#borgmaster-and-borglet"></a> Borgmaster and Borglet</h3><p>Borg master records all the job status and manages state machines to all the objects in the system (machines, tasks, allocs, etc). And the data is saved in a Paxos-enabled Chubby store.</p><p>Borglet is a local Borg agent that resides on every machine in a cell, which manages tasks on a single machine, and sends heartbeats to the master.</p><h3 id="scheduler"><a class="markdownIt-Anchor" href="#scheduler"></a> Scheduler</h3><p>Borgmaster records jobs to Paxos store and pending queue, which is picked up by the scheduler, and gets scheduled. The scheduler uses an algorithm “E-PVM” for scoring, (sometimes called “worst fit”), or an algorithm that packs the tasks to minimal number of machines (sometimes called “best fit”).</p><h3 id="scalability"><a class="markdownIt-Anchor" href="#scalability"></a> Scalability</h3><p>Borg uses the following techniques for scalability:</p><ul><li>Scheduler uses a separate process, to operate in parallel with the other Borgmaster.</li><li>A scheduler operates on a cached copy of the cell state.</li><li>Uses separate threads to talk to Borglets and respond to read-only RPCs.</li><li>Shards (partitioned) functions across five Borgmaster replicas.</li></ul><h2 id="availability"><a class="markdownIt-Anchor" href="#availability"></a> Availability</h2><p>Failures are normal and applications run on Borg on expected to handle failures, and automatically rescheduled when evicted due to failure, eviction, preemption, and etc.</p><h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h2><p>Borg serves as an important example for the design of all other large-scale distributed scheduling systems, which performs in the challenges of functionality, scalability and availability, and high utilization of the cluster resources.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://ai.google/research/pubs/pub43438&quot;&gt;https://ai.google/research/pubs/pub43438&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About: Borg is Google’s large cluster workload scheduling and management system, which handles Google’s most service and batch job workloads on a cluster on scale of thousands of machines. It hides users from burdens of management of cluster, and provides high-availability features that handles failures.&lt;/p&gt;
&lt;p&gt;The now very famous and popular open-source docker orchestration tool Kubernetes, is an open source successor to Borg, and keeps borrowing ideas from Borg (see &lt;a href=&quot;https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/&quot;&gt;kubernetes&lt;/a&gt;).&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Borg" scheme="https://blog.kevinhu.me/tags/Borg/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
  </entry>
  
  <entry>
    <title>Debugging An Interesting Deadlock in Golang</title>
    <link href="https://blog.kevinhu.me/2019/02/09/Debugging-An-Interesting-Deadlock-In-Go/"/>
    <id>https://blog.kevinhu.me/2019/02/09/Debugging-An-Interesting-Deadlock-In-Go/</id>
    <published>2019-02-09T20:05:32.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>This week I’ve been chasing a deadlock issue in a Golang server application, which will essentially render the server unresponsive to client requests indefinitely and cannot recover in anyway without restarting. I’ve trying all ways days and nights, even ended up re-writing a small portion of the application to clean up all the locks - no luck.</p><span id="more"></span><h2 id="root-cause"><a class="markdownIt-Anchor" href="#root-cause"></a> Root Cause</h2><p>The root cause of this vexing issue is the combination use of mutex locks and blocking channels. In Golang, channels are also used often as a powerful way for sychronization. They’re often used to protect inner states of a structure, or to distribute workloads, to make sure different actions are not taken at the same time.</p><p>See here: <a href="https://medium.com/stupid-gopher-tricks/more-powerful-synchronization-in-go-using-channels-f4a1c3242ed0">https://medium.com/stupid-gopher-tricks/more-powerful-synchronization-in-go-using-channels-f4a1c3242ed0</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> value = &lt;-h.setValCh: <span class="comment">// set the current value.</span></span><br><span class="line">    <span class="keyword">case</span> h.getValCh &lt;- value: <span class="comment">// send the current value.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>By using a big select statement as a mux for all coming read and write requests, channels protect shared states, just like mutexes, and sometimes with more flexibility (e.g. when you include timer or ticker in the code). However it could be dangerous when people don’t realize, as a way of synchronization, channels are as well as prone to misuse, especially when mixed with mutexes.</p><p>Here’s an example of misusing channels to cause an deadlock. See if you can spot it:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-a:</span><br><span class="line">fmt.Println(<span class="string">&quot;case A&quot;</span>)</span><br><span class="line">&lt;-b</span><br><span class="line"><span class="keyword">case</span> &lt;-b:</span><br><span class="line">fmt.Println(<span class="string">&quot;case B&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">fmt.Println(<span class="string">&quot;case done&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It could be easy to reason about deadlocks when you’re using mutexes only, or when you’re using channels only, but perhaps not so easy when you’re mixing both.</p><p>Below is the simplified version of the deadlock bug, demonstrating how mutexes and channels used together can cause interesting issues. Without reading further can you spot the issue?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    mtx *sync.Mutex</span><br><span class="line">    <span class="comment">// other data structures</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    action <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">    clear  <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">    <span class="comment">// other channels and data structures</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := NewA()</span><br><span class="line">b := NewB()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewB</span><span class="params">()</span> *<span class="title">B</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;- clear:</span><br><span class="line">                <span class="comment">// clear records</span></span><br><span class="line">            <span class="keyword">case</span> &lt;- action:</span><br><span class="line">                a.Action()</span><br><span class="line">                <span class="comment">// ... other cases</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// other initializations</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Action</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a.Mtx.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.Mtx.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do action</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a.Mtx.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.Mtx.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do some other actions</span></span><br><span class="line">    b.clear &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The issue lies where <code>Action()</code>, and <code>Foo()</code> can be called simultaenously or in very close time, and they both enter the critical section of <code>A</code>'s mutex locks. And <code>B</code>'s mux uses blocking channels to coordinate different actions, the <code>b.clear &lt;- true</code> statement will block if code in previous case has not been completed.</p><p>Therefore, <code>a.Action()</code> and <code>a.Foo()</code> can both be locked, and <code>b.clear</code> is blocked as it’s waiting for <code>a.Action()</code> to finish, which is not going to happen when <code>a.Action()</code> is waiting for <code>a.Foo()</code> to unlock!</p><h2 id="useful-debugging-tools"><a class="markdownIt-Anchor" href="#useful-debugging-tools"></a> Useful Debugging Tools</h2><p>In debugging experience I haven’t run into a very good tool that’ll analyze this type of deadlock. There are several tools that deals with mutex locks only. There’s one even built inside Golang’s runtime, but that’s not enough, as it only detects if all the goroutine are locked.</p><p>I’ve used <code>gdb</code> and Golang’s <code>pporf</code> library. The convenience of <code>pprof</code> library is that, if you’re writing a server application, you can directly register an HTTP endpoint with all useful debug output on <code>/debug/pprof</code>. The one I used dumped all the running goroutines in the application:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:10000/debug/pprof/goroutines?debug=1</span><br></pre></td></tr></table></figure><p>And when examining all the outputs when a deadlock happens, you need to pay attention to the following details:</p><ul><li>What mutex lock are still pending. As they’re competing with the locks, and can potentially be the culprit that contributed to the deadlock.</li><li>What channels are pending. This could be hard and easy to omit, as there can be a lot of channels that are pending by design: they are waiting for signals for certain actions, not necessarily out of a deadlock. So, it might be faster to start examining channels used in the sychronizing channels pattern mentioned above.</li></ul><p>On a side note, the <code>pprof</code> can be really useful if you’re trying to understand how the program is behaving. I even identified a resource leak in the code using <code>pprof</code> (maybe I’ll write another blog to discuss it). See more at:</p><ul><li><a href="https://golang.org/pkg/net/http/pprof/">https://golang.org/pkg/net/http/pprof/</a></li><li><a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/">https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/</a></li><li><a href="https://blog.minio.io/debugging-go-routine-leaks-a1220142d32c">https://blog.minio.io/debugging-go-routine-leaks-a1220142d32c</a></li></ul><p>Example goroutine output from <code>pprof</code>, from <a href="https://blog.minio.io/debugging-go-routine-leaks-a1220142d32c">blog</a> mentioned above:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">goroutine 149 [chan send]:</span><br><span class="line">main.sum(0xc420122e58, 0x3, 0x3, 0xc420112240)</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:39 +0x6c</span><br><span class="line">created by main.sumConcurrent</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:51 +0x12b</span><br><span class="line"></span><br><span class="line">goroutine 243 [chan send]:</span><br><span class="line">main.sum(0xc42021a0d8, 0x3, 0x3, 0xc4202760c0)</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:39 +0x6c</span><br><span class="line">created by main.sumConcurrent</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:51 +0x12b</span><br><span class="line"></span><br><span class="line">goroutine 259 [chan send]:</span><br><span class="line">main.sum(0xc4202700d8, 0x3, 0x3, 0xc42029c0c0)</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:39 +0x6c</span><br><span class="line">created by main.sumConcurrent</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:51 +0x12b</span><br></pre></td></tr></table></figure><h2 id="lesson-learned"><a class="markdownIt-Anchor" href="#lesson-learned"></a> Lesson Learned</h2><p>It’s easy to overlook channels as a powerful synchronization tool in Golang, and bad consequences may happen. Instead of expecting deadlock tools to come and save the day, it might be more efficient to reason about the code more prudently, with the following lessons in mind:</p><ul><li>Channels can be used for synchronizations as well.</li><li>Beware when you’re using channels and mutexes at the same time. Reason it well! The key is not to put the blocking channel send/receive inside a critical section.</li><li>Keep mutex protected sections as small as possible, right around the values you’re trying to protect if possible. You can even consider using getter/setter for structs with protected fields, and not expose mutexes as public. This will give you much better time when you’re reasoning with the code.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This week I’ve been chasing a deadlock issue in a Golang server application, which will essentially render the server unresponsive to client requests indefinitely and cannot recover in anyway without restarting. I’ve trying all ways days and nights, even ended up re-writing a small portion of the application to clean up all the locks - no luck.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.kevinhu.me/tags/Golang/"/>
    
      <category term="Mutex" scheme="https://blog.kevinhu.me/tags/Mutex/"/>
    
      <category term="Channel" scheme="https://blog.kevinhu.me/tags/Channel/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2019-01</title>
    <link href="https://blog.kevinhu.me/2019/01/22/2019-01-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2019/01/22/2019-01-Reading-Summary/</id>
    <published>2019-01-23T04:21:34.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="becoming-a-magician"><a class="markdownIt-Anchor" href="#becoming-a-magician"></a> <a href="https://autotranslucence.wordpress.com/2018/03/30/becoming-a-magician/">Becoming a magician</a></h3><p>If you want to become a ‘magician’, the ones that with intricate moves and skills to amaze the audience, you’ll need to adopt a growing mindset:</p><p>you cannot become a ‘magician’ with the same progress rate, or by simply imagining a better self: sometimes the way to changes involves a fundamental shift in how you see the world. And to achieve that you’ll need to observe fellow ‘magicians’, learn the difference, and make non-linear progresses.</p><span id="more"></span><h3 id="how-to-get-rich-without-getting-lucky"><a class="markdownIt-Anchor" href="#how-to-get-rich-without-getting-lucky"></a> <a href="https://theescapeartist.me/2018/12/04/how-to-get-rich-without-getting-lucky/">How to Get Rich (Without getting lucky)</a></h3><p>Some interesting takeaways:</p><ul><li>You will get rich by giving society what it wants but does not yet know how to get. At scale.</li><li>Arm yourself with specific knowledge, accountability, and leverage.</li><li>Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now.</li><li>Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.</li></ul><p>I don’t usually like the “success stories” or “how to become rich” genre of books/blogs/articles, and I keep my suspicions with this one, too. Nevertheless I find most of the principles described in this blog reasonable, and the author sounded sincere: build skills, build trust, build networks, build leverages, and finally, build your own brand.</p><p>There are quite a few books out there how to teach you to be “successful”, and some time I’d like to do some research on those, with more caution than I approach other books.</p><h3 id="are-we-living-in-the-gilded-age-20"><a class="markdownIt-Anchor" href="#are-we-living-in-the-gilded-age-20"></a> <a href="https://www.history.com/news/second-gilded-age-income-inequality">Are We Living in the Gilded Age 2.0 ?</a></h3><p>Extraordinary similarities observed between right now, and the late 19 century to early 21 century, where technology brings human society unrivaled fortune and wealth - unevenly. The society underwent serious transformation, and paved way to modern liberalism. The same might be expected, or not. History never follows scripts.</p><h3 id="using-spaced-repetition-systems-to-see-through-a-piece-of-mathematics"><a class="markdownIt-Anchor" href="#using-spaced-repetition-systems-to-see-through-a-piece-of-mathematics"></a> <a href="http://cognitivemedium.com/srs-mathematics">Using spaced repetition systems to see through a piece of mathematics</a></h3><p>Another great piece from Michael Neilsen, on how Anki systems help improve not just memory, but the whole process of understanding itself.</p><h3 id="the-writer-who-destroyed-an-empire"><a class="markdownIt-Anchor" href="#the-writer-who-destroyed-an-empire"></a> <a href="https://www.nytimes.com/2018/12/11/opinion/solzhenitsyn-soviet-union-putin.html">The Writer Who Destroyed an Empire</a></h3><p>Aleksandr Solzhenitsyn - the man who told the truth. He spread the knowledge of the gulag system and how it’s used to suppress and mistreat people, and undermined the credibility of the Soviet Union Iron Curtain empire, one of the many factors that brought it to its knees.</p><h3 id="its-time-for-a-bill-of-data-rights"><a class="markdownIt-Anchor" href="#its-time-for-a-bill-of-data-rights"></a> <a href="https://www.technologyreview.com/s/612588/its-time-for-a-bill-of-data-rights/">It’s time for a Bill of Data Rights</a></h3><p>The new digital age problems require new solutions. In the article the author proposed the following ‘Bill of Rights’ for the new digital age:</p><ul><li>The right of the people to be secure against unreasonable surveillance shall not be violated.</li><li>No person shall have his or her behavior surreptitiously manipulated.</li><li>No person shall be unfairly discriminated against on the basis of data.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;becoming-a-magician&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#becoming-a-magician&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://autotranslucence.wordpress.com/2018/03/30/becoming-a-magician/&quot;&gt;Becoming a magician&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to become a ‘magician’, the ones that with intricate moves and skills to amaze the audience, you’ll need to adopt a growing mindset:&lt;/p&gt;
&lt;p&gt;you cannot become a ‘magician’ with the same progress rate, or by simply imagining a better self: sometimes the way to changes involves a fundamental shift in how you see the world. And to achieve that you’ll need to observe fellow ‘magicians’, learn the difference, and make non-linear progresses.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Technology" scheme="https://blog.kevinhu.me/tags/Technology/"/>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: Weaving The Web</title>
    <link href="https://blog.kevinhu.me/2019/01/13/Book-Review-Weaving-The-Web/"/>
    <id>https://blog.kevinhu.me/2019/01/13/Book-Review-Weaving-The-Web/</id>
    <published>2019-01-13T21:27:58.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>The book “Weaving The Web”, from the creator of the World Wide Web himself, Sir Tim Berners-Lee, was first published in around 1999. But it was quite pleasant to read, and I think was surprisingly relevant to what’s going on with the Internet and the web now, in 2019, 20 years later.</p><span id="more"></span><p>Sir TBL introduced his experience of coming up with the idea of a universal “information aggregator” that unifies access to all world’s knowledge and information online while working at CERN, how he cooperated with similar brilliant minds to come up with first tools for the web, how he pushed the web into momentum, and finally, his own reflections onthe impact of the web on society, both positive and negative.</p><p>The “Internet” was already a widespread concept before Sir TBL started working on the web. And Sir TBL brought up with this simple yet powerful concept: all the world’s document on the Internet addressed by a “Universal Resource Locator”, and linked together via “hyperlinks”. In this way, you can start your research from any documents, and find all relevant resources by simply clicking on these “links” from any document. And in this way, all world’s online knowledge is weaved together and accessible to you. This abstraction helped made the Internet much more accessible to the public, and opened doors to waves of innovations and business opportunities. I think this is one of the reasons why TBL and his invention was great: he pondered on one complicated problem of organizing the Internet’s information long and hard and came up with the most essential but powerful abstraction, which benefited the whole world.</p><p>Thanks to CERN, Sir TBL was able to work on this side-project, and finally made it completely free and open to the world. Also, thanks to Sir TBL, when he left CERN to cofound WWW Consortium (W3C) in MIT, he wanted to make sure the Internet is kept running free and open to all. Without his spirit of openness and efforts to keep the web on this track, the web would be a much more dismal place. For this, he should be truly respected.</p><p>In the book, he also discussed his philosophy of keeping the open web: including topics on privacy, net neutrality, censorship, etc. It’s striking to see some of these ideas are still so relevant, if not more important today. In 2019 we are experiencing woes from abuses of web’s power, from the very Internet conglomerates the web helped to nurture, and governments who use it to rip off the freedom it’s designed to give people. That’s why I find this book still relevant and interesting today: the founder had expressed his concerns on the web long before. Had we listened to his ideas more carefully, we would be more aware and prepared to save it.</p><p>There are more interesting nuggets in the book: the whole thought process when he designed the web, the anecdotes when he first demoed the web, the stories of the first browsers of the web, and his musings on semantic web and his ultimate goal to “link the world’s information”. In all, it’s a recommend to read.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The book “Weaving The Web”, from the creator of the World Wide Web himself, Sir Tim Berners-Lee, was first published in around 1999. But it was quite pleasant to read, and I think was surprisingly relevant to what’s going on with the Internet and the web now, in 2019, 20 years later.&lt;/p&gt;
    
    </summary>
    
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
      <category term="WorldWideWeb" scheme="https://blog.kevinhu.me/tags/WorldWideWeb/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading 10-22: Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</title>
    <link href="https://blog.kevinhu.me/2018/10/22/Paper-Reading-10-22-Dapper-a-Large-Scale-Distributed-Systems-Tracing-infrastructure/"/>
    <id>https://blog.kevinhu.me/2018/10/22/Paper-Reading-10-22-Dapper-a-Large-Scale-Distributed-Systems-Tracing-infrastructure/</id>
    <published>2018-10-22T06:24:08.000Z</published>
    <updated>2021-09-03T06:34:16.091Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://ai.google/research/pubs/pub36356">https://ai.google/research/pubs/pub36356</a></p><p>This is a 2010 paper that presents Dapper, a tracing infrastructure from Google,to solve problems at Google scale, in its massive scale distributed systems,where a service could invoke very deep RPC calls across different nodes in thecluster, which makes tracing quite challenging.</p><span id="more"></span><p>Highlights and takeaways:</p><h2 id="design"><a class="markdownIt-Anchor" href="#design"></a> Design</h2><p>The paper introduces the following concepts to describe the system:<code>tree</code>, <code>span</code>, and <code>annotation</code>.</p><h3 id="tree"><a class="markdownIt-Anchor" href="#tree"></a> <code>tree</code></h3><p><img src="figure1.png" alt="Figure1" /></p><p>A simple service call could span a few different nodes in the system,forming a calling tree between different services, as shown abovein figure1.</p><h3 id="span"><a class="markdownIt-Anchor" href="#span"></a> <code>span</code></h3><p><img src="figure2.png" alt="Figure2" /></p><p>In Dapper trace tree, the tree nodes are basic units of work which isreferred to as <code>spans</code>. The edge indicates a casual relationship a spanand a parent. See figure2.</p><p>Each trace has a single trace id across all its children spans.Each span has one id, and records the relationships between parentand child. See figure2.Parent spans always starts before child and ends after children finish.</p><p>Dapper is designed to follow distributed control paths with near-zerointervention from the application developers, by instrumenting thefollowing libraries:</p><ul><li>thread library: Dapper attaches a trace context to thread-localstorage.</li><li>asynchronous control flow library: Dapper instruments the control flow library to ensureall async callbacks store the context of their creator.</li><li>IPC library: All Google’s inter-process communication is built arounda single RPC framework, for all communications on same machine,and across network.</li></ul><h3 id="annotation"><a class="markdownIt-Anchor" href="#annotation"></a> <code>annotation</code></h3><p>The instrumentation above is sufficient to derive traces of complexdistributed systems and made transparent to users, but Dapper alsoprovides capabilities for users to annotate important sections totheir applications.</p><h2 id="sampling"><a class="markdownIt-Anchor" href="#sampling"></a> Sampling</h2><p>To improve performance, one of Dapper’s design decision issampling. Dapper team noticed that Samplingat a relative small rate can get pretty good results with insightsto critical performance issues.</p><h2 id="trace-collection"><a class="markdownIt-Anchor" href="#trace-collection"></a> Trace collection</h2><p>Trace collection is divided to the following steps:</p><ul><li>Dapper span data is written to local log files.</li><li>Local logs are collected by Dapper daemons.</li><li>And are finally written to Bigtable.</li><li>User can query and analyze different traces with a Dapper webinterface, which aggregates all logs and sort by tracing ids.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://ai.google/research/pubs/pub36356&quot;&gt;https://ai.google/research/pubs/pub36356&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a 2010 paper that presents Dapper, a tracing infrastructure from Google,
to solve problems at Google scale, in its massive scale distributed systems,
where a service could invoke very deep RPC calls across different nodes in the
cluster, which makes tracing quite challenging.&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="tracing" scheme="https://blog.kevinhu.me/tags/tracing/"/>
    
      <category term="infrastructure" scheme="https://blog.kevinhu.me/tags/infrastructure/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading 10-14: A Reconfigurable Fabric for Accelerating Large-Scale Datacenter Services</title>
    <link href="https://blog.kevinhu.me/2018/10/14/14-Paper-Reading-2-Catapult/"/>
    <id>https://blog.kevinhu.me/2018/10/14/14-Paper-Reading-2-Catapult/</id>
    <published>2018-10-15T02:47:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/">https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/</a></p><p>This is one of the series of papers from Microsoft’s <a href="https://www.microsoft.com/en-us/research/project/project-catapult/">Project Catapult</a>,which studies leveraging reconfigurable devices (FPGA, etc.) to accelerate data center, from very specificaccelerating algorithms like page ranking for Bing search engine, to more sophisticated machinelearning frameworks like DNN.</p><p>This is one of their early publications, which introduces the basic design and implementationof the FPGA accelerated datacenter. It covers the very fundamental details of all aspects ofserver design, from hardware, network topology, FPGA core design, fault-tolerant cluster managementsoftware design, workload scheduling algorithm, and etc…</p><span id="more"></span><p>Some highlights and takeaways:</p><h2 id="hardware"><a class="markdownIt-Anchor" href="#hardware"></a> Hardware</h2><p>Catapult hardware is integrated with existing server-grade blades, which takes the space on thePCIe of the motherboard, through a daughter board with one single high-end FPGA card.</p><h2 id="network-design"><a class="markdownIt-Anchor" href="#network-design"></a> Network Design</h2><p>The daughter-boardcards connects each other with a fast secondary network, independent of the CPU network. The secondarynetworks form a 6x8 torus topology network (see more details in paper), which gives fast inter-FPGA communications,good routability but not too much cabling complexity. The CPU network connects to a 48-port switch foreach pod.</p><h2 id="software-interface"><a class="markdownIt-Anchor" href="#software-interface"></a> Software Interface</h2><p>On FPGA space has been divided into <em>Shell</em> and <em>Role</em>. <em>Shell</em> manages the common libraries or functionalitieslike memory management, serial link, or PCIe, reconfiguration logics, etc… The <em>Role</em> space is responsible foractual acceleration algorithm, which will be reloaded for each reconfiguration when the FPGA functionality needsto be updated.</p><p>FPGAs will be reconfigured from time to time and certain software must be designed to ensure to take the FPGAcompletely offline and ignored by neighbors, to ensure correct operations.</p><p>Debugging might be hard to achieve through typical JTAG hardware debugging facilities, considering the scaleof the datacenter. The paper presents an ‘always-on’ data collector that captures the key components andsaves them to a circular-buffer log.</p><p>The software interfaces divides the algorithm into 7-stages and distributed them to a 8-node FPGA group, withone for redundancy. The paper describes how the network accelerates the ‘Feature Extraction’, which producesa single score at the last stage, indicating how close the document is to the search key word.</p><p>All the queries are queued in memory in DRAM. The Queue Manager takes documents from each queue, then sends themdown the pipeline. It also manages the model reloads in the pipeline, which calculates different feature ‘scores’ forqueries.</p><h2 id="evaluation"><a class="markdownIt-Anchor" href="#evaluation"></a> Evaluation</h2><p>The Catapult project, according to the paper, ‘reduces the worst-case latency by 29% in the 95 percentile distribution’in their evaluation environment, and provides 95% gain in throughput relative to software.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/&quot;&gt;https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is one of the series of papers from Microsoft’s &lt;a href=&quot;https://www.microsoft.com/en-us/research/project/project-catapult/&quot;&gt;Project Catapult&lt;/a&gt;,
which studies leveraging reconfigurable devices (FPGA, etc.) to accelerate data center, from very specific
accelerating algorithms like page ranking for Bing search engine, to more sophisticated machine
learning frameworks like DNN.&lt;/p&gt;
&lt;p&gt;This is one of their early publications, which introduces the basic design and implementation
of the FPGA accelerated datacenter. It covers the very fundamental details of all aspects of
server design, from hardware, network topology, FPGA core design, fault-tolerant cluster management
software design, workload scheduling algorithm, and etc…&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="HPC" scheme="https://blog.kevinhu.me/tags/HPC/"/>
    
      <category term="FPGA" scheme="https://blog.kevinhu.me/tags/FPGA/"/>
    
      <category term="Datacenter" scheme="https://blog.kevinhu.me/tags/Datacenter/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2018-10-14</title>
    <link href="https://blog.kevinhu.me/2018/10/14/14-Reading-Summary-2018-10/"/>
    <id>https://blog.kevinhu.me/2018/10/14/14-Reading-Summary-2018-10/</id>
    <published>2018-10-14T20:52:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Posts I find interesting around the web:</p><h2 id="miscalleneous-posts"><a class="markdownIt-Anchor" href="#miscalleneous-posts"></a> Miscalleneous Posts</h2><h3 id="augumenting-long-term-memory"><a class="markdownIt-Anchor" href="#augumenting-long-term-memory"></a> <a href="http://augmentingcognition.com/ltm.html">Augumenting Long-term Memory</a></h3><p>A very interesting posts on augumenting long-term memory, based on Ebbinghaus’ forgetting curve theory: use flashcards to memorize everything you’ve learned, and even trivias like your friends’ birthday, etc… It uses Anki flashcard software to go through the list of stuff.</p><p>Author also reasoned about the benefits of memorizing all the details, concepts, and “everything”: the details are the building blocks of a field of knowledge, and memorizing them dramatically helps the understanding this field.</p><p>It’s a long read but a deep discussion, and I find it a joyful read.</p><h3 id="how-to-get-rich"><a class="markdownIt-Anchor" href="#how-to-get-rich"></a> <a href="https://www.edge.org/conversation/jared_diamond-how-to-get-rich">How To Get Rich</a></h3><p>An interesting talk from Jared Diamond, the author of <em>Guns, Germs, and Steel</em>. Despite the kind of misleading title, it’s an interesting take on history and the progress of human civilizations, and how competitions between civilizations influence their prosperity.</p><h2 id="systems-design-and-distributed-systems"><a class="markdownIt-Anchor" href="#systems-design-and-distributed-systems"></a> Systems Design and Distributed Systems</h2><h3 id="softwarearch-you-are-going-to-need-it-using-interfaces-and-dependency-injection-to-future-proof-your-designs"><a class="markdownIt-Anchor" href="#softwarearch-you-are-going-to-need-it-using-interfaces-and-dependency-injection-to-future-proof-your-designs"></a> <a href="https://medium.com/dm03514-tech-blog/you-are-going-to-need-it-using-interfaces-and-dependency-injection-to-future-proof-your-designs-2cf6f58db192">SoftwareArch: You are going to need it — Using Interfaces and Dependency Injection to future proof your designs</a></h3><p>An introduction to interfaces in Golang, and how dependency injection can help you design large projects.</p><h3 id="system-design-primer"><a class="markdownIt-Anchor" href="#system-design-primer"></a> <a href="https://github.com/donnemartin/system-design-primer">System Design Primer</a></h3><p>The basic concepts of system design, web design, basic principals and distributed systems design. A collaborated effort on Github.</p><h3 id="distributed-periodic-scheduling-with-cron"><a class="markdownIt-Anchor" href="#distributed-periodic-scheduling-with-cron"></a> <a href="https://landing.google.com/sre/book/chapters/distributed-periodic-scheduling.html">Distributed Periodic Scheduling with Cron</a></h3><p>A chapter from Google’s new Site Reliability Engineering book, on how to design a distributed cron job daemon, and handle problems including fault-tolerance, repeatedly scheduled jobs, overloading the cluster, etc… The whole book is a very valuable summary of experience of automation and distributed systems design at Google, and at Google scale. Definitely will read through other chapters.</p><h3 id="go-hits-the-concurrency-nail-right-on-the-head"><a class="markdownIt-Anchor" href="#go-hits-the-concurrency-nail-right-on-the-head"></a> <a href="https://eli.thegreenplace.net/2018/go-hits-the-concurrency-nail-right-on-the-head/">Go hits the concurrency nail right on the head</a></h3><p>Eli Bendersky’s blog post on why Golang gracefully handles the problems of concurrency at language level, that other major languages handles rather awkwardly.</p><ul><li>Use goroutine to unify the interface to coroutines and thread.</li><li>Use channels to enforce the ‘share memory by communicating’ pattern.</li></ul><p>Which greatly reduces the programmer’s mental burden of design highly concurrent systems.</p><h3 id="getting-started-with-python-in-hpc"><a class="markdownIt-Anchor" href="#getting-started-with-python-in-hpc"></a> <a href="http://andy.terrel.us/blog/2012/09/27/starting-with-python/">Getting started with Python in HPC</a></h3><p>An introduction to learning Python in HPC, from introduction to Python language, to distributed HPC frameworks for Python.</p><h3 id="a-whirlwind-tour-of-distributed-systems"><a class="markdownIt-Anchor" href="#a-whirlwind-tour-of-distributed-systems"></a> <a href="https://medium.com/@marinsmiljanic/a-whirlwind-tour-of-distributed-systems-918d6632eb78">A Whirlwind Tour of Distributed Systems</a></h3><p>A list of concepts, papers, and interesting blog posts on distributed systems design.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Posts I find interesting around the web:&lt;/p&gt;
&lt;h2 id=&quot;miscalleneous-posts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#miscalleneous-posts&quot;&gt;&lt;/a&gt; M
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="systems" scheme="https://blog.kevinhu.me/tags/systems/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading 09-09: C++ and the Perils of Double-Checked Locking</title>
    <link href="https://blog.kevinhu.me/2018/09/09/Weekly-Paper-Reading-1-DCLP/"/>
    <id>https://blog.kevinhu.me/2018/09/09/Weekly-Paper-Reading-1-DCLP/</id>
    <published>2018-09-09T18:03:20.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>An interesting paper on the perils of C++, design pattern and multi-threading when they’re mixed together:</p><p><a href="http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf">C++ and the Perils of Double-Checked Locking</a></p><p>The DCLP(Double-Checked Locking Pattern) is often-used in singleton design pattern: you’d like to initialize a shared object for singleton pattern, you follow the steps:</p><ul><li>check lock if the resource is already initialized</li><li>if no, lock the mutex</li><li>check again if the resource is locked inside the mutex-protected area.</li><li>and again if no, initialize the object</li></ul><p>See C++ example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Singleton* Singleton::instance() &#123;</span><br><span class="line">  if (pInstance == 0) &#123;              // 1st check, to avoid locking every time</span><br><span class="line">    Lock lock;</span><br><span class="line"></span><br><span class="line">    if (pInstance == 0) &#123;            // 2nd check, a safe check to guarantee correctness</span><br><span class="line">      pInstance = new Singleton;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return pInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This pattern however, introduces subtle bugs when described in C++ with multi-threading.</p><p>The issue is with this statement:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pInstance = new Singleton;</span><br></pre></td></tr></table></figure><p>The following steps happen:</p><ol><li>Allocate memory for the object</li><li>Construct an object in the allocated memory.</li><li>Assign <code>pInstance</code> to the allocated memory.</li></ol><p>But C++ specification don’t enforce the steps happen in order, and compilers are therefore not constrained to reorder them for sake of optimization. As long as the observable outcome of the instructions are correct, compilers are free to place instructions in an order so that CPUs are most utilized. Consider the following case with DCLP:</p><ul><li>Thread A execute the DCLP piece of code for the first time, performs the 1st check, lock the mutex, performs the 2nd check, allocates memory for Singleton object, points the pInstance to the allocated memory. But before the Singleton object is constructed, thread A is suspended or another thread is scheduled at the same time.</li><li>Thread B enters DCLP area, determines that <code>pInstance</code> is non-null, and start using the object even before it’s fully constructed, and start accessing the <code>Singleton</code> object.</li></ul><p>Oops. This is a very subtle bug, and hard to detect issue when we’re trying to initialize a shared resource once.</p><p>The paper digs into details on how compiler can leverage all sorts of different optimizations to spoil you effort to correct the DCLP code, and how to actually implement it correctly with <code>volatile</code> keyword.</p><p>It’s a very interesting paper on algorithm, C++, and programming, It makes you stand in awe of the difficulty and intricacies of C++ and multi-threaded programming.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;An interesting paper on the perils of C++, design pattern and multi-threading when they’re mixed together:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ari
      
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="Programming" scheme="https://blog.kevinhu.me/tags/Programming/"/>
    
      <category term="C++" scheme="https://blog.kevinhu.me/tags/C/"/>
    
      <category term="Multithread" scheme="https://blog.kevinhu.me/tags/Multithread/"/>
    
      <category term="WeeklyPaper" scheme="https://blog.kevinhu.me/tags/WeeklyPaper/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2018-06</title>
    <link href="https://blog.kevinhu.me/2018/07/09/09-2018-07-09-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2018/07/09/09-2018-07-09-Reading-Summary/</id>
    <published>2018-07-09T05:04:23.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Posts I found interesting around the web:</p><h3 id="man7-linux-cgroups"><a class="markdownIt-Anchor" href="#man7-linux-cgroups"></a> <a href="http://man7.org/linux/man-pages/man7/cgroups.7.html">man7 Linux cgroups</a></h3><p>Linux manual page to cgroups feature in the kernel, which restricts Linux processes CPU, max process numbers, memory usage, network setup and etc…</p><h3 id="man7-linux-namespaces"><a class="markdownIt-Anchor" href="#man7-linux-namespaces"></a> <a href="http://man7.org/linux/man-pages/man7/namespaces.7.html">man7 Linux namespaces</a></h3><p>Linux manual page to namespaces feature in the kernel. Namespaces can be specified by the <code>clone</code> syscall, and isolates the child process’ cgroup, IPC, network, mount, domain names, and etc…</p><h3 id="goto-2018-containers-from-scratch"><a class="markdownIt-Anchor" href="#goto-2018-containers-from-scratch"></a> <a href="https://www.youtube.com/watch?v=8fi7uSYlOdc">GOTO 2018 Containers From Scratch</a></h3><p>When all the ingredients come together, it’s the foundation where Docker is built upon. This very interesting talk from GOTO2018 demonstrates how you can use the following technologies already built-in the Linux kernel to create your own very small proof-of-concept docker:</p><ul><li><code>chroot</code></li><li><code>namespace</code></li><li><code>cgroups</code></li></ul><p>It also includes very interesting details including (but not limited to):</p><ul><li>You’ll need to mount the <code>/proc</code> virtual file systems for your ‘containerized’ child process.</li><li>You’ll need to provide ‘UnshareFlag’ <code>CLONE_NEWNS</code> to the <code>clone</code> system call, to ‘unshare’ the mount point from the child process from the parent process, so that parent doesn’t see child’s mount points (which could be many and messy).</li></ul><h3 id="a-classical-math-problem-gets-pulled-into-the-modern-world"><a class="markdownIt-Anchor" href="#a-classical-math-problem-gets-pulled-into-the-modern-world"></a> <a href="https://www.quantamagazine.org/a-classical-math-problem-gets-pulled-into-the-modern-world-20180523/">A Classical Math Problem Gets Pulled Into the Modern World</a></h3><p>An optimization problem is being used in AI, and therefore all AI applications, including self-driving, etc. Math is magical.</p><h3 id="wikipedia-is-fixing-one-of-internets-biggest-flaws"><a class="markdownIt-Anchor" href="#wikipedia-is-fixing-one-of-internets-biggest-flaws"></a> <a href="https://www.washingtonpost.com/news/wonk/wp/2016/10/25/somethings-terribly-wrong-with-the-internet-and-wikipedia-might-be-able-to-fix-it/?utm_term=.9594628c76ca">Wikipedia is fixing one of Internet’s biggest flaws</a></h3><p>As it actually encourages collaborations, discussions, and exposure to opposing views.</p><h3 id="golang-patterns-part-2"><a class="markdownIt-Anchor" href="#golang-patterns-part-2"></a> <a href="https://dev.to/napicellatwit/golang-patterns---part-2-1906">Golang Patterns - Part 2</a></h3><h3 id="technical-writing-learning-from-kernighan"><a class="markdownIt-Anchor" href="#technical-writing-learning-from-kernighan"></a> <a href="https://two-wrongs.com/technical-writing-learning-from-kernighan.html">Technical Writing: Learning from Kernighan</a></h3><p>Learning technical writing from the author of your favorite C programming book, ‘The C Programming Language’.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Posts I found interesting around the web:&lt;/p&gt;
&lt;h3 id=&quot;man7-linux-cgroups&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#man7-linux-cgroups&quot;&gt;&lt;/a&gt; &lt;a
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Linux" scheme="https://blog.kevinhu.me/tags/Linux/"/>
    
      <category term="Docker" scheme="https://blog.kevinhu.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>A Note on Linux Hugepages</title>
    <link href="https://blog.kevinhu.me/2018/07/01/01-Linux-Hugepages/"/>
    <id>https://blog.kevinhu.me/2018/07/01/01-Linux-Hugepages/</id>
    <published>2018-07-01T23:30:20.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Page table is where Linux stores virtual to physical page address translation, and its size can get huge when memory usage is high. One way to reduce the size of page tables, and reduce the number of page faults, is to use huge pages. I’ve been digging some information on hugepages for my own curiosity, and it looks like Linux has pretty good support for huge pages. And this blog serves as a quick note on my readings.</p><span id="more"></span><h2 id="hugepages"><a class="markdownIt-Anchor" href="#hugepages"></a> Hugepages</h2><p>The sysctl directory contains <code>/sys/kernel/mm/hugepages/hugepages-&#123;pagesize&#125;kB/</code> control files and information on hugepages, where pagesize could be 1048576 or 2048, corresponding to 1GB or 2MB of hugepage size.</p><p>To get information on hugepages on your Linux systems, the <code>hugepages</code> directory contains the controlling files:</p><ul><li><code>nr_hugepages</code></li><li><code>nr_hugepages_mempolicy</code></li><li><code>nr_overcommit_hugepages</code></li><li><code>free_hugepages</code></li><li><code>resv_hugepages</code></li><li><code>surplus_hugepages</code>.</li></ul><p>You can also get hugepage-related information from <code>/proc/meminfo</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HugePages_Total:    2048</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br></pre></td></tr></table></figure><p>The <a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt">Kernel Documentation of Hugetlbpage</a> contains the detailed information and explanation of the purpose and usage of hugepage files, as well as <code>meminfo</code> fields.</p><h2 id="allocating-hugepages"><a class="markdownIt-Anchor" href="#allocating-hugepages"></a> Allocating Hugepages</h2><p>The most convenient way to reserve hugepages on x86_64 Linux is to echo into the sysctl file <code>/sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</code>, e.g.:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</span><br></pre></td></tr></table></figure><p>And for user to access and use the huge pages, Linux actually provides a quite convenient interface: the <code>hugetlbfs</code> file system, e.g.:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t hugetlbfs nodev /mnt/huge</span><br></pre></td></tr></table></figure><p>Which mounts a pseudo filesystem of type <code>hugetlbfs</code> on <code>/mnt/huge</code>, and uses the default huge pagesize specified by the system, and all files created inside the directory uses huge pages.</p><p>And after that, you can use hugepage-backed memory by creating files inside <code>/mnt/huge</code> directory. See example in Linux source tree: <a href="https://github.com/torvalds/linux/blob/master/tools/testing/selftests/vm/hugepage-mmap.c">hugepage-mmap.c</a>. The author takes the following steps:</p><ul><li>Open a file inside <code>/mnt</code> with read-write permission.</li><li>Map memory to the file using <code>mmap</code>, with proper protection and flags set (<code>PROT_READ | PROR_WRITE</code> and <code>MAP_SHARED</code> in this case).</li><li>Use the hugepage-backed memory as usual.</li><li>Clean up memory and file.</li></ul><h2 id="enable-hugepage-on-start"><a class="markdownIt-Anchor" href="#enable-hugepage-on-start"></a> Enable Hugepage On Start</h2><p>According to Linux <a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt">Kernel Documentation</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System administrators may want to put this command in one of the local rc</span><br><span class="line">init files.  This will enable the kernel to allocate huge pages early in</span><br><span class="line">the boot process when the possibility of getting physical contiguous pages</span><br><span class="line">is still very high.</span><br></pre></td></tr></table></figure><p>And to quote the <a href="https://lwn.net/Articles/376606/">LWN article</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If the huge page pool is statically allocated at boot-time, then this section</span><br><span class="line">will not be relevant as the huge pages are guaranteed to exist. In the event</span><br><span class="line">the system needs to dynamically allocate huge pages throughout its lifetime,</span><br><span class="line">then external fragmentation may be a problem.</span><br></pre></td></tr></table></figure><p>So to avoid external fragmentation and make sure that the hugepage allocation is always successful, we may want to reserve hugepages memory regions on boot time. This <a href="https://wiki.debian.org/Hugepages">Debian Wiki Page</a> provides a way to do that. To reserve number of hugepages, add the following line in <code>/etc/sysctl.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.nr_hugepages = 1024</span><br></pre></td></tr></table></figure><p>And to mount it automatically on system start, simply add to <code>/etc/fstab</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugetlbfs /hugepages hugetlbfs mode=1770,gid=2021 0 0</span><br></pre></td></tr></table></figure><h2 id="advanced-topics"><a class="markdownIt-Anchor" href="#advanced-topics"></a> Advanced Topics</h2><p>There are other advanced topics, which probably will not be covered in the scope of this quick note:</p><ul><li><strong>Transparent Huge Pages</strong>: system automatically decides if memory should be backed by hugepages, which make usage of hugepage memory much easier.</li><li><strong>libhugetlbfs APIs</strong>: <code>libhugetlbfs</code> provides programmer APIs to manage and access hugepage memory as well. Hugepage library utilities <code>hugectl</code> can overload Linux standard <code>shmget()</code> functions to allow huge pages to be used by allocating shared memory.</li><li><strong>Text And Data</strong>: <code>hugectl</code> has options to run an application, with its <code>text</code> and <code>data</code> section mapped by hugepages, which gives potential performance benefits.</li></ul><p>These are ideas worth digging into in the future, for applications where hugepages can potential give a good performance boost.</p><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><ul><li><a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt">Kernel Documentation of Hugetlbpage</a></li><li><a href="https://lwn.net/Articles/374424/">LWN Intro to Huge Pages (1 Intro)</a></li><li><a href="https://lwn.net/Articles/375096/">LWN Intro to Huge Pages (2 Interfaces)</a></li><li><a href="https://lwn.net/Articles/375096/">LWN Intro to Huge Pages (3 Administration)</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge#s-memory-configure_hugepages">Redhat Documentation on Performance Tuning: 5.2 Huge Pages And Transparent Huge Pages</a></li><li><a href="https://github.com/torvalds/linux/blob/master/tools/testing/selftests/vm/hugepage-mmap.c">hugepage-mmap.c: Hugepage example in Linux source tree</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Page table is where Linux stores virtual to physical page address translation, and its size can get huge when memory usage is high. One way to reduce the size of page tables, and reduce the number of page faults, is to use huge pages. I’ve been digging some information on hugepages for my own curiosity, and it looks like Linux has pretty good support for huge pages. And this blog serves as a quick note on my readings.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://blog.kevinhu.me/categories/Programming/"/>
    
    
      <category term="Linux" scheme="https://blog.kevinhu.me/tags/Linux/"/>
    
      <category term="Programming" scheme="https://blog.kevinhu.me/tags/Programming/"/>
    
      <category term="Hugepage" scheme="https://blog.kevinhu.me/tags/Hugepage/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2018-05</title>
    <link href="https://blog.kevinhu.me/2018/05/21/2018-05-21-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2018/05/21/2018-05-21-Reading-Summary/</id>
    <published>2018-05-21T05:48:06.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Posts I found interesting during my reading:</p><h3 id="writing-a-time-series-database-from-scratch"><a class="markdownIt-Anchor" href="#writing-a-time-series-database-from-scratch"></a> <a href="https://fabxc.org/tsdb/">Writing a Time Series Database from Scratch</a></h3><p>The author’s experience in writing a time-series database from groundup, for Prometheus.</p><h3 id="introducing-thanos-prometheus-at-scale"><a class="markdownIt-Anchor" href="#introducing-thanos-prometheus-at-scale"></a> <a href="https://improbable.io/games/blog/thanos-prometheus-at-scale">Introducing Thanos: Prometheus at Scale</a></h3><p>The effort to scale Prometheus with a new project Thanos, with Kubernetes sidecar pattern, to read data from individual nodes, pre-process (e.g. sampling), and submit to acentralized data storage and display.</p><h3 id="a-beginners-guide-to-scaling-to-11-million-users-on-amazons-aws"><a class="markdownIt-Anchor" href="#a-beginners-guide-to-scaling-to-11-million-users-on-amazons-aws"></a> <a href="http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html">A Beginner’s Guide To Scaling To 11 Million+ Users On Amazon’s AWS</a></h3><p>What kind of machine/cluster you’ll need for different size of user base (from 1 to billions).</p><h3 id="nexflix-flamescope"><a class="markdownIt-Anchor" href="#nexflix-flamescope"></a> <a href="https://medium.com/netflix-techblog/netflix-flamescope-a57ca19d47bb">Nexflix FlameScope</a></h3><p>A display of CPU trace as a Github-style texture tiles.</p><h3 id="a-usable-c-dialect-that-is-safe-against-memory-corruption"><a class="markdownIt-Anchor" href="#a-usable-c-dialect-that-is-safe-against-memory-corruption"></a> <a href="http://ithare.com/a-usable-c-dialect-that-is-safe-against-memory-corruption/">A Usable C++ Dialect that is Safe Against Memory Corruption</a></h3><p>IT-‘No Bug’-Hare is an interesting blog I found recently, focused on system, C++ language and game design. A good read for C++ fanatics and system designers.</p><hr /><p>I’m feeling guilty for not updating for so long. But on the bright side: I’m back.</p><p>As a part of work requirements I’m taking on Golang and some small distributed system design jobs. It’s an interesting language for this task: network, systems, infrastructures, etc. I’m having mixed but mostly positive feelings about this language, and maybe will share my experience when I got a chance.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Posts I found interesting during my reading:&lt;/p&gt;
&lt;h3 id=&quot;writing-a-time-series-database-from-scratch&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Technology" scheme="https://blog.kevinhu.me/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2017-06</title>
    <link href="https://blog.kevinhu.me/2017/06/11/Reading-Summary-2017-06/"/>
    <id>https://blog.kevinhu.me/2017/06/11/Reading-Summary-2017-06/</id>
    <published>2017-06-12T00:54:11.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a while since I ever post a reading summary never mention a new blog post. Writing is a time demanding job.</p><h1 id="society-and-technology"><a class="markdownIt-Anchor" href="#society-and-technology"></a> Society and Technology</h1><h3 id="why-do-we-manage-academia-so-badly"><a class="markdownIt-Anchor" href="#why-do-we-manage-academia-so-badly"></a> <a href="https://svpow.com/2017/03/22/why-do-we-manage-academia-so-badly/">Why do we manage academia so badly?</a></h3><p><strong>&quot;Managers want metrics that are easy to calculate, easy to understand, and quick to yield a value …metrics with these desirable properties are almost always worse than useless.&quot;</strong></p><p>Easy metrics are also easily “hacked” - people “hack” the metrics to make statistics look good, while deviate from the original purpose of academia: to achieve good quality research.</p><p>See also:</p><p><a href="https://svpow.com/2017/03/17/every-attempt-to-manage-academia-makes-it-worse/">Every attempt to manage academia makes it worse</a></p><h3 id="did-reddits-april-fools-gag-solve-the-issue-of-online-hate-speech"><a class="markdownIt-Anchor" href="#did-reddits-april-fools-gag-solve-the-issue-of-online-hate-speech"></a> <a href="https://arstechnica.com/gaming/2017/04/in-memoriam-reddits-72-hour-live-graffiti-wall-as-a-social-experiment/">Did Reddit’s April Fool’s gag solve the issue of online hate speech?</a></h3><p>An interesting, anarchic style experiment on Reddit: let thousands of Redditers draw a picture all at the same time, what would possibly happen? It turned out to be surprisingly good.</p><h3 id="tim-berners-lee-i-invented-the-web-here-are-three-things-we-need-to-change-to-save-it"><a class="markdownIt-Anchor" href="#tim-berners-lee-i-invented-the-web-here-are-three-things-we-need-to-change-to-save-it"></a> <a href="https://www.theguardian.com/technology/2017/mar/11/tim-berners-lee-web-inventor-save-internet">Tim Berners-Lee: I invented the web. Here are three things we need to change to save it</a></h3><p>Tim Berners-Lee: The Father of the World Wide Web and Turing Award winner believes the web nowadays has serious flaws, namely the loss of control of personal privacy, rampant spreading of misinformation on the web, and manipulations from the political campaigns online. It took everyone to build the web we have today, and it takes everyone to fix it now.</p><p>More reports and readings on Tim Berners-Lee:</p><ul><li><a href="https://www.theguardian.com/technology/2009/mar/11/berners-lee-internet-data">Web inventor warns against third-party internet snooping</a></li><li><a href="https://www.theguardian.com/technology/2017/apr/04/tim-berners-lee-online-privacy-interview-turing-award">Tim Berners-Lee: selling private citizens’ browsing data is ‘disgusting’</a></li><li><a href="https://www.w3.org/DesignIssues/GovData.html">Putting Government Data Online</a></li></ul><span id="more"></span><h3 id="alan-kays-reading-list"><a class="markdownIt-Anchor" href="#alan-kays-reading-list"></a> <a href="http://shelfjoy.com/shelfjoy/alan-kay-from-viewpoints-research-institute-recommends-his-reading-list-for-beginners">Alan Kay’s Reading List</a></h3><p>Posted here again. He did so many tons of readings to get his insights on science, Computer Science, technology and society. It’s gonna be a long but joyful road.</p><h3 id="youre-not-going-to-believe-what-im-about-to-tell-you"><a class="markdownIt-Anchor" href="#youre-not-going-to-believe-what-im-about-to-tell-you"></a> <a href="http://theoatmeal.com/comics/believe">You’re Not Going To Believe What I’m About To Tell You</a></h3><p>Lesson 101 for a netizen: handling viewpoints that contradict your own. A good read.</p><h3 id="crypto-tokens-a-breakthrough-in-open-network-design"><a class="markdownIt-Anchor" href="#crypto-tokens-a-breakthrough-in-open-network-design"></a> <a href="https://medium.com/@cdixon/crypto-tokens-a-breakthrough-in-open-network-design-e600975be2ef">Crypto Tokens: A Breakthrough in Open Network Design</a></h3><p>How Ethereum and BlockChain technology may bring us a truly open, distributed Internet. Maybe.</p><h3 id="i-got-tired-of-commoditized-content-for-entrepreneurs-heres-what-i-started-watching-instead"><a class="markdownIt-Anchor" href="#i-got-tired-of-commoditized-content-for-entrepreneurs-heres-what-i-started-watching-instead"></a> <a href="https://blog.yalabot.com/i-got-sick-of-commoditized-content-for-entrepreneurs-heres-what-i-started-watching-instead-cdf9a5b28652">I got tired of commoditized content for entrepreneurs. Here’s what I started watching instead.</a></h3><p>A curated list of video courses/podcasts for entrepreneurs.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been a while since I ever post a reading summary never mention a new blog post. Writing is a time demanding job.&lt;/p&gt;
&lt;h1 id=&quot;society-and-technology&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#society-and-technology&quot;&gt;&lt;/a&gt; Society and Technology&lt;/h1&gt;
&lt;h3 id=&quot;why-do-we-manage-academia-so-badly&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#why-do-we-manage-academia-so-badly&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://svpow.com/2017/03/22/why-do-we-manage-academia-so-badly/&quot;&gt;Why do we manage academia so badly?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Managers want metrics that are easy to calculate, easy to understand, and quick to yield a value …
metrics with these desirable properties are almost always worse than useless.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Easy metrics are also easily “hacked” - people “hack” the metrics to make statistics look good, while deviate from the original purpose of academia: to achieve good quality research.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://svpow.com/2017/03/17/every-attempt-to-manage-academia-makes-it-worse/&quot;&gt;Every attempt to manage academia makes it worse&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;did-reddits-april-fools-gag-solve-the-issue-of-online-hate-speech&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#did-reddits-april-fools-gag-solve-the-issue-of-online-hate-speech&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://arstechnica.com/gaming/2017/04/in-memoriam-reddits-72-hour-live-graffiti-wall-as-a-social-experiment/&quot;&gt;Did Reddit’s April Fool’s gag solve the issue of online hate speech?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An interesting, anarchic style experiment on Reddit: let thousands of Redditers draw a picture all at the same time, what would possibly happen? It turned out to be surprisingly good.&lt;/p&gt;
&lt;h3 id=&quot;tim-berners-lee-i-invented-the-web-here-are-three-things-we-need-to-change-to-save-it&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tim-berners-lee-i-invented-the-web-here-are-three-things-we-need-to-change-to-save-it&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.theguardian.com/technology/2017/mar/11/tim-berners-lee-web-inventor-save-internet&quot;&gt;Tim Berners-Lee: I invented the web. Here are three things we need to change to save it&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tim Berners-Lee: The Father of the World Wide Web and Turing Award winner believes the web nowadays has serious flaws, namely the loss of control of personal privacy, rampant spreading of misinformation on the web, and manipulations from the political campaigns online. It took everyone to build the web we have today, and it takes everyone to fix it now.&lt;/p&gt;
&lt;p&gt;More reports and readings on Tim Berners-Lee:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2009/mar/11/berners-lee-internet-data&quot;&gt;Web inventor warns against third-party internet snooping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2017/apr/04/tim-berners-lee-online-privacy-interview-turing-award&quot;&gt;Tim Berners-Lee: selling private citizens’ browsing data is ‘disgusting’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/DesignIssues/GovData.html&quot;&gt;Putting Government Data Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Technology" scheme="https://blog.kevinhu.me/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2017-03</title>
    <link href="https://blog.kevinhu.me/2017/03/26/Reading-Summary-2017-03/"/>
    <id>https://blog.kevinhu.me/2017/03/26/Reading-Summary-2017-03/</id>
    <published>2017-03-27T02:14:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="programming"><a class="markdownIt-Anchor" href="#programming"></a> Programming</h1><h3 id="episode-51-mechanics-of-building-a-carpooling-service-introduction"><a class="markdownIt-Anchor" href="#episode-51-mechanics-of-building-a-carpooling-service-introduction"></a> <a href="https://sysadmincasts.com/episodes/51-mechanics-of-building-a-carpooling-service-introduction">Episode #51 - Mechanics of Building a Carpooling Service - Introduction</a></h3><p>Sysadmin Casts is back again, and this time with more stuff: how to turn an idea into a MVP.</p><h1 id="technology"><a class="markdownIt-Anchor" href="#technology"></a> Technology</h1><h3 id="technology-review-10-breakthroughs-technologies-2016"><a class="markdownIt-Anchor" href="#technology-review-10-breakthroughs-technologies-2016"></a> <a href="https://www.technologyreview.com/lists/technologies/2016/">Technology Review: 10 Breakthroughs Technologies 2016</a></h3><p>Artificial Intelligence for better conversational interfaces, Elon Musk’s companies, and biological technologies are back to people’s attention again.</p><span id="more"></span><h3 id="1212-great-youtube-channels-for-entrepreneurs"><a class="markdownIt-Anchor" href="#1212-great-youtube-channels-for-entrepreneurs"></a> <a href="https://blog.yalabot.com/i-got-sick-of-commoditized-content-for-entrepreneurs-heres-what-i-started-watching-instead-cdf9a5b28652#.ovebbjiaj">12½ Great YouTube Channels For Entrepreneurs</a></h3><p>YouTube channels for inspirations.</p><h3 id="can-fpga-beat-gpus-in-accelerating-next-generation-deep-learning"><a class="markdownIt-Anchor" href="#can-fpga-beat-gpus-in-accelerating-next-generation-deep-learning"></a> <a href="https://www.nextplatform.com/2017/03/21/can-fpgas-beat-gpus-accelerating-next-generation-deep-learning/">Can FPGA Beat GPUs In Accelerating Next-Generation Deep Learning?</a></h3><p>Why FPGAs still have a shot.</p><h1 id="social"><a class="markdownIt-Anchor" href="#social"></a> Social</h1><h3 id="what-if-sociologists-had-as-much-influence-as-economists"><a class="markdownIt-Anchor" href="#what-if-sociologists-had-as-much-influence-as-economists"></a> <a href="https://mobile.nytimes.com/2017/03/17/upshot/what-if-sociologists-had-as-much-influence-as-economists.html?smid=tw-nytimes&amp;smtyp=cur&amp;referer=https://t.co/DuJskMsbQf">What if Sociologists Had as Much Influence as Economists?</a></h3><h3 id="write-good"><a class="markdownIt-Anchor" href="#write-good"></a> <a href="https://github.com/btford/write-good">Write Good</a></h3><p>An interesting tool for better writing, including <a href="https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests">Flesch–Kincaid readability tests</a> and pointing out <a href="https://en.wikipedia.org/wiki/Weasel_word">Weasel Words</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;programming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#programming&quot;&gt;&lt;/a&gt; Programming&lt;/h1&gt;
&lt;h3 id=&quot;episode-51-mechanics-of-building-a-carpooling-service-introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#episode-51-mechanics-of-building-a-carpooling-service-introduction&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sysadmincasts.com/episodes/51-mechanics-of-building-a-carpooling-service-introduction&quot;&gt;Episode #51 - Mechanics of Building a Carpooling Service - Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sysadmin Casts is back again, and this time with more stuff: how to turn an idea into a MVP.&lt;/p&gt;
&lt;h1 id=&quot;technology&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#technology&quot;&gt;&lt;/a&gt; Technology&lt;/h1&gt;
&lt;h3 id=&quot;technology-review-10-breakthroughs-technologies-2016&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#technology-review-10-breakthroughs-technologies-2016&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.technologyreview.com/lists/technologies/2016/&quot;&gt;Technology Review: 10 Breakthroughs Technologies 2016&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Artificial Intelligence for better conversational interfaces, Elon Musk’s companies, and biological technologies are back to people’s attention again.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Python" scheme="https://blog.kevinhu.me/tags/Python/"/>
    
      <category term="C/C++" scheme="https://blog.kevinhu.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-12</title>
    <link href="https://blog.kevinhu.me/2017/01/08/Reading-Summary-2016-12/"/>
    <id>https://blog.kevinhu.me/2017/01/08/Reading-Summary-2016-12/</id>
    <published>2017-01-09T05:15:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cc"><a class="markdownIt-Anchor" href="#cc"></a> C/C++</h1><h3 id="how-to-find-size-of-an-array-in-c-without-sizeof"><a class="markdownIt-Anchor" href="#how-to-find-size-of-an-array-in-c-without-sizeof"></a> <a href="http://arjunsreedharan.org/post/69303442896/the-difference-between-arr-and-arr-how-to-find">How to find size of an array in C without sizeof</a></h3><p>The difference between arr and &amp;arr - basically, arr is of type int *, and &amp;arr is of type (int *)[size].</p><p>Very excellent article on the fundamentals of C/C++!</p><h3 id="what-every-c-programmer-should-know-about-undefined-behavior"><a class="markdownIt-Anchor" href="#what-every-c-programmer-should-know-about-undefined-behavior"></a> <a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html">What Every C Programmer Should Know About Undefined Behavior</a></h3><p>Some “gotchas” and pitfalls in the C programming language and how sometimes compiler optimizations can make it worse. Long story short is, steer away from undefined behaviors.</p><p>This post is from Chris Lattner himeself. Really nice article.</p><h1 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h1><h3 id="python-has-big-impact-at-red-hat"><a class="markdownIt-Anchor" href="#python-has-big-impact-at-red-hat"></a> <a href="http://community.redhat.com/blog/2016/12/python-has-big-impact-at-red-hat/">Python Has Big Impact At Red Hat</a></h3><p>Why Python is such a cool language and how Python is used in Redhat. Most of redhat’s important infrastructure is written in Python, including but not limited to <code>firewalld</code>, <code>yum</code>, and its successor <code>dnf</code>, and many cloud PaaS tools for OpenShift.</p><span id="more"></span><h3 id="statistics-for-hackers-pycon2016-video"><a class="markdownIt-Anchor" href="#statistics-for-hackers-pycon2016-video"></a> <a href="https://youtu.be/Iq9DzN6mvYA">Statistics For Hackers - PyCon2016 (Video)</a></h3><p>How to write a few lines of Python to simulate for a statistic problem which otherwise be onerous with all the math theorems and formulas.</p><h3 id="refactoring-python-why-and-how-to-restructure-your-code-pycon2016-video"><a class="markdownIt-Anchor" href="#refactoring-python-why-and-how-to-restructure-your-code-pycon2016-video"></a> <a href="https://youtu.be/D_6ybDcU5gc">Refactoring Python: Why and how to restructure your code - PyCon2016 (Video)</a></h3><p>How to write clean, well-structured and “Pythonic” code.</p><h3 id="python-language-pycon2016-video"><a class="markdownIt-Anchor" href="#python-language-pycon2016-video"></a> <a href="https://youtu.be/YgtL4S7Hrwo">Python Language - PyCon2016 (Video)</a></h3><p>By no one but Guido van Rossum himself, on the status of Python 3, and how he created Python.</p><p>(And Death to Python 2!!)</p><h3 id="stop-writing-classes-pycon2012-video"><a class="markdownIt-Anchor" href="#stop-writing-classes-pycon2012-video"></a> <a href="https://youtu.be/o9pEzgHorH0">Stop Writing Classes - PyCon2012 (Video)</a></h3><p>Stop writing classes - when, and when not to use classes. Stop thinking in Java (no offense), and learn to be “Pythonic”, for a smaller, cleaner, and more well-structured project code base.</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc.</h1><h3 id="if-youre-so-smart-why-arent-you-rich"><a class="markdownIt-Anchor" href="#if-youre-so-smart-why-arent-you-rich"></a> <a href="https://www.bloomberg.com/view/articles/2016-12-22/if-you-re-so-smart-why-aren-t-you-rich">If You’re So Smart, Why Aren’t You Rich?</a></h3><p>Conscientiousness - “A Personality trait marked by diligence, perseverance and self-discipline”.</p><h3 id="thinking-about-thinking"><a class="markdownIt-Anchor" href="#thinking-about-thinking"></a> <a href="http://www.economist.com/news/books-and-arts/21711860-michael-lewis-dissects-enduring-friendship-between-daniel-kahneman-and-amos?fsrc=scn%2Ftw%2Fte%2Fbl%2Fed%2Fthinkingaboutthinking">Thinking about thinking</a></h3><p>Daniel Kahneman - I’ve been recently reading his book <a href="https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/">“Thinking: Fast and Slow”</a>. It’s often listed as work in economics, but from what I’ve read it’s also an amazing book on psychology and human cognitives.</p><p>Reading more books is definitely one of my New Year resolutions. Just started this book, will finish.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cc&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cc&quot;&gt;&lt;/a&gt; C/C++&lt;/h1&gt;
&lt;h3 id=&quot;how-to-find-size-of-an-array-in-c-without-sizeof&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#how-to-find-size-of-an-array-in-c-without-sizeof&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://arjunsreedharan.org/post/69303442896/the-difference-between-arr-and-arr-how-to-find&quot;&gt;How to find size of an array in C without sizeof&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The difference between arr and &amp;amp;arr - basically, arr is of type int *, and &amp;amp;arr is of type (int *)[size].&lt;/p&gt;
&lt;p&gt;Very excellent article on the fundamentals of C/C++!&lt;/p&gt;
&lt;h3 id=&quot;what-every-c-programmer-should-know-about-undefined-behavior&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-every-c-programmer-should-know-about-undefined-behavior&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;What Every C Programmer Should Know About Undefined Behavior&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some “gotchas” and pitfalls in the C programming language and how sometimes compiler optimizations can make it worse. Long story short is, steer away from undefined behaviors.&lt;/p&gt;
&lt;p&gt;This post is from Chris Lattner himeself. Really nice article.&lt;/p&gt;
&lt;h1 id=&quot;python&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python&quot;&gt;&lt;/a&gt; Python&lt;/h1&gt;
&lt;h3 id=&quot;python-has-big-impact-at-red-hat&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python-has-big-impact-at-red-hat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://community.redhat.com/blog/2016/12/python-has-big-impact-at-red-hat/&quot;&gt;Python Has Big Impact At Red Hat&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why Python is such a cool language and how Python is used in Redhat. Most of redhat’s important infrastructure is written in Python, including but not limited to &lt;code&gt;firewalld&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, and its successor &lt;code&gt;dnf&lt;/code&gt;, and many cloud PaaS tools for OpenShift.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Python" scheme="https://blog.kevinhu.me/tags/Python/"/>
    
      <category term="Compilers" scheme="https://blog.kevinhu.me/tags/Compilers/"/>
    
      <category term="Undefined Behavior" scheme="https://blog.kevinhu.me/tags/Undefined-Behavior/"/>
    
      <category term="C/C++" scheme="https://blog.kevinhu.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-11</title>
    <link href="https://blog.kevinhu.me/2016/11/27/Reading-Summary-2016-11/"/>
    <id>https://blog.kevinhu.me/2016/11/27/Reading-Summary-2016-11/</id>
    <published>2016-11-28T05:56:03.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cc"><a class="markdownIt-Anchor" href="#cc"></a> C/C++</h1><h3 id="effective-c-and-c-in-a-nutshell"><a class="markdownIt-Anchor" href="#effective-c-and-c-in-a-nutshell"></a> “Effective C++” and “C++ In A Nutshell”</h3><p>Finished most part of “C++ In A Nutshell”, and Scott Meyer’s “Effective C++”, and started to learn the basics of C++ language. Really great books to start to learn the basics of C++, and some of the fundamental problems in the language.</p><span id="more"></span><h1 id="system-design"><a class="markdownIt-Anchor" href="#system-design"></a> System Design</h1><h3 id="what-are-system-design-questions"><a class="markdownIt-Anchor" href="#what-are-system-design-questions"></a> <a href="https://www.hiredintech.com/classrooms/system-design/lesson/52">What Are System Design Questions?</a></h3><p>A very interesting guide to scalable system design and how you should deal with them in an interview. It’s very interesting to learn the basics, while to do them properly, it might require years of experience.</p><h3 id="scalability-for-dummies"><a class="markdownIt-Anchor" href="#scalability-for-dummies"></a> <a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">Scalability For Dummies</a></h3><p>A guide to scalability, a series of interesting and concise introduction to the same problem.</p><h1 id="unix"><a class="markdownIt-Anchor" href="#unix"></a> Unix</h1><h3 id="unix-as-ide-introduction"><a class="markdownIt-Anchor" href="#unix-as-ide-introduction"></a> <a href="https://sanctum.geek.nz/arabesque/series/unix-as-ide/">Unix As IDE: Introduction</a></h3><p>A very interesting guide on how to use Unix’s core utilities (grep, find, bash, awk, sort, gcc, gdb, git, vim/emacs, …) to arm yourself for code editing/maintenance tasks.</p><h1 id="programming-languages"><a class="markdownIt-Anchor" href="#programming-languages"></a> Programming Languages</h1><h3 id="how-it-feels-to-learn-javascript-in-2016"><a class="markdownIt-Anchor" href="#how-it-feels-to-learn-javascript-in-2016"></a> <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.7pr0vhyyb">How It Feels To Learn JavaScript In 2016</a></h3><p>JavaScript…</p><h3 id="the-definitive-guide-to-python-exceptions"><a class="markdownIt-Anchor" href="#the-definitive-guide-to-python-exceptions"></a> <a href="https://julien.danjou.info/blog/2016/python-exceptions-guide">The Definitive Guide to Python Exceptions</a></h3><p>A Python hacker’s guide to Python, from the author of “The Hacker’s Guide To Python”.</p><h1 id="miscellaneous"><a class="markdownIt-Anchor" href="#miscellaneous"></a> Miscellaneous</h1><h3 id="why-democracy-rewards-bad-people"><a class="markdownIt-Anchor" href="#why-democracy-rewards-bad-people"></a> <a href="https://mises.org/blog/why-democracy-rewards-bad-people">Why Democracy Rewards Bad People</a></h3><p>In light of the recent election…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cc&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cc&quot;&gt;&lt;/a&gt; C/C++&lt;/h1&gt;
&lt;h3 id=&quot;effective-c-and-c-in-a-nutshell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#effective-c-and-c-in-a-nutshell&quot;&gt;&lt;/a&gt; “Effective C++” and “C++ In A Nutshell”&lt;/h3&gt;
&lt;p&gt;Finished most part of “C++ In A Nutshell”, and Scott Meyer’s “Effective C++”, and started to learn the basics of C++ language. Really great books to start to learn the basics of C++, and some of the fundamental problems in the language.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-09</title>
    <link href="https://blog.kevinhu.me/2016/09/28/Reading-Summary-2016-09/"/>
    <id>https://blog.kevinhu.me/2016/09/28/Reading-Summary-2016-09/</id>
    <published>2016-09-28T05:11:03.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reading"><a class="markdownIt-Anchor" href="#reading"></a> Reading</h1><h3 id="a-bit-of-python"><a class="markdownIt-Anchor" href="#a-bit-of-python"></a> <a href="https://access.redhat.com/blogs/766093/posts/2592591">A Bit of Python</a></h3><p>Some security pitfalls in Python language. Very interesting read, from RedHat.</p><h3 id="improving-workflow-by-using-clang-based-tools"><a class="markdownIt-Anchor" href="#improving-workflow-by-using-clang-based-tools"></a> <a href="https://omtcyfz.github.io/2016/08/30/Improving-workflow-by-using-Clang-based-tools.html">Improving Workflow By Using Clang-based Tools</a></h3><h3 id="tips-for-productive-debugging-with-gdb"><a class="markdownIt-Anchor" href="#tips-for-productive-debugging-with-gdb"></a> <a href="https://metricpanda.com/tips-for-productive-debugging-with-gdb">Tips For Productive Debugging With GDB</a></h3><p>A very beautifully crafted GDB init file. Worth taking a look.</p><h3 id="the-definitive-guide-to-python-exceptions"><a class="markdownIt-Anchor" href="#the-definitive-guide-to-python-exceptions"></a> <a href="https://julien.danjou.info/blog/2016/python-exceptions-guide">The Definitive Guide to Python Exceptions</a></h3><p>From the author of ‘The Hacker’s Guide to Python’.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reading&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reading&quot;&gt;&lt;/a&gt; Reading&lt;/h1&gt;
&lt;h3 id=&quot;a-bit-of-python&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-08</title>
    <link href="https://blog.kevinhu.me/2016/08/15/Reading-Summary-2016-08/"/>
    <id>https://blog.kevinhu.me/2016/08/15/Reading-Summary-2016-08/</id>
    <published>2016-08-16T04:51:14.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reading"><a class="markdownIt-Anchor" href="#reading"></a> Reading</h1><h3 id="alan-kays-reading-list"><a class="markdownIt-Anchor" href="#alan-kays-reading-list"></a> <a href="http://www.squeakland.org/resources/books/readingList.jsp">Alan Kay’s Reading List</a></h3><p>If this site is reliable, this is Alan Kay’s reading list for all his students. He’s a great thinker, not just in Computer Science, but human intelligence in general. His list is a constant reminder how much I’m trailing the great minds of this generation, and how much I should pick up the pace in reading.</p><h2 id="how-to-use-your-full-brain-when-writing-code"><a class="markdownIt-Anchor" href="#how-to-use-your-full-brain-when-writing-code"></a> <a href="http://chrismm.com/blog/how-to-use-your-full-brain-when-writing-code/">How to use your full brain when writing code</a></h2><p>Tips on being an efficient programmer.</p><h1 id="digital-rights"><a class="markdownIt-Anchor" href="#digital-rights"></a> Digital Rights</h1><h3 id="how-technology-hijacks-peoples-minds-from-a-magician-and-googles-design-ethicist"><a class="markdownIt-Anchor" href="#how-technology-hijacks-peoples-minds-from-a-magician-and-googles-design-ethicist"></a> <a href="https://medium.com/swlh/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.c9i8kx8cg">How Technology Hijacks People’s Minds -from a Magician and Google’s Design Ethicist</a></h3><p>Interestingly how big companies like Facebook and Google use techniques to enchant you to stay on their page for more time, or click on more of their links. I think it’s an interesting read that raises our awareness against cases such tricks, and help us defend ourselves from such exploitation.</p><h3 id="reweaving-the-web"><a class="markdownIt-Anchor" href="#reweaving-the-web"></a> <a href="http://www.economist.com/news/business/21700642-slew-startups-trying-decentralise-online-world-reweaving-web?fsrc=scn/tw/te/pe/ed/reweavingtheweb">Reweaving the web</a></h3><p>How a slew of new startup decide to use the latest technology such as “Blockchain” and “Ethereum” to decentralize the key web infrastructures and the World Wide Web they support, to compete against giant cooperations like Google and Facebook. It’s an interesting to trend to keep an eye on, but so far I don’t know if I have the optimism that they’ll succeed.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reading&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#reading&quot;&gt;&lt;/a&gt; Reading&lt;/h1&gt;
&lt;h3 id=&quot;alan-kays-reading-list&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-04</title>
    <link href="https://blog.kevinhu.me/2016/05/06/Reading-Summary-2016-04/"/>
    <id>https://blog.kevinhu.me/2016/05/06/Reading-Summary-2016-04/</id>
    <published>2016-05-06T06:34:31.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="programming"><a class="markdownIt-Anchor" href="#programming"></a> Programming</h1><h3 id="eli-benderskys-website"><a class="markdownIt-Anchor" href="#eli-benderskys-website"></a> <a href="http://eli.thegreenplace.net/">Eli Bendersky’s Website</a></h3><p>Eli Bendersky’s blog has always been a must-read to me. He never fails to regularly come up with posts of interesting and insightful ideas, or detailed tutorials.</p><p>He also actively participates in LLVM-dev mailing list and based on his blogs, has board interests in programming language, computer systems and etc…</p><h1 id="computer-science"><a class="markdownIt-Anchor" href="#computer-science"></a> Computer Science</h1><h3 id="what-is-hci-research-and-what-is-its-relationship-to-computer-science"><a class="markdownIt-Anchor" href="#what-is-hci-research-and-what-is-its-relationship-to-computer-science"></a> <a href="http://www.pgbovine.net/what-is-hci-research.htm">What is HCI research? And what is its relationship to computer science?</a></h3><p>Phillip Guo is another one of my favorite bloggers. This time he wrote an intro to HCI research.</p><span id="more"></span><hr /><p>I haven’t read extensively from books or blogs recently, which is a shame. I shall definitely invest more time in reading and expanding knowledge.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;programming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#programming&quot;&gt;&lt;/a&gt; Programming&lt;/h1&gt;
&lt;h3 id=&quot;eli-benderskys-website&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#eli-benderskys-website&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://eli.thegreenplace.net/&quot;&gt;Eli Bendersky’s Website&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Eli Bendersky’s blog has always been a must-read to me. He never fails to regularly come up with posts of interesting and insightful ideas, or detailed tutorials.&lt;/p&gt;
&lt;p&gt;He also actively participates in LLVM-dev mailing list and based on his blogs, has board interests in programming language, computer systems and etc…&lt;/p&gt;
&lt;h1 id=&quot;computer-science&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#computer-science&quot;&gt;&lt;/a&gt; Computer Science&lt;/h1&gt;
&lt;h3 id=&quot;what-is-hci-research-and-what-is-its-relationship-to-computer-science&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-hci-research-and-what-is-its-relationship-to-computer-science&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.pgbovine.net/what-is-hci-research.htm&quot;&gt;What is HCI research? And what is its relationship to computer science?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Phillip Guo is another one of my favorite bloggers. This time he wrote an intro to HCI research.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Avoid Nasal Demons</title>
    <link href="https://blog.kevinhu.me/2016/02/21/Avoid-Nasal-Damons/"/>
    <id>https://blog.kevinhu.me/2016/02/21/Avoid-Nasal-Damons/</id>
    <published>2016-02-21T07:31:27.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently my colleague and I were working to port V8 JS engine as one of our benchmarks. We used it as it’s a widely-used library on devices we cared about, and we believed it’s a well-maintained, high code quality project. Or at least we thought.</p><span id="more"></span><p>The very recent GCC 6.0 version in trunk, however, will produce bad binary for a relatively stable version of V8 with <code>-O3</code> flag enabled. The output binary will segfault on some of the very basic tests. At first we immediately assumed it was a bug from the bleeding-edge GCC, and submitted the bug report to the community, which responded promptly (within half an hour, that’s incredible speed. Kudos for GCC), that the problem resulted from an undefined behavior in V8. The problem roots in the fact that some V8 code is dereference null object pointers to access member functions. You can even see in their C++ code comparing <code>this</code> to <code>NULL</code> in class member functions.</p><pre><code>if (this == NULL) &#123;   // some logic&#125;</code></pre><p>And new GCC decided to optimize it away. Cause in well-defined C++ programs, <code>this</code> will never be <code>NULL</code>.</p><p>Undefined behavior are also referred to as <a href="">Nasal Demons</a>. The “dereferencing NULL pointer” code has also been discussed in this well-written post: <a href="http://www.viva64.com/en/b/0226/">Still Comparing “this” Pointer to Null?</a>, about the hazards of using it. Somehow, from M$ MFC library, to widely used V8 JS engine, they are all using this for a happy hacking experience. This tech debt is a time bomb they plant in their code, and no one knows when it will go off. For V8 it was around Oct. 2015 when mainline trunk GCC guys decided to use this undefined behavior for optimization, which causes crashes in produced V8 binary.</p><p>Theoretically it could be worse: this can cause a security vulnerability. And the problematic code will work just fine with the last revision of GCC compiler, but not with the very next commit. It’s a nightmare for anyone to debug.</p><p>Guys in chromium project seem to be aware of this problem for some time. I quote: “Fundamentally this is fixable by making the functions static and explicitly passing the entity as parameter, but that’s a  tremendous amount of work.” See this bug:</p><p><a href="https://bugs.chromium.org/p/v8/issues/detail?id=3782">https://bugs.chromium.org/p/v8/issues/detail?id=3782</a></p><p>All coders who touched V8 code should be much smarter than I am. But somehow they just let this code slip in, and right now the bad code piles up and it’s too hard to fix. The moral of this story is: C/C++ is a very hard language to use right, and it should take much patience to learn, understand, and write correct, clean code. Without patience to learn correct code, fall to the dark side of the source one easily will.</p><p><img src="yoda-patience.jpeg" alt="Patience, you must have" /></p><p>Looks like this code has bitten other people as well. And they are from quite a while ago:</p><p><a href="https://jira.mongodb.org/browse/SERVER-15182">https://jira.mongodb.org/browse/SERVER-15182</a></p><p><a href="https://jira.mongodb.org/browse/SERVER-15306">https://jira.mongodb.org/browse/SERVER-15306</a></p><p>Attached is a pretty good presentation on undefined C/C++ code:</p><p><a href="http://www.slideshare.net/linaroorg/bkk16503-undefined-behavior-and-compiler-optimizations-why-your-program-stopped-working-with-a-newer-compiler">http://www.slideshare.net/linaroorg/bkk16503-undefined-behavior-and-compiler-optimizations-why-your-program-stopped-working-with-a-newer-compiler</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently my colleague and I were working to port V8 JS engine as one of our benchmarks. We used it as it’s a widely-used library on devices we cared about, and we believed it’s a well-maintained, high code quality project. Or at least we thought.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://blog.kevinhu.me/categories/Programming/"/>
    
    
      <category term="Undefined Behavior" scheme="https://blog.kevinhu.me/tags/Undefined-Behavior/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-02</title>
    <link href="https://blog.kevinhu.me/2016/02/20/Reading-Summary-2016-01/"/>
    <id>https://blog.kevinhu.me/2016/02/20/Reading-Summary-2016-01/</id>
    <published>2016-02-21T02:08:07.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="programming"><a class="markdownIt-Anchor" href="#programming"></a> Programming</h1><h3 id="a-critique-of-how-to-c-in-2016-by-matt"><a class="markdownIt-Anchor" href="#a-critique-of-how-to-c-in-2016-by-matt"></a> <a href="https://github.com/Keith-S-Thompson/how-to-c-response/blob/master/README.md">A critique of “How to C in 2016” by Matt</a></h3><p>A good review as well as critique to the original <a href="https://matt.sh/howto-c">“How to C in 2016”</a>, debunking some myths, and making suggestions on how to really code in C.</p><h1 id="miscellany"><a class="markdownIt-Anchor" href="#miscellany"></a> Miscellany</h1><h3 id="list-of-common-misconceptions"><a class="markdownIt-Anchor" href="#list-of-common-misconceptions"></a> <a href="https://en.m.wikipedia.org/wiki/List_of_common_misconceptions">List of Common Misconceptions</a> from Wikipedia.</h3><h3 id="best-of-2015-the-social-network-illusion-that-tricks-your-mind"><a class="markdownIt-Anchor" href="#best-of-2015-the-social-network-illusion-that-tricks-your-mind"></a> <a href="https://www.technologyreview.com/s/544786/best-of-2015-the-social-network-illusion-that-tricks-your-mind/">Best of 2015: The Social-Network Illusion That Tricks Your Mind</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;programming&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#programming&quot;&gt;&lt;/a&gt; Programming&lt;/h1&gt;
&lt;h3 id=&quot;a-critique-of-how-to-c-in-2016-by-matt&quot;&gt;
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Social" scheme="https://blog.kevinhu.me/tags/Social/"/>
    
      <category term="Coding" scheme="https://blog.kevinhu.me/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2015-12</title>
    <link href="https://blog.kevinhu.me/2015/12/31/Reading-Summary-2015-12/"/>
    <id>https://blog.kevinhu.me/2015/12/31/Reading-Summary-2015-12/</id>
    <published>2015-12-31T07:30:43.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frontend"><a class="markdownIt-Anchor" href="#frontend"></a> Frontend</h1><h3 id="how-to-set-up-a-web-development-environment-with-react-babel-webpack-and-javascript-es6-philip-guo"><a class="markdownIt-Anchor" href="#how-to-set-up-a-web-development-environment-with-react-babel-webpack-and-javascript-es6-philip-guo"></a> <a href="http://www.pgbovine.net/react-babel-webpack-javascript-es6-setup.htm">How to set up a Web development environment with React, Babel, Webpack, and JavaScript ES6 - Philip Guo</a></h3><h3 id="minimal-fuss-setup-for-getting-started-with-react-and-javascript-es6"><a class="markdownIt-Anchor" href="#minimal-fuss-setup-for-getting-started-with-react-and-javascript-es6"></a> <a href="http://www.pgbovine.net/react-es6-js-setup-minimal.htm">Minimal fuss setup for getting started with React and JavaScript ES6</a></h3><p>The minimal fuss setup for frontend development, from Philip, one of my favorite professor, programmer and bloggers.</p><span id="more"></span><h1 id="compiler"><a class="markdownIt-Anchor" href="#compiler"></a> Compiler</h1><h3 id="reverse-engineering-for-beginners"><a class="markdownIt-Anchor" href="#reverse-engineering-for-beginners"></a> <a href="http://beginners.re/">Reverse Engineering for Beginners</a></h3><p>Or rather, an intro to assembly. I’ve just took a quick glimpse on the lite version, which is x86/x86_64 MSVC assembly only. A quick review to polish the memories on x86 assembly.</p><p>The full version also contains ARM version of assembly, which is my next target.</p><h1 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h1><h3 id="pep8"><a class="markdownIt-Anchor" href="#pep8"></a> <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a></h3><p>The PEP8 Style Guide for Python Code. A good guide to writing consistently readable and beautiful Python code.</p><h1 id="miscellaneous"><a class="markdownIt-Anchor" href="#miscellaneous"></a> Miscellaneous</h1><h3 id="openpgp-for-complete-beginners"><a class="markdownIt-Anchor" href="#openpgp-for-complete-beginners"></a> <a href="http://zacharyvoase.com/2009/08/20/openpgp/">OpenPGP for Complete Beginners</a></h3><p>A good intro to openpgp if you’re a beginner or haven’t heard of it before.</p><h3 id="12-resolutions-for-programmers"><a class="markdownIt-Anchor" href="#12-resolutions-for-programmers"></a> <a href="http://matt.might.net/articles/programmers-resolutions/">12 resolutions for programmers</a></h3><p>An idea list of new year resolutions for programmers. I really like the ‘Embrace the uncomfortable’ part. Comfort is what kills you - it makes you lazy and dull, and makes your brains decay. It’s a good idea to stimulate it once in a while.</p><p>I do want to learn at least one more new programming language (or maybe pickup Haskell or/and Scheme again?), learn more about security, learn how to use vim, and learn more about non-programming (economics, philosophy, sociology and etc.?).</p><h3 id="the-bicycle-problem-how-the-illusion-of-explanatory-depth-tricks-your-brain"><a class="markdownIt-Anchor" href="#the-bicycle-problem-how-the-illusion-of-explanatory-depth-tricks-your-brain"></a> <a href="http://www.scotthyoung.com/blog/2015/12/22/illusion-of-explanatory-depth/">The Bicycle Problem: How the Illusion of Explanatory Depth Tricks Your Brain</a></h3><h3 id="feynman-technique-youtube"><a class="markdownIt-Anchor" href="#feynman-technique-youtube"></a> <a href="https://www.youtube.com/watch?v=FrNqSLPaZLc">Feynman Technique (Youtube)</a></h3><p>Scott Young explains why we acutally do not understand what we think we understand. And how to really understand by using the ‘Feynman Technique’.</p><h3 id="start-up-nation-the-story-of-israels-economic-miracle"><a class="markdownIt-Anchor" href="#start-up-nation-the-story-of-israels-economic-miracle"></a> <a href="http://www.amazon.com/Start-up-Nation-Israels-Economic-Miracle/dp/0446541478?tag=duckduckgo-d-20">Start-up Nation: The Story of Israel’s Economic Miracle</a></h3><p>I’ve read the Chinese version of this book. Very interesting insight on Israel and Jewish culture. It basically explains how Israel manage to build such a powerful nation and exert influence on global economics, politics, and technology, with limited resources and hostile environment.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;frontend&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#frontend&quot;&gt;&lt;/a&gt; Frontend&lt;/h1&gt;
&lt;h3 id=&quot;how-to-set-up-a-web-development-environment-with-react-babel-webpack-and-javascript-es6-philip-guo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#how-to-set-up-a-web-development-environment-with-react-babel-webpack-and-javascript-es6-philip-guo&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.pgbovine.net/react-babel-webpack-javascript-es6-setup.htm&quot;&gt;How to set up a Web development environment with React, Babel, Webpack, and JavaScript ES6 - Philip Guo&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;minimal-fuss-setup-for-getting-started-with-react-and-javascript-es6&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#minimal-fuss-setup-for-getting-started-with-react-and-javascript-es6&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.pgbovine.net/react-es6-js-setup-minimal.htm&quot;&gt;Minimal fuss setup for getting started with React and JavaScript ES6&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The minimal fuss setup for frontend development, from Philip, one of my favorite professor, programmer and bloggers.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Here Comes Everybody - Book Review</title>
    <link href="https://blog.kevinhu.me/2015/11/30/Here-Comes-Everybody-Book-Review/"/>
    <id>https://blog.kevinhu.me/2015/11/30/Here-Comes-Everybody-Book-Review/</id>
    <published>2015-11-30T06:52:28.000Z</published>
    <updated>2021-09-03T06:35:01.968Z</updated>
    
    <content type="html"><![CDATA[<p>Just finished Clay Shirky’s <a href="https://books.google.com/books/about/Here_Comes_Everybody.html?id=mafZyckH_bAC"><em>Here Comes Everybody</em></a>, which I think it’s a very interesting book. The author shared his insights on how the Internet effectively gathers the power of people, and how it is rapidly reshaping the society today. Book starts with a story on how Internet helps a lady to regain her lost cellphone with the assistance and pressure from people online, and expands discussion to what why it could happen, and what we should do about it. The world is smaller and people are closer than ever before, for better or worse, because of technologies. In this book, the author carefully analyzed ways Internet could affect our lives, what it means to the world.</p><p>I listed several observations the authors provided in this book, which I find very interesting.</p><span id="more"></span><h2 id="mass-amateurization"><a class="markdownIt-Anchor" href="#mass-amateurization"></a> Mass Amateurization</h2><p>The Internet provides most people the ability to access information from everybody else, which makes everyone a media outlet. It has always been a trend that new technologies lower the barriers of professions, and causes mass amateurization. Just like ancient scribes has been replaced by Gutenberg printing technology, the technological barriers of printing, editing, distributing news and etc. has been lowered by the invention of Internet, and made accessible to the public instead of the elite few, blurring the lines between amateurs and professionals.</p><h2 id="publish-then-filter"><a class="markdownIt-Anchor" href="#publish-then-filter"></a> Publish, Then Filter</h2><p>One outcome of mass amateurization is that the contents provided by the general public is often not of good quality as professionals. However, the accessibility of the Internet has extremely lowered the costs of publishing, and the new form of media has adapted to the ‘publish, then filter’ pattern.</p><h2 id="power-law-distribution"><a class="markdownIt-Anchor" href="#power-law-distribution"></a> Power Law Distribution</h2><p>– “Fewer than two percent of the Wikipedia users ever contribute, yet that is enough to create profound value for millions of users.”</p><p>The distribution of participation in large projects always follow power law: the most active contributor contributes ten, to hundreds of times more than average contributors. And the larger the project. This is true for almost all online participants. Most Wikipedia’s pages are contributed by a handful few, but maintained by many users who contribute a few lines, or fix some typos. Most large open source projects are maintained by a few core developers, yet receive small contributions from everywhere. Interestingly, I quote the book: “most large social experiments are engines for harnessing inequality rather than limiting it.”</p><h2 id="motivation-to-participate"><a class="markdownIt-Anchor" href="#motivation-to-participate"></a> Motivation To Participate</h2><p>Before Wikipedia the founders started off their ideas of an open online encyclopedia by creating a site called <a href="https://en.wikipedia.org/wiki/Nupedia">Nupedia</a>, with contents contributed from experts only. Apparently this experiment failed, but the succeeding non-profit, volunteer-only Wikipedia soon gained popularity. One of the many interesting questions about Wikipedia is: what gave people the motivation to contribute?</p><p>The author’s answer is: the love to Wikipedia. 'When people care enough, they can come together and accomplish things of a scope and longevity that were previously impossible; they can do big things for love.&quot;</p><p>Wikipedia provides a power engine (the wiki engine) to protect the love from contributors. Wiki allows revisions and histories, thus made iterative improvements possible, and at the same maintains history versions to keep wiki pages from catastrophic damages from evil-minded people. Together they are indispensable ingredients to Wikipedia’s success.</p><h2 id="promise-tool-bargain"><a class="markdownIt-Anchor" href="#promise-tool-bargain"></a> Promise, Tool, Bargain</h2><p>“The order of promise, tool, and bargain is also the order in which they matter most to the success of any given group.”</p><p>The promise of a group provides the ideology for one group and is the main reason why people are willing to participate. It sets the tone for this group activity. “Let’s try to see if we can come up with something together”, is actually the very first promise Torvalds put in the mail introducing his toy OS Linux. It was not as sweeping as a promise like “Let’s make a world-changing Operating System together” (although it did at last), but it provides just enough interest to people for this small infant project.</p><p>Tools define how interactions happen among the groups, setting tones for interactions. A wiki is good for shared knowledge and judgment, while a mailing list is more convenient for open discussions.</p><p>The bargain is more like the adjustment to the culture inside one group. “We expect politeness of one another, and we rebuke the impolite” is a bargain’s most likely creating a culture which is friendly and respecting.</p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>This is an interesting book on how large groups, especially groups on Internet works, and how the “wisdom of the crowd” is collected, and should be collected. As my energy is so limited, I can’t even list out all the important ideas in it. This post is my best effort. Anyone who’s interested in building a society online might benefit from this book. In all it might be interesting to take a look at.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just finished Clay Shirky’s &lt;a href=&quot;https://books.google.com/books/about/Here_Comes_Everybody.html?id=mafZyckH_bAC&quot;&gt;&lt;em&gt;Here Comes Everybody&lt;/em&gt;&lt;/a&gt;, which I think it’s a very interesting book. The author shared his insights on how the Internet effectively gathers the power of people, and how it is rapidly reshaping the society today. Book starts with a story on how Internet helps a lady to regain her lost cellphone with the assistance and pressure from people online, and expands discussion to what why it could happen, and what we should do about it. The world is smaller and people are closer than ever before, for better or worse, because of technologies. In this book, the author carefully analyzed ways Internet could affect our lives, what it means to the world.&lt;/p&gt;
&lt;p&gt;I listed several observations the authors provided in this book, which I find very interesting.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
      <category term="Internet" scheme="https://blog.kevinhu.me/tags/Internet/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2015-11</title>
    <link href="https://blog.kevinhu.me/2015/11/11/Reading-Summary-2015-11/"/>
    <id>https://blog.kevinhu.me/2015/11/11/Reading-Summary-2015-11/</id>
    <published>2015-11-12T05:20:46.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="compilers"><a class="markdownIt-Anchor" href="#compilers"></a> Compilers</h1><h3 id="directed-graph-traversal-orderings-and-applications-to-data-flow-analysis"><a class="markdownIt-Anchor" href="#directed-graph-traversal-orderings-and-applications-to-data-flow-analysis"></a> <a href="http://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/">Directed graph traversal, orderings and applications to data-flow analysis</a></h3><p>On the graph traversal and their efficiency.</p><ul><li>Pre-order depth-first-search</li><li>Reverse post-order depth-first-search</li></ul><p>This could be a very helpful reference when designing data-flow analysis on programs.</p><h1 id="programming"><a class="markdownIt-Anchor" href="#programming"></a> Programming</h1><h3 id="semantic-version"><a class="markdownIt-Anchor" href="#semantic-version"></a> <a href="http://semver.org/">Semantic Version</a></h3><p>How to use version numbers in a sensible way: the MAJOR.MINOR.PATCH format. And I quote:</p><blockquote><ol><li>MAJOR version when you make incompatible API changes.</li><li>MINOR version when you add functionality in a backwards-compatible manner.</li><li>PATCH version when you make backwards-compatible bug fixes.</li></ol></blockquote><h1 id="internet"><a class="markdownIt-Anchor" href="#internet"></a> Internet</h1><h3 id="im-a-privacy-advocate-but-i-still-use-windows-10-and-google-now"><a class="markdownIt-Anchor" href="#im-a-privacy-advocate-but-i-still-use-windows-10-and-google-now"></a> <a href="http://lifehacker.com/im-a-privacy-advocate-but-i-still-use-windows-10-and-g-1723611163">I’m a Privacy Advocate, but I Still Use Windows 10 and Google Now</a></h3><p>Your personal data is the fuel to power the Internet today, and how should we face it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;compilers&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#compilers&quot;&gt;&lt;/a&gt; Compilers&lt;/h1&gt;
&lt;h3 id=&quot;directed-graph-traversal-orderings-and-applica
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary in 2015/10</title>
    <link href="https://blog.kevinhu.me/2015/10/24/Reading-Summary-in-2015-10/"/>
    <id>https://blog.kevinhu.me/2015/10/24/Reading-Summary-in-2015-10/</id>
    <published>2015-10-24T06:38:05.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="compilers"><a class="markdownIt-Anchor" href="#compilers"></a> Compilers</h1><h3 id="troubles-with-gcc-signed-integer-overflow-optimization"><a class="markdownIt-Anchor" href="#troubles-with-gcc-signed-integer-overflow-optimization"></a> <a href="http://thiemonagel.de/2010/01/signed-integer-overflow/">Troubles with GCC signed integer overflow optimization</a></h3><h3 id="bug-30475-assertint100int-optimized-away"><a class="markdownIt-Anchor" href="#bug-30475-assertint100int-optimized-away"></a> <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=30475">BUG 30475 - assert(int+100&gt;int) optimized away</a></h3><p>An interesting ‘bug’ in some versions of GCC (and Clang as well) implementation. Since it’s <strong>‘undefined’</strong> behavior after all, compiler is not obliged to implement it as a defined behavior. Use <code>-fwrapv</code> flag in GCC to inform the compiler that integer value wraps.</p><h1 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h1><h3 id="profiling-python-in-production"><a class="markdownIt-Anchor" href="#profiling-python-in-production"></a> <a href="https://nylas.com/blog/performance">Profiling Python in Production</a></h3><p>Signal timeout for every small amount of time (say, 1ms in this case) and record the current stack, and we can infer time spent in each function precisely enough. A smart way of profiling large Python programs.</p><p>Note: python signal callback passes signal type and signal handler, and signal handler takes signal number and current stack frame.</p><h3 id="hitchhikers-guide-to-python"><a class="markdownIt-Anchor" href="#hitchhikers-guide-to-python"></a> <a href="http://docs.python-guide.org/en/latest/">Hitchhiker’s Guide to Python</a></h3><p>Great book to Python, covering code style, best practices and scenario guide. Just started reading it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;compilers&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#compilers&quot;&gt;&lt;/a&gt; Compilers&lt;/h1&gt;
&lt;h3 id=&quot;troubles-with-gcc-signed-integer-overflow-opti
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Python" scheme="https://blog.kevinhu.me/tags/Python/"/>
    
      <category term="Compilers" scheme="https://blog.kevinhu.me/tags/Compilers/"/>
    
  </entry>
  
  <entry>
    <title>A Small Discovery In C Linker</title>
    <link href="https://blog.kevinhu.me/2015/04/16/A-Small-Discovery-In-C/"/>
    <id>https://blog.kevinhu.me/2015/04/16/A-Small-Discovery-In-C/</id>
    <published>2015-04-17T04:01:33.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>C language is an old-school programming language, learned by almost all professional programmers. Still, it never failed to surprise me each time I dig in a little deeper, as it’s full of small details, some hardly noticed, such as this one I recently discovered by accident.</p><span id="more"></span><p>Consider the following two C files:</p><p>foo.c:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(int c, int d, int e)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;The param is %d, %d, %d\n&quot;, c, d, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int foo(char c);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a = foo(100);</span><br><span class="line"></span><br><span class="line">    printf(&quot;The return value of foo is %d\n&quot;, a);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At first sight, you’d probably laugh and think: “What the heck is this? There are some very elementary mistakes that a CS101 student wouldn’t even make. They definitely wouldn’t compile.”</p><p>Is it really so?</p><p>Try the following command to compile them:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc hello.c foo.c -o hello</span><br></pre></td></tr></table></figure><p>Or if you’re an LLVM fan:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang hello.c foo.c -o hello</span><br></pre></td></tr></table></figure><p>How do they complain?</p><p>None. I’ve tested this on my Linux Ubuntu machine with gcc-4.8, gcc-4.9, and clang-3.5. None of them complained a thing. They got successfully compiled!</p><p>Surprise? Not really. If you’re a expert in C and how compiler works, you’d think it’s quite normal. Well, I’m not. So I was quite astonished when I first saw this.</p><p>Why would this happen?</p><p>Well. Simply put, it’s because C linkers don’t do type checking for functions. C files are first compiled into object files, exposing external symbol names for the linker. In this particular case, <code>main.c</code> exposes <code>main</code> function definition and <code>foo</code> function declaration, and <code>foo.c</code> exposes <code>foo</code> function definition. When the C linker notice <code>foo</code> is only a declaration in <code>main.c</code>, it would search for its definitions in all the externally exposed symbols in all object files, and it finds a hit in the object file that <code>foo.c</code> compiles to. As the function symbol in the object file records function names only, no return type or parameter type checking is done. The linker happily accepts this unmatching <code>foo</code> as a match and use it in main function.</p><p>Somehow, C++ does name mangling to preserve function types and any type unmatching for functions could be avoided. This won’t compile for any C++ compilers. Try g++ or clang++. Some other compilers or IDEs with static checkings may also notice this error.</p><p>So, what would happen if you actually run it?</p><p>I got the following results in one run:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The param is 100, -1549285384, -1549285368</span><br><span class="line">The return value of foo is 43</span><br></pre></td></tr></table></figure><p>It’s easy to understand the 100 output. The following two shall be the value of d and e. And as <code>main</code> doesn’t pass any parameters, the <code>foo</code> function will happily read whatever on the program stack where these two parameters should be. And in this case, it shall be garbage.</p><p>And what about that 43 returned from the <code>foo</code> function? That doesn’t look like garbage. Actually if you run this broken piece of program for enough times, you’ll notice this value is always somewhat around 30~50. So this mysterious number could be something more than garbage. Is it the meaning to your life? No, that’s 42. Is it something <a href="http://bigbangtheory.wikia.com/wiki/The_43_Peculiarity">on the wall of Sheldon’s secret room</a>? Probably.</p><p>So what is it exactly?</p><p>After poking around in gdb for a while, I confirmed my guess that this is actually the return value of <code>printf</code> inside of <code>foo</code>. As on x86 machines, most of the time C program uses <code>eax</code> register to carry return values, <code>main</code> function loads <code>a</code>’s value from <code>eax</code> when it tries to read the return value of <code>foo</code>. As <code>foo</code> has void return type, this register is untampered after return of <code>printf</code> inside <code>foo</code>, and saved directly to integer <code>a</code> in <code>main</code>.</p><p>The following is the dump inside gdb. This time I have 31 as <code>foo</code>’s return value.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Run till exit from #0  __printf (format=0x400637 &quot;The param is %d, %d, %d\n&quot;) at printf.c:32</span><br><span class="line">The param is 100, -7816, -7800</span><br><span class="line">foo (c=100, d=-7816, e=-7800) at foo.c:6</span><br><span class="line">6       &#125;</span><br><span class="line">Value returned is $1 = 31</span><br><span class="line">(gdb) info registers</span><br><span class="line">info registers</span><br><span class="line">rax            0x1f     31</span><br><span class="line">rbx            0x0      0</span><br><span class="line">rcx            0x1e     30</span><br><span class="line">(gdb) info register eax</span><br><span class="line">info register eax</span><br><span class="line">eax            0x1f     31</span><br></pre></td></tr></table></figure><p>We all know the return value of <code>printf</code> is the number of characters written to the stdout. So, the mysterious return value is actually the number of characters printed out in the first sentence. You can count to confirm, and don’t forget the return character.</p><h2 id="afterthoughts"><a class="markdownIt-Anchor" href="#afterthoughts"></a> Afterthoughts</h2><p>I remember someone joked that C is but a high-level syntax sugar for assembly. Now it looks to me that it’s also low level enough that it exposes lots of features in assembly. It’s never an easy task to understand all these very little details of C, as well as any other languages, but it’s probably a must if one wishes to become a qualified programmer in it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C language is an old-school programming language, learned by almost all professional programmers. Still, it never failed to surprise me each time I dig in a little deeper, as it’s full of small details, some hardly noticed, such as this one I recently discovered by accident.&lt;/p&gt;
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
    
      <category term="C" scheme="https://blog.kevinhu.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>BitHacks</title>
    <link href="https://blog.kevinhu.me/2015/03/07/Bithacks/"/>
    <id>https://blog.kevinhu.me/2015/03/07/Bithacks/</id>
    <published>2015-03-08T03:22:30.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve recently come across a very interesting article on <a href="https://graphics.stanford.edu/~seander/bithacks.html">BitHacks</a> – the low level magics for bit level operations. Some of the tricks introduced here are really excellently clever, some of them may even make you exclaim for their genius!</p><p>I had a lot of fun reading through some of the BitHacks. It’s also worth noticing these BitHacks are not only for intellectual pleasures, they provide actual boosts to algorithm performance as well. When an operations is used often enough, the overall performance benefits to the whole program might be significant.</p><p>I couldn’t help but keep wondering how on earth did these clever CS guys ever come up with such algorithms. I tried very hard to find some answers and the following are some patterns I noticed in this attempt. Still, honestly, I highly doubt if I can come up with same solutions myself if I ever run into these problems again. Some of them are just to clever.</p><span id="more"></span><h2 id="some-examples"><a class="markdownIt-Anchor" href="#some-examples"></a> Some examples</h2><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign">Compute the sign of an integer</a></li></ul><p>The beauty part of bit hackings is that most of the times they avoid branching in CPU, which could be expensive for modern pipelining CPUs, as a misprediction in branching means flushing operations, causing waste in time and power.</p><p>For example, to compute the sign of an integer, instead of using branching, we can use the following code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> v;       <span class="comment">// the integer</span></span><br><span class="line"><span class="keyword">int</span> sign;    <span class="comment">// the sign of the integer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CHAR_BIT is the number of bits per byte (normally 8). </span></span><br><span class="line"><span class="comment">// But for compatibility issues, here uses CHAR_BIT instead.</span></span><br><span class="line"></span><br><span class="line">sign = - (v &lt; <span class="number">0</span>);   <span class="comment">// sign = -1 when v is negative</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return -1 when v is negative, 0 when 0, and 1 when positive:</span></span><br><span class="line"><span class="comment">// cast v to be unsigned, right shift the sign bit to the LSB, cast it back</span></span><br><span class="line"><span class="comment">// to integer, and assign the sign.</span></span><br><span class="line">sign = (v != <span class="number">0</span>) | -(<span class="keyword">int</span>)((<span class="keyword">unsigned</span>)((<span class="keyword">int</span> v) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or for better speed</span></span><br><span class="line">sign = (v &gt; <span class="number">0</span>) - (v &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#DetermineIfPowerOf2">Determine if integer is power of 2</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// One interesting feature of an integer to the power of 2:</span></span><br><span class="line"><span class="comment">// v &amp; (v - 1) == 0</span></span><br><span class="line"><span class="comment">// 0 is also incorrectly considered to be a power of 2 with</span></span><br><span class="line"><span class="comment">// the above equation, but the fix is simple</span></span><br><span class="line"></span><br><span class="line">f = v &amp;&amp; !(v &amp; (v - <span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax">Find the min or max of two integers</a>.</li></ul><p>The effect shall be the same as</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max = x &gt; y ? x : y;</span><br><span class="line">min = x &lt; y ? x : y;</span><br></pre></td></tr></table></figure><p>Somehow the above approach also use branch to determine value. A BitHack way is to:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = x ^ ((x ^ y) &amp; -(x &lt; y));</span><br></pre></td></tr></table></figure><p>Amazing! Isn’t it? Here when x &lt; y, -(x &lt; y) evaluates to -1, which is all 1s in binary representation. The result will then evaluates to:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ (x ^ y)</span><br></pre></td></tr></table></figure><p>Which is y. While when x &gt; y, -(x &lt; y) evaluates to 0, and the result will be assigned x.</p><p>This is a very interesting feature of the XOR operation. Remember how XOR could be used to exchange the value of two numbers without extra memory:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;  <span class="comment">// (a ^ b) ^ b</span></span><br><span class="line">a = a ^ b;  <span class="comment">// (a ^ b) ^ a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Here a and b are exchanged</span></span><br></pre></td></tr></table></figure><p>XOR has many interesting features, and is a very important operations in BitHacks. Here’s another example.</p><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerAbs">Absolute value of an integer</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">result = (v + mask) ^ mask;</span><br></pre></td></tr></table></figure><p>When v is positive, mask is 0, result will be assigned v. And when v is negative, mask will evaluate to -1 (all 1s in binary), and the result will be (v - 1) ^ (-1). As XORing all 1s gives the NOT of an integer (v ^ -1 == ~v), the result becomes ~(v - 1). Not surprisingly, this is the negative value of v.</p><p>An alternative but similar approach is:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (v ^ mask) - mask;</span><br></pre></td></tr></table></figure><h2 id="some-observations"><a class="markdownIt-Anchor" href="#some-observations"></a> Some Observations</h2><p>I believe some general guidelines could be useful for inventing our own BitHacks could be useful, but the post did not mention any special techniques, and some of the hacks seems really ad-hoc (sure, that’s why they’re called “hacks”, right?). Nevertheless, the following is some observations I had when reading. Keeping these in mind might help the next time when inventing BitHacks.</p><h3 id="use-and-or-shift-and-masking"><a class="markdownIt-Anchor" href="#use-and-or-shift-and-masking"></a> Use AND, OR, shift and masking</h3><p>Use AND to clear the bit field, OR to set the bit field, and use shift to move important bit to the right position. Use a carefully designed mask to clear or set the fields.</p><p>An excellent example could be found in <a href="https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel">here: counting bit set, in parallel</a>.</p><p>In the example, instead of iterating all the bit fields in the given integer, we could use a mask to mask the fields, and merge the all the counts, a bit like reduce in the map-reduce. In this way, no loops are required to count the bit sets.</p><p>The operations could be explained as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first, I randomly pick a 32-bit integer to count bits set</span></span><br><span class="line"><span class="comment">// value: 0110 1000 1011 0100  0101 1001 1011 1110</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MASK1: 0101 0101 0101 0101  0101 0101 0101 0101</span></span><br><span class="line"><span class="comment">//         1 0  0 0  0 1  1 0   1 1  0 1  0 1  1 0</span></span><br><span class="line"><span class="comment">// +       0 1  1 0  1 1  0 0   0 0  1 0  1 1  1 1</span></span><br><span class="line"><span class="comment">// c   :  0101 0100 0110 0100  0101 0101 0110 1001</span></span><br><span class="line"><span class="comment">// The idea is to find the bit counts for every two bits.</span></span><br><span class="line"><span class="comment">// To achieve so, using mask and shift, we can shift the value</span></span><br><span class="line"><span class="comment">// 1 to the right and add the masked original value together,</span></span><br><span class="line"><span class="comment">// as following:</span></span><br><span class="line"></span><br><span class="line">c = ((v &gt;&gt; <span class="number">1</span>) &amp; MASK0) + (v &amp; MASK0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Although here the post uses a faster way;</span></span><br><span class="line"><span class="comment">// c = v - ((v &gt;&gt; 1) &amp; MASK0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Then add the counts for each 4 bits. The mask becomes:</span></span><br><span class="line"><span class="comment">// MASK1: 0011 0011 0011 0011  0011 0011 0011 0011</span></span><br><span class="line"></span><br><span class="line">c = ((c &gt;&gt; <span class="number">2</span>) &amp; MASK1) + (c &amp; MASK1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After this operation, then find the count in every 8 bits,</span></span><br><span class="line"><span class="comment">// and every 16 bits, and every 32 bits. The final count would</span></span><br><span class="line"><span class="comment">// be what we want.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MASK2: 0000 1111 0000 1111  0000 1111 0000 1111</span></span><br><span class="line"><span class="comment">// MASK3: 0000 0000 1111 1111  0000 0000 1111 1111</span></span><br><span class="line"><span class="comment">// MASK4: 0000 0000 0000 0000  1111 1111 1111 1111</span></span><br><span class="line"></span><br><span class="line">c = ((c &gt;&gt; <span class="number">4</span>) &amp; MASK2) + (c &amp; MASK2);</span><br><span class="line">c = ((c &gt;&gt; <span class="number">8</span>) &amp; MASK3) + (c &amp; MASK3);</span><br><span class="line">c = ((c &gt;&gt; <span class="number">16</span>) &amp; MASK4) + (c &amp; MASK4);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="xor-operation"><a class="markdownIt-Anchor" href="#xor-operation"></a> XOR operation</h3><p>The XOR operation has many interesting features which could be used cleverly in BitHacks.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value, other;</span><br><span class="line"></span><br><span class="line">value ^ <span class="number">0</span> == value;</span><br><span class="line">value ^ <span class="number">0xFFFFFFFF</span> == ~value;</span><br><span class="line">value ^ (<span class="number">-1</span>) == ~value;           <span class="comment">// same as above</span></span><br><span class="line">value ^ value == <span class="number">0</span></span><br><span class="line">value ^ (value ^ other) == other;</span><br></pre></td></tr></table></figure><p>The previous, and some following examples all uses these features to efficiently “hack the bits”. For example: exchanging values without extra memory, finding absolute value, finding the min or max of two values.</p><h3 id="twos-complements"><a class="markdownIt-Anchor" href="#twos-complements"></a> Two’s complements</h3><p>In the previous example: Absolute value of an integer, a mask was used to conditionally find the original and the negative value, by setting the mask to either 0 or all 1s, which is -1 in integer representation. The negative value of v could be found by very simple operations:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v = ~v + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// here to find the value of ~v, one could use v ^ -1.</span></span><br><span class="line"><span class="comment">// And since (v ^ 0 == v), we can easily come up with</span></span><br><span class="line"><span class="comment">// the solution to find the abs of v.</span></span><br><span class="line"></span><br><span class="line">v = (v ^ mask) - mask</span><br><span class="line"></span><br><span class="line"><span class="comment">// or its alternative, as described previously</span></span><br><span class="line">v = (v + mask) ^ mask</span><br></pre></td></tr></table></figure><p>Taking advantage of this property, we can also come up with a way to <a href="https://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate">conditionally negate a value</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (v ^ -flag) + flag;</span><br></pre></td></tr></table></figure><h3 id="lookup-table"><a class="markdownIt-Anchor" href="#lookup-table"></a> Lookup table</h3><p>A lot of complicated operations could be accomplished by using lookup tables, one example could be the counting bits set as above. Some other examples includes:</p><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#ParityLookupTable">Compute parity by lookup table</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#BitReverseTable">Reverse bits lookup table</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup">Find the log base 2 of an integer with a lookup table</a></li></ul><p>Although it might take up more space for memory, it’s often worthwhile to trade some amount of memory for speed. Memory operations may be more expensive, but considering prefetching is now prevalent in modern CPUs, fetching data from the cache is way faster than a misprediction in branch operations.</p><h2 id="afterthoughts"><a class="markdownIt-Anchor" href="#afterthoughts"></a> Afterthoughts</h2><p>There are many other interesting and mind-opening techniques, tricks and hacks to speed up your program in <a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign">this post</a>. I have a hunch that I might actually use some of them in the future, or come up with my own BitHacks with similar mindset. Before this, I didn’t even realize I could play with bit operations in C/C++ this way. Also, <a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign">this post</a> could serve as a great reference when a performance critical part needs optimization with BitHacks.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve recently come across a very interesting article on &lt;a href=&quot;https://graphics.stanford.edu/~seander/bithacks.html&quot;&gt;BitHacks&lt;/a&gt; – the low level magics for bit level operations. Some of the tricks introduced here are really excellently clever, some of them may even make you exclaim for their genius!&lt;/p&gt;
&lt;p&gt;I had a lot of fun reading through some of the BitHacks. It’s also worth noticing these BitHacks are not only for intellectual pleasures, they provide actual boosts to algorithm performance as well. When an operations is used often enough, the overall performance benefits to the whole program might be significant.&lt;/p&gt;
&lt;p&gt;I couldn’t help but keep wondering how on earth did these clever CS guys ever come up with such algorithms. I tried very hard to find some answers and the following are some patterns I noticed in this attempt. Still, honestly, I highly doubt if I can come up with same solutions myself if I ever run into these problems again. Some of them are just to clever.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://blog.kevinhu.me/categories/Algorithm/"/>
    
    
      <category term="BitHacks" scheme="https://blog.kevinhu.me/tags/BitHacks/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm I Summary</title>
    <link href="https://blog.kevinhu.me/2015/01/10/Algorithm-I-Summary/"/>
    <id>https://blog.kevinhu.me/2015/01/10/Algorithm-I-Summary/</id>
    <published>2015-01-10T07:54:07.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Finally! Just finished all the lecture videos of “Algorithm I” from Coursera, and I believe now it’s a good time to review and summarize.</p><span id="more"></span><p>All contents are based on Coursera course slides, as well as other helpful sites (Wikipedia, StackOverflow, <a href="http://algs4.cs.princeton.edu/home/">Algorithm - 4th Edition</a> from Princeton U). All pictures are from the slides and the <a href="http://algs4.cs.princeton.edu/home/">Algorithm - 4th Edition</a>.</p><h2 id="stacks-and-queues"><a class="markdownIt-Anchor" href="#stacks-and-queues"></a> Stacks and Queues</h2><p>Stacks and Queues are probably the most commonly seen data structures seen in the software. Stacks are “First-In-Last-Out”, while Queues are “First-In-First-Out”. The basic operations they support are push() and pop().</p><p>The underlying implementations could be linked-list, arrays and etc… Linked list provides with more flexible memory management, constant time operations, but brings more time overhead and memory overhead for the link operations. Arrays on the other hand, brings tricky issues of resizing, but the operations are also constant time, and has less memory overheads.</p><h2 id="priority-queues-and-heaps"><a class="markdownIt-Anchor" href="#priority-queues-and-heaps"></a> Priority Queues and Heaps</h2><h3 id="priority-queues"><a class="markdownIt-Anchor" href="#priority-queues"></a> Priority Queues</h3><p>Although often mentioned together, Priority Queue and Heap are <a href="http://en.wikipedia.org/wiki/Priority_queue">different concepts</a>. Priority Queue is an abstract data type which is like a queue or stack data structure, but is often implemented in heaps, just like lists could be implemented as arrays or linked lists.</p><p>Priority Queue, as its name suggests, could give the element with highest priority. Usually it requires O(1) performance for this operation as it’s crucial to many applications, to name a few (From course slides):</p><ul><li>Event-driven simulation [give the next event for simulation]</li><li>Graph searching [Dijkstra’s Algorithm]</li><li>Data compression</li><li>Statistics [Maintain largest M values]</li><li>Operating Systems [Load balancing, interrupt handling]</li><li>…</li></ul><h3 id="heap"><a class="markdownIt-Anchor" href="#heap"></a> Heap</h3><p>Binary Heap is one most common implementation of Priority Heap. It uses a binary tree to maintain the data relationship, and could be implemented with arrays. As shown below. (Picture from slide of <a href="https://class.coursera.org/algs4partI-006">Coursera Algorithm I Course</a>).</p><p><img src="HeapRepresentation.png" alt="Binary Heap Representation" /></p><p>A Binary Heap has the following properties:</p><ul><li>Is a complete binary tree.</li><li>Largest key is root node of binary tree, which is represented as list[1].</li><li>In array representation, the 0 node is often a dummy node, therefore,</li><li>Parent of node k is at k/2.</li><li>Children of node k are at 2k and 2k+1</li></ul><p>The following operations are supported by Binary Heap:</p><ul><li><p><strong>Insertion</strong>: To insert, add a node at the end, then swim it up. Meaning: keep comparing it with its parent, if larger than parent, then switch position with it.</p></li><li><p><strong>Deletion</strong>: Binary heap supports deletion from the root node (extract the max element). It removes the root node, then replace the root node with the last element on the last level, then sink it. Meaning: keep switching position with the larger one of its children.</p></li></ul><p>Binary Heaps, both insertion and deletion takes O(logN) time to swim or sink, which makes finding max M elements in N O(MlogN).</p><p>For Heap Sort, I’d like to categorize it together with all the sorting algorithms, described as following.</p><h2 id="sorting-algorithms"><a class="markdownIt-Anchor" href="#sorting-algorithms"></a> Sorting Algorithms</h2><h2 id="elementary-sort"><a class="markdownIt-Anchor" href="#elementary-sort"></a> Elementary Sort</h2><p>The elementary sorting algorithm part introduces <strong>Insertion Sort</strong>, <strong>Selection Sort</strong>, along with <strong>Shell Sort</strong>.</p><p><strong>Selection Sort</strong>: As name suggests, selection sort traverse the unsorted part of the list to find the minimum element, and put it in the front of the unsorted part, and consider this element sorted.</p><p>Selection Sort has O(N^2) of average time complexity, even when the list is almost sorted.</p><p><strong>Insertion Sort</strong>: For each element, keep comparing it to the element in front of it and switch position if it’s smaller than the front element, until it’s the larger one.</p><p>It has O(N^2) of average time complexity as well, but only ~N operations when the list is almost sorted, which makes it actually quite useful in certain cases.</p><p><strong>Shell Sort</strong>: The algorithm starts with sorting elements h elements apart with insertion sort, then keep decreasing h to have the list “h-sorted”, until h reaches 1, and the whole list is sorted.</p><p>With these two gap sequences, Shell Sort is known to have <a href="http://www.sorting-algorithms.com/shell-sort">O(N^3/2) average time complexity</a>, <a href="http://www.sorting-algorithms.com/shell-sort">O(Nlog(N)) time complexity</a> for nearly sorted lists, which gives it pretty good performance.The value of the gap h is commonly chosen by 3k+1, or an experiment found array of [1, 4, 10, 23, 57, 132, 301, 701]. Also as it doesn’t require function calls, it’s actually used in many cases such as embedded systems, and Linux kernel.</p><h3 id="merge-sort"><a class="markdownIt-Anchor" href="#merge-sort"></a> Merge Sort</h3><p>Merge Sort is best described recursively. It takes the following procedures to the list of elements:</p><ul><li>Divide array into two halves.</li><li>Recursively divide and sort each half.</li><li>Merge two halves in order.</li></ul><p>One important feature of Merge Sort is that, it takes O(N) of extra memory space. Also, it has so much overhead for tiny subarrays. Therefore, for small sized subarrays, Merge Sort could use Insertion Sort for speed up.</p><p>Time complexity for Merge Sort is O(NlogN). It is stable - meaning previously sorted items would not be rearranged by new sorts.</p><h3 id="quick-sort"><a class="markdownIt-Anchor" href="#quick-sort"></a> Quick Sort</h3><p>The steps for quick sort are as follows:</p><ul><li>Choose an element of the list to be the pivot.</li><li>Put all elements smaller than the pivot to the left, elements larger than the pivot to the right.</li><li>Recursively sort the left and right partition.</li><li>Join the left, pivot, and the right.</li></ul><p>Quick Sort, as its name suggests, has the <a href="http://rosettacode.org/wiki/Sorting_algorithms/Quicksort">reputation for the fastest sort</a>. It has O(NlogN) time complexity, although for certain inputs and bad pivot selection (e.g. a sorted list and first element for pivot), the worst case could be O(N^2). Also, for small subarrays, Quick Sort could use Insertion Sort to reduce overhead.</p><p>One problem with Quick Sort is that its performance decreases when dealing with lists with many identical elements. This could be solved by a variation: The 3 way Quick Sort, which separates the list into 3 separations of less-than, equal, and larger than.</p><p>Quick Sort is known as fast, and is therefore widely used in many system applications.</p><h3 id="heap-sort"><a class="markdownIt-Anchor" href="#heap-sort"></a> Heap Sort</h3><p>The idea for Heap Sort is to create a heap with all the keys, and repeatedly remove the max key. As described above, when the max value is deleted, the last element replaces the root node, and sunk down to the appropriate place.</p><p>One significant feature of Heap Sort is that: it has O(NlogN) worst-case performance. But (From Course Slides):</p><ul><li>Inner loop longer than Quick Sort.</li><li>Cache unfriendly.</li><li>Not stable.</li></ul><h3 id="summary-for-sorting"><a class="markdownIt-Anchor" href="#summary-for-sorting"></a> Summary for Sorting</h3><p>There is an website introducing the details of different sorting algorithms, with sorting animations: <a href="http://www.sorting-algorithms.com/">http://www.sorting-algorithms.com/</a> . The following table summarizes some of the common sorting algorithms.</p><p>| Algorithm | Average Time | Worst Time | Extra Space | Adaptive | Stable ||-----------------------------------|| Selection Sort | O(N^2) | O(N^2) | O(1) | No | No || Insertion Sort | O(N^2) | O(N^2) | O(1) | Yes | Yes || Shell Sort | O(N^3/2) | O(N^2) | O(1) | Yes | No || Merge Sort | O(NlogN) | O(N^2) | O(N) | No | Yes || Quick Sort | O(NlogN) | O(N^2) | O(1) | No | No || 3-Way Quick Sort | O(NlogN) | O(N^2) | O(1) | Yes | No || Heap Sort | O(NlogN) | O(NlogN) | O(1) | No | No |</p><h2 id="binary-search-trees"><a class="markdownIt-Anchor" href="#binary-search-trees"></a> Binary Search Trees</h2><p>A Binary Search Tree is a Binary Tree in Symmetric Order. Meaning: each node has a key, that’s larger than all keys in its left subtree, but smaller than all keys in its right subtree.</p><p><strong>Search</strong>: Searching in Binary Search Tree is intuitive: if search key is less than node, go left, if greater, go right, if equal, search hit.</p><p>Search in Binary Tree has average time complexity of O(logN) for N elements.</p><p><strong>Insert</strong>: Inserting in Binary Search Tree is similar to search. It keeps finding in the tree until see NULL node.</p><p>Both Search Insertion requires O(logN) of time in average, but could be O(N) in worst case when the tree is unbalanced (e.g. The tree is inserted in sequential order).</p><p><strong>Deletion</strong>: One famous deletion technique for Binary Search Tree is the <a href="http://algs4.cs.princeton.edu/32bst/">Hibbard deletion</a>. As Hibbard deletion describes, when deleting:</p><ul><li><strong>Node with one child:</strong> Delete the node and replace it with its child.</li><li><strong>Node with two children:</strong><ul><li>Find the node t to delete.</li><li>Find successor x of t, so that x has no left child (the min in t’s right subtree).</li><li>Put x in t’s spot.</li></ul></li></ul><p>See below:</p><p><img src="bst-delete.png" alt="BST deletion" /></p><p>Deletion is said to have O(sqrt(N)) average time complexity (From course slides), but still suffers from performance worsening when the tree is unbalanced. One way to tackle this issue is to use a Balanced Search Tree, as described below.</p><h2 id="balanced-search-trees"><a class="markdownIt-Anchor" href="#balanced-search-trees"></a> Balanced Search Trees</h2><h3 id="2-3-search-trees"><a class="markdownIt-Anchor" href="#2-3-search-trees"></a> 2-3 Search Trees</h3><p>2-3 Tree has the following properties:</p><ul><li>Allow 1 or 2 keys per node.<ul><li>2-node: 1 key, 2 children.</li><li>3-node: 2 keys, 3 children.</li></ul></li><li>In symmetric order.</li><li>Perfect balance: every path from root to null link has same length.</li></ul><p>2-3 Tree is designed to keep the tree perfectly balanced, since all its transformation keeps the tree symmetric.</p><p><strong>Insertion for 2-3 Search Tree:</strong></p><ul><li>Search and find the node to insert in, as in Binary Search Tree.</li><li>If the node is a 2 node, then insert the key to make it a 3 node.</li><li>If the node is a 3 node, then insert the key to make it a temp 4 node, then:<ul><li>Split the 4 node, percolate the middle node up to the parent.</li><li>Split the rest 2 keys as two separate 2 nodes.</li><li>If the parent becomes 4 node, recursively split the parent node in the same way.</li></ul></li></ul><p>As shown below:</p><p><img src="23tree-insert3c.png" alt="2-3 Tree Insertion to 3 Node" /></p><p>The idea for 2-3 Tree is a beautiful idea, but complicated in implementation. So there are variations and derivations of implementations. Red-Black Tree is one of them.</p><h3 id="red-black-trees"><a class="markdownIt-Anchor" href="#red-black-trees"></a> Red-Black Trees</h3><p>One variation of Red-Black Tree discussed in the course is called the Left-Leaning Red-Black Tree. (Guibas-Sedgewick 1979 and Sedgewick 2007, and Sedgewick is the instructor of this online course!)</p><p>LLRBT uses a red node to represent the glue for 3-nodes in 2-3 Tree. Therefore it has the following properties:</p><ul><li>No node has two red links connected to it.</li><li>Every path from root to null link has the same number of black links. (Because the corresponding 2-3 Tree is balanced.)</li><li>Red links lean left.</li></ul><p>To understand the operations in LLRBT, we can build all operations with the following basic operations:</p><ul><li><strong>Left Rotation:</strong> Orient a temporarily right-leaning red link to lean left.as follows:<img src="redblack-left-rotate.png" alt="Left Rotate In LLRBT" /></li><li><strong>Right Rotation:</strong> Same as Left Rotation, rotate node to the right.</li><li><strong>Color Flip:</strong> If a node has two red children, flip the color of children to black and mark itself red.</li></ul><p>And with these basic transformations, we can operate with insertion on the LLRBT, in case of following scenarios:</p><ul><li><strong>Inserting into a single node</strong> (A 2 node in 2-3 Tree):<ul><li><strong>Insert to the left:</strong> Add to the left, and mark the new node red.</li><li><strong>Insert to the right:</strong> Add to the right, and since there’s a right-leaning red link, left rotate its parent node, to make the parent a left-leaning red node.</li></ul></li><li><strong>Inserting into a 3 node</strong>:<ul><li><strong>To the left of a 3 node:</strong> This makes its parent in the middle of two left leaning red links. Right rotate the parent node, and flip color.</li><li><strong>To the center of a 3 node:</strong> This makes its parent in the middle of a two red links, the parent node is left leaning, and the inserted node is left leaning. Left rotate the parent node, then right flip the inserted node, then flip color.</li><li><strong>To the right of a 3 node:</strong> This makes the parent has two red children, then flip color.</li></ul></li></ul><p>As the graph shows:</p><p><img src="LLRBT_insert_3node.png" alt="Basic operations for inserting into 3-node in LLRBT" /></p><p>Although the operations in each cases look really complicated, the actual code could be made concise and elegant using with recursion. To keep in mind that all these operations are used to guarantee that the tree is fully balanced, and there are no right leaning red links.</p><p>The Java example for inserting in LLRBT from the course slide is shown as follows. The insertion searches in the tree for appropriate insert position, and add a new red node at the end. Then determine if the node is violating the properties for LLRBT (Right leaning red node? Two consecutive red links? …), and operate on the node accordingly.</p><p>Code example for LLRBT insertion in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == NULL) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, RED);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) h.left = put(h.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) h.right = put(h.right, key, val);</span><br><span class="line">    <span class="keyword">else</span>              h.val = val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left))    h = rotateLeft(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; !isRed(h.right))    flipColors(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="symbol-tables-and-hash-tables"><a class="markdownIt-Anchor" href="#symbol-tables-and-hash-tables"></a> Symbol Tables And Hash Tables</h2><p>The Symbol Table, again, is an abstract data type, which maps from keys to values. It supports operations of insertion, deletion, search by key, and etc… It’s commonly implemented with Hash Tables, which is used everywhere. Some languages have built-in support for Hash Tables.</p><h3 id="hash-table"><a class="markdownIt-Anchor" href="#hash-table"></a> Hash Table</h3><p>Hash Table is a key-indexed table, that maps from its keys to value, and index is a function of the key (hashing function).</p><p>The ideal scenario is that the index distributed uniformly in the hashing index, so that the access to each element requires O(1) time. Somehow when there are collisions, there are two ways to resolve collisions.</p><p><strong>Separate Chaining:</strong> For separate chaining, each collision is stored under the same index, but uses a linked-list to store all the elements under the same index.</p><p><strong>Open Addressing:</strong> In case of a collision, the Hash Table probes the array for the next available position of inserting. There are more than one way to find the next available slot:</p><ul><li>Linear Probing.</li><li>Quadratic Probing.</li><li>Double Hashing.</li></ul><p>While for linear probing, when the array gets too full, the performance for searching and insertion degrades drastically. It keeps relatively good performance when the array is under 50% full.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Finally! Just finished all the lecture videos of “Algorithm I” from Coursera, and I believe now it’s a good time to review and summarize.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://blog.kevinhu.me/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://blog.kevinhu.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading - Fundamental Concepts In Programming Languages</title>
    <link href="https://blog.kevinhu.me/2015/01/03/Paper-Reading-Fundamental-Concepts-In-Programming-Languages/"/>
    <id>https://blog.kevinhu.me/2015/01/03/Paper-Reading-Fundamental-Concepts-In-Programming-Languages/</id>
    <published>2015-01-03T06:14:06.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a holiday reading summary. I recently came across two interesting blogs on fundamental concepts in computer science, both with the title “10 Papers Every Programmer Should Read (At Least Twice)”. One could be found in <a href="http://web.archive.org/web/20121024173845/http:/blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice">here</a>, and another one in <a href="http://blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/">Fogus’ blog</a>. Topics of these papers range from Programming Language theories, functional programming, to Lamport’s distributed system theories. I will read and summarize some of them in my blog. It’ll be 20 papers, and 40 paper-readings to do if I do read each one twice. So, it might be a long time before all is finished.</p><span id="more"></span><p>The first one I chose is “Fundamental Concepts In Programming Languages” (<a href="https://github.com/papers-we-love/papers-we-love/blob/master/plt/fundamental-concepts-in-programming-languages.pdf?raw=true">Link To Paper</a>). It’s probably the most influential set of lecture notes in computer science, compiled to paper by <a href="http://en.wikipedia.org/wiki/Christopher_Strachey">Christopher Strachey</a> in 1967, two years before the development of C programming language. Left and Right-values, Parametric and Ad-hoc polymorphism were all defined in this paper.</p><p>I will only try to summarize some highlights that I find interesting.</p><h2 id="l-values-and-r-values"><a class="markdownIt-Anchor" href="#l-values-and-r-values"></a> L-values and R-values</h2><p>Light and Right-values, also L and R-values. As their names suggest, L-value is for address-like object appropriate on the left of an assignment, R-value is for the contents-like object appropriate for the right. An L-value is for a location in memory, which has content – an associated R-value.</p><p>A name in program (or ‘identifier’) is associated with an L-value, and the association cannot be changed by any assignment. For example, in:</p><pre><code>let p = 3.5</code></pre><p>In this statement, an available location in memory is setup as the L-value of <code>p</code>, and the R-value 3.5 is assigned to this location.</p><p>Somehow, multiple names could have same L-value, by assigning reference to other names. This is slightly different than the concept of pointers, which represents a location by R-value, explained in the paper:</p><blockquote><p>Suppose X is a real variable with L-value a, then P is an object whose R-value is a, we say the type of P is real pointer and that P ‘points to’ X.</p></blockquote><p>The L and R-value should also be specified for the function parameter calling modes, namely, calling a parameter by value (R-value) or reference (L-value). Free variables should also be defined as L-value or R-value, the difference can be shown by the following example.</p><pre><code>Free variable by R-valuelet a = 3let f[x] = x + a... (f[5] = 8)a := 10... (f[5] = 8) Free variable by L-value let a = 3 let f[x] = x + a ... (f[5] = 8) a := 10 ... (f[5] = 15)</code></pre><h2 id="function-and-routines-as-data-items"><a class="markdownIt-Anchor" href="#function-and-routines-as-data-items"></a> Function and routines as data items</h2><p>First and second class objects are described as following:</p><blockquote><p>In ALGOL a real number may appear in an expression or be assigned to a variable, and either may appear as an actual parameter in a procedure call. A procedure, on the other hand, may only appear in another procedure call either as the operator (the most common case) or as one of the actual parameters. There are no expressions involving procedures or whose results are procedures. Thus in a sense in ALGOL are second class citizens…</p></blockquote><p>To represent functions as data items, we need to make sure the R-value of a function. It includes two parts – a rule for evaluating the expression, and an environment which supplies its free variables. An R-value of this sort will be called a closure.</p><h2 id="types-and-polymorphism"><a class="markdownIt-Anchor" href="#types-and-polymorphism"></a> Types and Polymorphism</h2><p>In the paper, it describes:</p><blockquote><p>“The type of an object determines its representation and constrains the range of abstract object it may be used to represent.”</p></blockquote><p>Whether the type is an attribute of an L-value or an R-value is language dependent, and can largely affect the amount of work. L-values are invariant under assignment, so their type is also invariant. And if we can determine the type of a polymorphism operator and the result from the operands, we can these attribute <strong>manifest</strong>. Attributes that can only be determined by running the program are known as <strong>latent</strong>.</p><p>Polymorphism is the provision of a single interface to entities of different types. (Definition from <a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science)">Wikipedia</a>). In this paper two modes of polymorphism is defined:</p><p><strong>Ad-hoc Polymorphism:</strong> It describes that functions could apply to arguments of different types, and can behave differently depending on the type of arguments. A good example could be the add (+) operand in some languages:</p><pre><code>3 + 5&quot;Hello&quot; + &quot; &quot; + &quot;World&quot;</code></pre><p>In the example above, (+) acts with different meanings. First is the adding of two integers, while the second is the concatenation of strings.</p><p><strong>Parametric Polymorphism</strong>: Parametric Polymorphism act the same regardless of the type. It treats the argument as a more generalized type. This makes the language more flexible while not breaking its static type-safety. A good example will be list operations. For example, to determine the length of a list one need not to know the data type of the list objects, and could therefore it could act on list of all types.</p><h2 id="afterthoughts"><a class="markdownIt-Anchor" href="#afterthoughts"></a> Afterthoughts</h2><p>There are other interesting topics in the paper as well. After learning all these concepts from programming languages, it’s sometimes interesting and necessary to learn the origins, to know how these ideas first came into formation. Putting the trivias of different language syntax aside for a while and getting back to theories actually helps understanding their designs.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a holiday reading summary. I recently came across two interesting blogs on fundamental concepts in computer science, both with the title “10 Papers Every Programmer Should Read (At Least Twice)”. One could be found in &lt;a href=&quot;http://web.archive.org/web/20121024173845/http:/blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice&quot;&gt;here&lt;/a&gt;, and another one in &lt;a href=&quot;http://blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/&quot;&gt;Fogus’ blog&lt;/a&gt;. Topics of these papers range from Programming Language theories, functional programming, to Lamport’s distributed system theories. I will read and summarize some of them in my blog. It’ll be 20 papers, and 40 paper-readings to do if I do read each one twice. So, it might be a long time before all is finished.&lt;/p&gt;
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/tags/ProgrammingLanguage/"/>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
  </entry>
  
</feed>
