<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Hu&#39;s Blog</title>
  
  <subtitle>A Hungry Fool</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.kevinhu.me/"/>
  <updated>2020-04-05T22:18:03.709Z</updated>
  <id>https://blog.kevinhu.me/</id>
  
  <author>
    <name>Kevin Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Book Review: Black Swan - The Impact of the Highly Improbable</title>
    <link href="https://blog.kevinhu.me/2020/04/05/05-Book-Review-Black-Swan/"/>
    <id>https://blog.kevinhu.me/2020/04/05/05-Book-Review-Black-Swan/</id>
    <published>2020-04-05T21:40:00.000Z</published>
    <updated>2020-04-05T22:18:03.709Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve just finished the major part (without the postscript essays) of the famous and oft-discussed book, once a best seller - the Black Swan. The author was knowledgable, and the book was insightful and well-crafted, with his unique style of discussing serious topics with occasional anecdotes and vivid storytelling. It was a fantastic ride.</p><a id="more"></a><h1>Human Thinking Fallacy</h1><p>Humans tend to think and live in Mediocristan, where probability tends to be in normal distribution - and that’s what most things are. Like human height, weight.</p><p>Black Swan incidents are ones that people can barely predict, sometimes grossly overlook. Examples include the 9.11 incident, 2008 stock market crash, etc.</p><p>But many other distributions are best described as power distribution, and that’s referred to as Extremistan, where cases tend to be extreme. Like human wealth.</p><p>It’s human nature to draw conclusions, find correlations, assume everything is close to what we observed, and extreme cases are extremely unlikely. And that’s the basic recipe for Black Swan incidents.</p><p>Think of a turkey well-fed by its owner. It quickly concludes that the owner is a friend, until the day before Thanksgiving. The author advises in the book: don’t be a turkey.</p><p>The author discussed a few cognitive biases we’re vulnerable to:</p><ul><li><strong>Confirmation Bias</strong>: People seek validation and reenforce their bias.</li><li><strong>Narrative Fallacy</strong>: People tend to find causes, as stories are much easier to digest given causes and reasons. People love to conclude as part of our natural tendencies.</li><li><strong>The Antechamber of Hope</strong>: The success of specific careers require an extraordinary amount of input and lonely hours waiting for hope. But many people don’t realize that, even the pursuers of these careers themselves.</li><li><strong>Survival Bias</strong>: People tend to look at survivors or successful stories while overlook deaths, thus overlook the total probability.</li></ul><h1>How Are We Bad At Prediction</h1><p>Human beings are particularly bad at making predictions. One phenomenon is the more information we have, the more confident we are, but not more accurate. It’s called “toxicity of information,” where noise is mistaken for signal.</p><p>The author argues that human technological advances are particularly unpredictable: “if you expect to expect something tomorrow, you should expect it today.” It’s especially true with new technologies. If we understand the details of new technology right now to predict it, we should already know how it’ll work and have it today.</p><p>In the book, the author slammed the so-called economists, social scientists, and the like, who build complicated mathematical models and beautiful charts to “forecast” the economic trends, stock market, etc., without taking into account chance plays in the outcomes. It makes them utterly vulnerable to Black Swans.</p><p>The author points out, however, that we should not try to predict Black Swans. Instead, build robustness against negative Black Swans, and shoot for positive Black Swans.</p><h1>Gray Swans of Extremistan</h1><p>The final part of the book author argues that the foundation of Black Swans is power distribution. It happens everywhere in the world: economy, company, nation powers, where winners take all. It has several implications:</p><ul><li>Nobody is safe in Extremistan, but nobody is threatened with total extinction either.</li><li>More concentrated power means more devastating collapse, too.</li><li>There are always ways to soften Extremistan, e.g., tax to redistribute wealth, religion to bind people. But Extremistan is here to stay.</li><li>Black Swans are always going to happen. We can make it grayer by treating them with the correct attitude.</li></ul><hr><p>Many book reviews have already gone through what they dislike about the author’s arrogant tone in this book, dismissing all social science as pseudo-science. Also, the author loved to paint himself as the lone wise oracle shunned by ordinary people, but that’s not the truth: many people have similar or close ideas of impending dangers and what we should do about them.</p><p>Nevertheless, the ideas in the book are still worth a read and close attention, especially in a fast-changing world as it is today.</p><p>One of the best examples might be the coronavirus that’s sweeping across the world right now, as I’m sitting in my own house, not being able to visit the restaurants and coffee shops I love. In retrospect, when the news first broke out, I never expected it could have such a drastic impact. Many people, myself included, like most popular news anchors, technologists, president of the US, and so so many more on social media, regarded the virus as “something just like the flu,” and “it’s just going to go away when the season passes.” Media today love to bring out the old comments, (especially with different political agenda), and use them to mock how ignorant and short-sighted they are - even though they are not so innocent themselves. I see this more like a common flaw in human predictions, just as the book described: as humans, we’re particularly bad at predictions.</p><p>There are also voices pointing out that it didn’t need to be a Black Swan. Nassim Taleb, the author of this book, <a href="https://www.bloomberg.com/news/videos/2020-03-30/nassim-taleb-says-white-swan-coronavirus-pandemic-was-preventable-video" target="_blank" rel="noopener">stated in the recent interview</a>: coronavirus shouldn’t be a Black Swan, to governments, medical professionals, and epidemiologists who dealt with situations like this before. He was not alone. Bill Gates once warned us about the dangers of a <a href="https://www.youtube.com/watch?v=6Af6b_wyiwI" target="_blank" rel="noopener">pending pandemic</a>. We didn’t take the advice seriously, and the pandemic still broke out as a Black Swan to all the rest of us.</p><p>Now instead of engaging in bitter political bickering, it’s wiser to learn from this lesson on all humanity and work together to make the next Black Swan grayer.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve just finished the major part (without the postscript essays) of the famous and oft-discussed book, once a best seller - the Black Swan. The author was knowledgable, and the book was insightful and well-crafted, with his unique style of discussing serious topics with occasional anecdotes and vivid storytelling. It was a fantastic ride.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary: Ultralearning</title>
    <link href="https://blog.kevinhu.me/2020/01/25/25-Ultralearning/"/>
    <id>https://blog.kevinhu.me/2020/01/25/25-Ultralearning/</id>
    <published>2020-01-25T22:55:34.000Z</published>
    <updated>2020-01-25T22:58:20.097Z</updated>
    
    <content type="html"><![CDATA[<p>Ultralearning is a quite interesting book from one of my favorite bloggers: Scott Young.Famous for his “MIT Challenge” – which he completed four years of MIT coursework in one single yearby completely self-studying – he now blogs regularly on studying methods, student cognitions,and everything related.</p><p>This book is his summary of his researches and experiences of studying.The book’s author argued that: there’s one possible way to learn and improve yourself,with intensive training and exercises. Like training muscles, you can adopt an extraordinary,unorthodox training plan for your brains, and pick up a new skill in a short amount of time,be it a foreign language, programming, sketch, or even public speaking. He called it &quot;ultralearning.&quot;In the book, he researched many references and interviewed like-minded friends,who had similar experiences of acquiring or improving a skill intensively.And he summarizes all the essential principles, as the guide to a successful “ultralearning” project.</p><a id="more"></a><ul><li><strong>Draw a Map</strong>: Research and layout a roadmap of what you try to study.Carve out enough time and make it a routine for you to follow.</li><li><strong>Focus</strong>: Train your focus. You cannot learn with efficiency if you can’t focus. It’s one of the most critical capabilities, yet it’s the most difficult to obtain. Most people suffer from not being able to start focusing (procrastination) or not being able to sustain focus (fatigue). It requires a large amount of practice.</li><li><strong>Directness</strong>: Contrary to some beliefs that learning can easily migrate from one skill to another, the author recommends directly target the very skill you’re trying to improve and be laser-focus on it.</li><li><strong>Drill</strong>: This is an area where you need excellent will power: keep finding out your weakest point and attack it ferociously. Do not live in the illusion of improvement, but keep exposing your week point.</li><li><strong>Retrieval</strong>: Test yourself to learn. The author notices though many students complain about missing lectures on online courses, few complain about missing tests. But learning isn’t about passively accepting knowledge. It’s really about acquiring and absorbing. Use the “Feynman techniques” to keep challenging your understanding.</li><li><strong>Feedback</strong>: Get feedback from others, preferably professionals. Their opinions can help you realize your blind spots.</li><li><strong>Retention</strong>: Memory is a huge aspect of learning. Use techniques to retain your knowledge of a subject, like spaced-repetition.</li><li><strong>Intuition</strong>: Study your subject and practice so hard, so that you develop insights on it, and put together what you’ve learned like jigsaw pieces.</li><li><strong>Experimentation</strong>: Finally, once you’ve gained enough skills, try to apply the skills and experiment on it to develop your original creations.</li></ul><p>I’ve finished this book in less than a week, and it was a pretty fun read.It included many anecdotes from authors’ friends and intellectual celebrities with high achievements (like Feynman, Ramanujan, Van Gogh, etc.)Also, it comes as a practical guidebook to your own learning projects.Although the book is named “ultralearning,” it does provide principles and tricks on learning, in or outside of school. In many places, it resonates with me as a student.</p><p>If I have to pick bones, as a guidebook to learning, this book feels a little verbose on stories.And as research on learning psychology, many of the stories don’t feel formal and convincing enough.But in all, it was a fun read for all the guidelines the book provides. I’d recommend it to anyone who believes learning is an essential part of their life.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ultralearning is a quite interesting book from one of my favorite bloggers: Scott Young.
Famous for his “MIT Challenge” – which he completed four years of MIT coursework in one single year
by completely self-studying – he now blogs regularly on studying methods, student cognitions,
and everything related.&lt;/p&gt;
&lt;p&gt;This book is his summary of his researches and experiences of studying.
The book’s author argued that: there’s one possible way to learn and improve yourself,
with intensive training and exercises. Like training muscles, you can adopt an extraordinary,
unorthodox training plan for your brains, and pick up a new skill in a short amount of time,
be it a foreign language, programming, sketch, or even public speaking. He called it &amp;quot;ultralearning.&amp;quot;
In the book, he researched many references and interviewed like-minded friends,
who had similar experiences of acquiring or improving a skill intensively.
And he summarizes all the essential principles, as the guide to a successful “ultralearning” project.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Learning" scheme="https://blog.kevinhu.me/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Zookeeper</title>
    <link href="https://blog.kevinhu.me/2020/01/20/20-Paper-Reading-Zookeeper/"/>
    <id>https://blog.kevinhu.me/2020/01/20/20-Paper-Reading-Zookeeper/</id>
    <published>2020-01-20T20:28:00.000Z</published>
    <updated>2020-01-20T22:35:06.437Z</updated>
    
    <content type="html"><![CDATA[<p>Paper: <a href="https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf" target="_blank" rel="noopener">https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf</a></p><p>Presentation: <a href="https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems" target="_blank" rel="noopener">https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems</a></p><a id="more"></a><h2>Data Model</h2><p><img src="zookeeper_datamodel.png" alt="Zookeeper DataModel"></p><p>Zookeeper’s data model is very like that of Unix tree-like file system paths.Every node is called a znode, with a key name and value, and may have its own children (except for ephermeral nodes).</p><p>Each znodes contain metadata like timestamps and data version number.</p><p>Nodes may be regular nodes, or ephermeral nodes, where clients keep alive bysending heartbeats to the server, and are removed in server after timeout.Handy for keeping membership information.</p><p>Provides basic client API like <code>create</code>, <code>get</code>, <code>set</code>, <code>delete</code>, <code>getChildren</code>,and <code>sync</code>, for clients to read the most up to date information.</p><h2>Guarantees</h2><p>Keeps two consistency guarantees:</p><ul><li><strong>Linearizable writes</strong>: All writes are linearizable, and specifically<code>Asynchronous linearizabile</code>, meaning client requests are non-blocking (or wait-free),but requests are processed in serialized fashion.</li><li><strong>FIFO client order</strong>: All requests from clients are in processed in requestedorder. Meaning the client will see results in order when it’s issued. Thisprovides consistency guarantees in many applications.</li></ul><p>Zookeeper writes are processed at leader level, while reads are processed at all nodes,for better scalability and performance, and therefore doesn’t provide strongconsistency. Zookeeper provides a <code>sync()</code> API for clients to read up to date data.</p><h2>Primitives and Applications</h2><p>With Zookeeper’s consistency model in mind, we can create powerful primitives based onZookeeper’s, for cluster key configuration management.</p><ul><li><strong>Configuration Management</strong>: Zookeeper’s A-Linearizibility consistency makes it idealfor managing consensus data across cluster. It also provides <code>watch</code> primitives for clientsto watch value changes.</li><li><strong>Rendezvous</strong>: Saves information when cluster is bootstrapping, and master of anotherapplication is undecided. Clients can read from a designated znode for cluster configuration.It works as a service discovery mechanism.</li><li><strong>Group Membership</strong>: Using ephemeral znodes, clients can save their liveness information,by keep sending heartbeats to the znodes. Once client disconnects/network partitions, znodegoes away. Can also use <code>SEQUENTIAL</code> flag to obtain unique name assignment.</li><li><strong>Locks</strong>: Client can create a ephemeral znode as a lock, all future clients will read iflock is in place befor modifying data. Lock is release when holder unlocks or dies/network partitions. Fancier locks are possible with some modifications.</li></ul><h2>Implementation</h2><p><img src="zookeeper_components.png" alt="Zookeeper Components"></p><h3>Request Processor</h3><p>Request processor in Zookeeper is idempotent.</p><p>All write requests are processed as transactions, it either generates a new version number for datawhen request version number matched, or generates an error if failed.</p><h3>Atomic Broadcast</h3><p>All servers process reads, and writes are forwarded to the leader. Zookeeper usesa protocol named <code>Zab</code> to keep consensus among the cluster. Like Paxos, it requiresa quorum to reach consensus.</p><h3>Replicated Database</h3><p>Zookeeper replicates data in all followers’ database. It takes snapshots to compact data.</p><p>Zookeeper snapshots are called <code>fuzzy snapshot</code>, as it’s not necessarily a valid state of theZookeeper data tree. But during recovery data can be recovered with fuzzy snapshot andoperation logs.</p><h3>Client-Server Communication</h3><p>Client reads from all servers for performance, and writes are transactions.To read the latest data, client <code>sync</code>s before read.</p><p>Followers process syncs by appending to previous write queues to leader.If there are no new writes before <code>sync</code>, it generates a dummy <code>sync</code> to guaranteethe leader is still leader.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paper: &lt;a href=&quot;https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.usenix.org/legacy/events/atc10/tech/full_papers/Hunt.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Presentation: &lt;a href=&quot;https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.usenix.org/conference/usenix-atc-10/zookeeper-wait-free-coordination-internet-scale-systems&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Zookeeper" scheme="https://blog.kevinhu.me/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: What the Dormouse Said</title>
    <link href="https://blog.kevinhu.me/2019/11/03/03-Book-Summary-Dormouse/"/>
    <id>https://blog.kevinhu.me/2019/11/03/03-Book-Summary-Dormouse/</id>
    <published>2019-11-04T02:39:00.000Z</published>
    <updated>2019-12-14T05:41:30.763Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;id=cTyfxP-g2IIC" target="_blank" rel="noopener">https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;id=cTyfxP-g2IIC</a></li><li><a href="https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769" target="_blank" rel="noopener">https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769</a></li></ul><blockquote><p>When logic and proportion</p><p>Have fallen sloppy dead</p><p>And the White Knight is talking backwards</p><p>And the Red Queen’s off with her head</p><p>Remember what the dormouse said</p><p>Feed your head</p><p>Feed your head</p></blockquote><a id="more"></a><p>I recently came across this book on how the 1960’s counter-culture and anti-war movemententangled with the personal computer movement in California. Much have we known abouthow the pirates of the Silicon Valley: Bill Gates and Steve Jobs shaped built personalcomputing enterprises, but this book recorded some very fascinating details of the storiesbefore their age, and how they inspired the generation of Bill Gates and Steve Jobsby first putting forward this very extraordinary idea of personal computing.</p><p>Story dates back to 1945 when Doug Engelbart started his musing on a device that can extend human mind,with inspirations from “Memex”, a device conceived by Vannevar Bush. It’s a machine that could track andretrieve vast volumes of information.</p><p>After school, a year of teaching and several failed attempts to find a job that can pursue his digitalcomputer dream, he landed in Stanford Research Institute, where he began his research in digital computer system.</p><p>At the same time in California, Myron Stolaroff first came in touch with the power of LSD, and laterdevoted his entire life to researching and promoting the power of it. The LSD was popular among engineersdescribed in the book, many, including Engelbart himself, used it as a mind-expanding tool.</p><p>In 1959, a young man named Fred Moore came into the campus of Berkeley. As a young man with some radicallyprogressive ideas in mind, he quickly rose to fame in the anti-ROTC student protests, and became oneof the leaders of the student movement in the 1960s and 1970s.</p><p>Three major threads led to the birth of personal computing. Engelbart had this vision of creatingan augmenting device with the power of machines. Stolaroff was experimenting with this substancethat can expand on human creativity as well as human spirituality.And Fred Moore set out on a crusade to spread freedom and peace. All three contributed to the creation of personal computing.</p><p>With funding from military, Engelbart continued his endeavor to Intelligence Augmentation.</p><p>On Dec 9, 1968, Engelbart introduced his system that works on a terminal with remote connectionsthrough ARPANET in the annual Fall Joint Computer Conference. Dubbed “the mother of all demos”,Engelbart and his team first demonstrated to the world the power of computers in empowering humans,and inspired a generation of young engineers to join his team, or pursue smiliar goals.</p><p>Book also introduced many interesting and important figures that influenced that age, e.g.</p><ul><li><strong>John McCarthy</strong>: who was a legendary figure who led the development of Stanford AI Lab (SAIL),not too far from SRI, but with different goal in mind: AI should totally be overpower human mind.</li><li><strong>Alan Kay</strong>: later the Turing Award laureate, the father of SamllTalk and the concept of Dynabook.He pioneered the research in language design and human computer interactions in Stanford.</li><li><strong>Steward Brand</strong>: one of many influenced by Staroloff’s experiments on LSD. He later influenced thewhole generation with the lengendary Whole Earth Catalog.</li><li><strong>Jim Warren</strong>, a teacher in school at the time, he later was involved in the radical movementsof Midpeninsula Free U movement, and founded the most respected West Coast Computer Faire,an annual convention for minicomputers. He was also the founder of Dr. Dobb’s Journal.</li><li><strong>JCR Licklider</strong>, the head of DARPA and the early funder of Engelbart’s research.</li><li><strong>Bill English</strong>, one of the engineers on Engelbart’s team, who later worked at Xerox PARC.He and Engelbart both shared credit for creating the world’s first mouse.</li></ul><p>With visionary and persistent figures like Engelbart, to genius engineers like Bill English,and student movement activists like Fred Moore, 1960s-1970s America, especially California,saw the shift of engineers sterotypes from uptight traditional stereotypes they used to be, to the LSD-sippinghippies who valued freedom and liberal ideas most, and pursued personal empowerment and individualism.The engineers in this story had influences from the radical Californian shifts in ideologies and activism,as well as the MIT hacker spirits. These people were not just geniuses, butthe ones who pursued individualism, and believed personal computers were the key to it.And maybe that, in turn, pushed forward the developmentof the most personal empowering device that we saw in the last century - personal computer.</p><p>Though their efforts and visions were not immediately celebrated in their time, theirinfluenced from SRI, to Xerox PARC was felt throughout the world, when young Steven Jobs and Steven Wozniakstarted from the Home-brew Computer Lab, and brought research ideas like GUI, mouse and personalcomputing to the whole world.</p><p>In all it was a very interesting book that’s worth a read if you’re interested in computer developmentat the age, and the tremendous stories behind how personal computing came into being.</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;amp;id=cTyfxP-g2IIC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://play.google.com/store/books/details?pcampaignid=books_read_action&amp;amp;id=cTyfxP-g2IIC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.amazon.com/What-Dormouse-Said-Counterculture-Personal/dp/0143036769&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When logic and proportion&lt;/p&gt;
&lt;p&gt;Have fallen sloppy dead&lt;/p&gt;
&lt;p&gt;And the White Knight is talking backwards&lt;/p&gt;
&lt;p&gt;And the Red Queen’s off with her head&lt;/p&gt;
&lt;p&gt;Remember what the dormouse said&lt;/p&gt;
&lt;p&gt;Feed your head&lt;/p&gt;
&lt;p&gt;Feed your head&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="Book" scheme="https://blog.kevinhu.me/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: Data and Goliath</title>
    <link href="https://blog.kevinhu.me/2019/09/16/16-Book-Summary-Data-Goliath/"/>
    <id>https://blog.kevinhu.me/2019/09/16/16-Book-Summary-Data-Goliath/</id>
    <published>2019-09-16T05:29:00.000Z</published>
    <updated>2019-09-22T14:41:59.012Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ" target="_blank" rel="noopener">https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ</a><a href="https://www.amazon.com/dp/039335217X/" target="_blank" rel="noopener">https://www.amazon.com/dp/039335217X/</a></p><p>“Data and Goliath” is an excellent book a friend recommended.It’s a summary of all the dangerous and negative ways data, and the “Big Data” technology canshape our societies. The author Bruce Schneier isa prominent expert in cryptography who published impactful works oncryptography and issues on privacy. He’s also on the board of directors of Electronic Frontier Foundation.</p><ul><li><a href="https://www.schneier.com/blog/about/" target="_blank" rel="noopener">https://www.schneier.com/blog/about/</a></li><li><a href="https://en.m.wikipedia.org/wiki/Bruce_Schneier" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/Bruce_Schneier</a></li><li><a href="https://www.eff.org/press/releases/renowned-security-expert-bruce-schneier-joins-eff-board-directors" target="_blank" rel="noopener">Renowned Security Expert Bruce Schneier Joins EFF Board of Directors</a></li></ul><h2><a id="more"></a></h2><p>The book provides abundant amount ofcases and examples related to big data misuse, as well as author’s carefuland in-depth analysis of different impacts data has on our societies,and pragmatic recommendations to different sides of the society on solvingthe “Big Data” problem.</p><p>The book mostly discusses how governments and corporates can abuseits use to profit, surveil or control citizens at the cost of our privacy, freedom, and even democracy. Without proper protection, regulationand activism, we are unknowingly giving up our rights to data.</p><p>Governments can abuse Big Data, and our political liberty and justice systemcan be corrupted, with mass surveillance on citizens, and surveillancedata can in turn be leveraged to accuse dissidents and silence politicalopponents. Government censorships can thwart free thinking and socialprogress, and make way for an oppressive regime.</p><p>The author provides an interesting thought experiment, originallyfrom English philosopher Jeremy Bentham: panopticon, meaning a prisonwhere all inmates can constantly be watched by the guard, even when guardis not actively watching them. In such a system, inmates are much moreconformant from the constant fear of criticism, judgements and punishments.A society becomes a panopticon with mass surveillance and censorship.</p><p>Some other examples include the political witch-hunting in 1950s led by senator Joseph McCarthy, and harassment Dr. Martin Luther King receivedfrom then then FBI directorJ. Edgar Hoover. The book described the chilling effect surveillance and abuseof power can have on political movements.</p><p>From a commercial perspective, misuse of “Big Data” can havedangerous effects on society as well. Surveillance-based discriminationbasically revive the “redlining” to the internet age, where discriminationcan be much more pervasive, intrusive and effective, and thus moredamaging. Large corporate collected data can be used for massive onlinemanipulation. A good example is how Facebook can nudge its users tovote with a rate of ~0.4%. Imagine if it discriminately displays thenudging information to vote.</p><p>(The book is finished around 2015, before the Cambridge Analytica incident,proving the author’s foresight.)</p><p>Finally the book stressed the importance of Software/Network security,privacy to our society, and analyzed why it doesn’t contradict thegovernments’ role of ensuring the security of the societies, corporates’role of leveraging data for profit. Finally it provides pragmatic recommendations on solving the “Big Data” mess,to governments, corporates, and the rest of us. In all it was a goodread.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://play.google.com/store/books/details/Bruce_Schneier_Data_and_Goliath_The_Hidden_Battles?id=MwF-BAAAQBAJ&lt;/a&gt;
&lt;a href=&quot;https://www.amazon.com/dp/039335217X/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.amazon.com/dp/039335217X/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Data and Goliath” is an excellent book a friend recommended.
It’s a summary of all the dangerous and negative ways data, and the “Big Data” technology can
shape our societies. The author Bruce Schneier is
a prominent expert in cryptography who published impactful works on
cryptography and issues on privacy. He’s also on the board of directors of Electronic Frontier Foundation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.schneier.com/blog/about/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.schneier.com/blog/about/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.m.wikipedia.org/wiki/Bruce_Schneier&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.m.wikipedia.org/wiki/Bruce_Schneier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eff.org/press/releases/renowned-security-expert-bruce-schneier-joins-eff-board-directors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Renowned Security Expert Bruce Schneier Joins EFF Board of Directors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="Book" scheme="https://blog.kevinhu.me/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2019-08</title>
    <link href="https://blog.kevinhu.me/2019/08/18/18-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2019/08/18/18-Reading-Summary/</id>
    <published>2019-08-19T03:15:57.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2><a href="http://msvaljek.blogspot.com/2015/11/cassandra-time-series-bucketing.html" target="_blank" rel="noopener">Cassandra Time Series Bucketing</a></h2><p>How to model timeseries data with Cassandra.</p><h2><a href="https://github.com/ankur-anand/simple-go-rpc" target="_blank" rel="noopener">Simple GoRPC</a></h2><p>The best way to understand something, is to build one yourself. This tutorial covers basic network programming in Go, struct design and the usage of <code>reflect</code> package.</p><h2><a href="https://eng.uber.com/optimizing-m3/" target="_blank" rel="noopener">Optimizing M3: How Uber Halved Our Metrics Ingestion Latency by Forking the Go Compiler</a></h2><p>A great experience sharing blog on how to debug a performance issue in their services. And with profiling and analysis tools, the Uber team was able to pinpoint this issue in worker pool and goroutine stack allocation, and then they forked the Go compiler to prove it’s a regression in the Go compiler. A very nice read and analysis process.</p><h2><a href="https://github.com/heathermiller/dist-prog-book" target="_blank" rel="noopener">Book: Programming Models for Distributed Computation</a></h2><p>A programming book on topics in distributed computation, from teaching experience in distributed system course, from Northeastern University.</p><h2><a href="https://labs.spotify.com/2014/03/27/spotify-engineering-culture-part-1/" target="_blank" rel="noopener">Spotify Engineering Culture</a></h2><p>A very nice engineering blog from 2014. A excellent overview of Spotify culture, and an introduction on how to build the “agile” team.</p><h2><a href="https://open.nytimes.com/how-we-helped-our-reporters-learn-to-love-spreadsheets-adc43a93b919?gi=26f780cc274a" target="_blank" rel="noopener">How We Helped Our Reporters Learn to Love Spreadsheets</a></h2><p>NYTimes has released its in-house course to teach journalists data science. Journalism can also benefit from a little coding/data analytics skills.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;a href=&quot;http://msvaljek.blogspot.com/2015/11/cassandra-time-series-bucketing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cassandra Time Series
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
      <category term="Debug" scheme="https://blog.kevinhu.me/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2019-04</title>
    <link href="https://blog.kevinhu.me/2019/05/05/05-Reading-Summary-201905/"/>
    <id>https://blog.kevinhu.me/2019/05/05/05-Reading-Summary-201905/</id>
    <published>2019-05-06T03:40:34.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2><a href="https://www.alexedwards.net/blog/an-overview-of-go-tooling#diagnosing-problems-and-making-optimizations" target="_blank" rel="noopener">An Overview of Go’s Tooling</a></h2><p>If go is one of your favorite languages as well, this is a must read:it introduces all the basic tooling that comes with Go’s ecosystem, whichmight greatly save your time.</p><h2><a href="https://news.ycombinator.com/item?id=19634915" target="_blank" rel="noopener">HackerNews thread on TLA+:</a></h2><p>A thread from HackerNews, discussing the importance of formal verificationfor distributed systems.</p><p>TLA+ and formal verification is notoriously known for its complexity and steeplearning curve. This might be one of my very future goals.</p><h2><a href="https://www.infoq.com/articles/brown-are-you-a-software-architect" target="_blank" rel="noopener">Are You a Software Architect?</a></h2><p>What it takes to be a software architect, a great blog post from InfoQ.</p><h2><a href="https://www.influxdata.com/blog/influxdata-apache-arrow-go-implementation/" target="_blank" rel="noopener">InfluxData is Building a Fast Implementation of Apache Arrow in Go Using c2goasm and SIMD</a></h2><p>TIL that it is possible to convert your C/C++ assembly into Go’s assembly, andcall from Go’s code. InfluxData leverages the tooling to embed AVX/SSE instructionsinto Golang’s assembly, thus boosts Go code’s performance, sometimes by ordersof magnitude.</p><p>More information on this tool, c2goasm, <a href="https://github.com/minio/c2goasm" target="_blank" rel="noopener">work from Minio</a>.</p><h2><a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/" target="_blank" rel="noopener">Org-Mode Is One of the Most Reasonable Markup Languages to Use for Text</a></h2><p>I think so, too. But it’ll require a community and proper tooling to see itreally prosper. Hope to see that some day.</p><h2><a href="https://www.economicprinciples.org/Why-and-How-Capitalism-Needs-To-Be-Reformed/" target="_blank" rel="noopener">Why and How Capitalism Needs to Be Reformed</a></h2><p>A great piece from <a href="https://en.wikipedia.org/wiki/Ray_Dalio" target="_blank" rel="noopener">Ray Dalio</a>, thefounder of investment firm Bridgewaters, a seasoned investor, discusses in hisrecent long post why American capitalism is sick in distributing resources,especially educational resources, and needs to be reformed to stay healthy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;a href=&quot;https://www.alexedwards.net/blog/an-overview-of-go-tooling#diagnosing-problems-and-making-optimizations&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Blog Reading: The log - What every software engineer should know about real-time data&#39;s unifying abstraction
</title>
    <link href="https://blog.kevinhu.me/2019/04/01/31-Blog-Reading-Kafka/"/>
    <id>https://blog.kevinhu.me/2019/04/01/31-Blog-Reading-Kafka/</id>
    <published>2019-04-02T04:39:10.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="noopener">https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying</a></p><p>Kafka is a message queue, a pub-sub system, an event sourcing tool,and a stream processing infrastructure, is a key part of many streaming distributedsystems that requires streaming data. Its underlying idea, is to aggregate datafrom a distributed sources, to a unifying linear log structure.</p><p>The blog is from Kafka’s creator Jay Kreps when he was at LinkedIn,contemplating the log abstraction as a key part of any distributed systems. Thisis not Kafka’s design paper, implementation or a tutorial, but rather the process of brewingthe idea that led to its birth, and I found it equally interesting. The following aremy notes.</p><p>The link to Kafka paper: <a href="https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a" target="_blank" rel="noopener">https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a</a></p><a id="more"></a><h2>What Is a Log?</h2><p>Log is a simplest storage abstraction, similar to what we see in application logs,records are appended to the end of a log data structure, and reads proceeds left-to-right.This simple abstraction is powerful, in that:</p><ul><li>It keeps the records, and the ordering of records, by when it’s appended to the data structure.</li><li>In a deterministic system, you can reconstruct the state of the systems at any time, byreplaying the input in order for every single step of the input.</li></ul><p>The log centric approach arises from a simple observation that the author named&quot;State Machine Replication Principle&quot;:</p><blockquote><p>If two identical, deterministic processes begin in the same state and getthe same inputs in the same order, they will produce the same output and endin the same state.</p></blockquote><p>And there are two major different ways of leveraging logs in distributed processingand replication:</p><ul><li>A “Primary Backup” Model, AKA “active-passive” model, where one node is elected asmaster, and writes its states to log. Upon master failure, a replica is elected andtake over.</li><li>The “State Machine Model”, AKA “active-active” model, where changes/operationsare written to the log, and each replica picks up the log.</li></ul><p><img src="2019-03-31-Blog-Reading-Kafka-active_and_passive_arch.png" alt="Replication Architecture with Log"></p><h2>What can log be used for</h2><h3>Data Integration</h3><p>Make all of an organization’s data easily available in all its storage and processingsystems.</p><p>An organization may have multiple data inputs, that gathers events and data frommany places, and different consumers to digest that data. A log structure can serveas a buffer as well as a central pipeline for all the different producers and consumers.In this way, the log serves as an asynchronous messaging system.All producers and consumers can read buffered data from the log, with different pace.e.g. a real-time system may need to read instantly, while an analytic platform mayread it only hourly or even daily.</p><p>Also, in a system where there are M inputs and N output, you’ll need M * N pipelines tomake sure each consumer can read from all data producers. But with a single unified data pipeline,every producer and consumer can all write and read from one single log. And that’s theidea behind Kafka.</p><p>Also, Kafka’s log structure also enables high-performance optimizations, e.g.:</p><ul><li>Enables partitioning.</li><li>Optimize high throughput by batching small reads and writes.</li><li>Avoids needless data copies, as it can keep same binary data structure in memory,on disk and in network transfers.</li></ul><h3>Real-time Data Processing</h3><p>Computing derived data streams.</p><p>Log also makes real-time stream processing easier. Logs enables real-time data collectionfrom events or different data input, at different speed, that the consumers canread from at scale.</p><p>Log also enables more complicated data flow, e.g. when output of a log in the streamprocessing systems becomes the input of another. It can construct complicated data flowgraphs. And log has benefits:</p><ul><li>It makes each dataset multi-subscriber and ordered, and the order is permanent.</li><li>The log provides buffering to the processes, so that the system can work inasynchronous fashion.</li></ul><h3>Distributed System Desgin</h3><p>Practical systems can be simplified with a log-centric design.</p><p>Log enables high-performance and easy integration of data producers and consumers,distributed systems are more likely to move away from monolithic relational databases,and toward more diverse data sources and consumers. Building distributed systemswould more feel like lego games with open-source data components.</p><p>And a log system can work as the following role in system architecture.</p><ul><li>Handle data consistency by sequencing concurrent updates to nodes.</li><li>Provide data replication between nodes.</li><li>Provide “commit” semantics to the writer (respond only when your write is guaranteednot to be lost).</li><li>Provide external data subscription feed from the system.</li><li>Provide the capability to restore failed replicas.</li><li>Handling data rebalancing of data between nodes.</li></ul><hr><p>The author built the powerful ideas of a log into Kafka, one of the most influentialdata streaming platform. This long blog might bring some insights to incorporateKafka into a distributed system, as well as provide inside in building new systeminfrastructures.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kafka is a message queue, a pub-sub system, an event sourcing tool,
and a stream processing infrastructure, is a key part of many streaming distributed
systems that requires streaming data. Its underlying idea, is to aggregate data
from a distributed sources, to a unifying linear log structure.&lt;/p&gt;
&lt;p&gt;The blog is from Kafka’s creator Jay Kreps when he was at LinkedIn,
contemplating the log abstraction as a key part of any distributed systems. This
is not Kafka’s design paper, implementation or a tutorial, but rather the process of brewing
the idea that led to its birth, and I found it equally interesting. The following are
my notes.&lt;/p&gt;
&lt;p&gt;The link to Kafka paper: &lt;a href=&quot;https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.semanticscholar.org/paper/Kafka-%3A-a-Distributed-Messaging-System-for-Log-Kreps/9f948448e7a5f0cc94cd53656410face8b31b18a&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="Kafka" scheme="https://blog.kevinhu.me/tags/Kafka/"/>
    
      <category term="Log" scheme="https://blog.kevinhu.me/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2019-03</title>
    <link href="https://blog.kevinhu.me/2019/03/17/17-Reading-Summary-201903/"/>
    <id>https://blog.kevinhu.me/2019/03/17/17-Reading-Summary-201903/</id>
    <published>2019-03-18T04:39:10.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2><a href="https://www.technologyreview.com/lists/technologies/2019/" target="_blank" rel="noopener">10 Breakthrough Technologies in 2019, by Bill Gates</a></h2><p>Take a look at what Mr. Gates thinks are the greatest technologybreakthroughs right now. The list might surprise you.</p><h2><a href="http://highscalability.com/blog/2017/12/11/netflix-what-happens-when-you-press-play.html" target="_blank" rel="noopener">What happens when you click Play button on Netflix</a></h2><p>How Netflix leverages AWS technologies to build world-scale, highly-availbile,fault-tolerant distributed video streaming system.​</p><h2><a href="https://aws.amazon.com/solutions/case-studies/lyft/" target="_blank" rel="noopener">Lyft Case Study - Amazon Web Services</a></h2><p>Lyft architecture evolution on AWS.​</p><h2><a href="https://fs.blog/2019/02/compounding-knowledge/" target="_blank" rel="noopener">Compounding Knowledge</a></h2><p>From Farnam Street – an interesting blog site I found recently.</p><p>Also on Farnam Street and its “mental models”: <a href="https://commoncog.com/blog/the-mental-model-fallacy/" target="_blank" rel="noopener">The Mental Model Fallacy</a>.TL;DR: The so-called “mental models” from Farnam Street is not of much valuewhen it’s from non-practitioners. And to learn businees, like basketball, swimming,etc., you’ll need to actually practice to learn the intricate knowledge that arenot easily translated into writings.</p><h2><a href="https://arxiv.org/abs/1902.08318v1" target="_blank" rel="noopener">Parsing Gigabytes of JSON per Second</a></h2><p>Unfortunately I didn’t have time to finish reading this paper. But it’s goodto learn the concept of branchless algorithms to fill the CPU pipeline andachieve amazing performance.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;a href=&quot;https://www.technologyreview.com/lists/technologies/2019/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;10 Breakthrough Technologies in 2019,
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Linux" scheme="https://blog.kevinhu.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center</title>
    <link href="https://blog.kevinhu.me/2019/03/10/Paper-Reading-Mesos/"/>
    <id>https://blog.kevinhu.me/2019/03/10/Paper-Reading-Mesos/</id>
    <published>2019-03-10T18:14:56.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link to paper: <a href="https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf" target="_blank" rel="noopener">https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf</a></p><p>Presentation: <a href="https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center" target="_blank" rel="noopener">https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center</a></p><p>Mesos is a cluster resource management software from UC Berkeley. Unlike many otherframeworks already existed, Mesos is designed to support heterogeneous frameworks (Hadoop,MPI, etc) in the same cluster and share resources between them, by providing a thin layerthat making resource offers to the framework schedulers, and delegate the schedulingdecision to the frameworks themselves.</p><p>With this design, Mesos can achieve pretty good elasticity between frameworks, andletting frameworks choose their own resources results in better data locality.</p><a id="more"></a><h2>Design Choices</h2><ul><li>Mesos supports different frameworks, making them share cluster resources, toaccommodate differnt computation needs.</li><li>Find-grained sharing: Instead of allocating static amount of cluster to multipleframeworks, Mesos provides fine grained resources to all frameworks elastically.</li><li>Resource offers: Instead of making all decisions for everyone, supporting all frameworks outthere, Mesos implements “a scheduler of schedulers”, by providing <em>resources offers</em>to each framework and let it make scheduling and execution decisions, makingMesos itself thin, highly extensible, and scalable.</li><li>Frameworks are provided <em>resource offers</em>, and can make decisions on whether toaccept them based on their own requirements. For faster response time, each frameworkcan keep a white-list and/or black-list of all resource offers.</li></ul><h2>Architecture</h2><p><img src="2019-03-Paper-Reading-Mesos-architecture3.jpg" alt="Mesos architecture diagram, showing two running frameworks (Hadoop and MPI)."></p><ul><li>Mesos consists of master and agent (used to be slave) nodes, and resource offersare resources on each agent node.</li><li>Each framework provides two parts: <em>scheduler</em>, and <em>executor</em>. Scheduler registerswith Mesos and makes scheduling decisions based on the resource offered, and executorruns on each client node, to run actual commands on each agent node.</li><li>Mesos uses pluggable resource allocation modules for resource allocation decisions.</li><li>Mesos uses pluggable resource isolation modules for resource isolation between differenttasks (e.g. containers).</li><li>Mesos provides APIs for resource offers and resource offer responses. Frameworks thatworks with Mesos need to implement the APIs.</li><li>Mesos work with Zookeeper to keep a quorum of masters to provide fail-recovery.Its master keeps a soft state, that can be reconstructed from agent information, for resilience.</li></ul><p>A full cycle of resource offer works as follows:</p><p><img src="2019-03-Paper-Reading-Mesos-architecture-example.jpg" alt="Resource offer example"></p><ul><li>Agent reports to Mesos master what resource it has.</li><li>Mesos master provides resource offers to a framework scheduler, based on organizationpolicies.</li><li>Scheduler decides on the offers, and returns decisions, and tasks to run on theoffers.</li><li>Master sends execution commands to corresponding agents to execute on the executors.</li><li>Repeat leftover offers to next framework.</li></ul><h2>Performance and Scalability</h2><p>Mesos core is designed to be small, and from the paper it could scale to 50,000nodes with emulated load.</p><ul><li>Delay scheduling: The team built a new MapReduce framework on Mesos named “Spark”, to handle iterativeMapReduce workloads. Since Mesos allows framework scheduler to choose resources, it can chooseresources so that data is retained on the executor. This avoids reloading data from diskeach iteration, and allows Spark to achieve ~10x performance over traditional MapReduceframework on iterative tasks.</li><li>Fine-grained sharing: different framework can expand and shrink based on its ownworkload, as the following chart shows. By pooling resources, Mesos lets each workloadscale up to fill gaps in the demand of others. In addition, fine-grained sharingallows resources to be reallocated in tens of seconds.</li></ul><p><img src="2019-03-Paper-Reading-Mesos-Resource-Pooling.png" alt="Fine grained sharing among frameworks"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link to paper: &lt;a href=&quot;https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Presentation: &lt;a href=&quot;https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.usenix.org/conference/nsdi11/mesos-platform-fine-grained-resource-sharing-data-center&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mesos is a cluster resource management software from UC Berkeley. Unlike many other
frameworks already existed, Mesos is designed to support heterogeneous frameworks (Hadoop,
MPI, etc) in the same cluster and share resources between them, by providing a thin layer
that making resource offers to the framework schedulers, and delegate the scheduling
decision to the frameworks themselves.&lt;/p&gt;
&lt;p&gt;With this design, Mesos can achieve pretty good elasticity between frameworks, and
letting frameworks choose their own resources results in better data locality.&lt;/p&gt;
    
    </summary>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/categories/PaperReading/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
      <category term="Mesos" scheme="https://blog.kevinhu.me/tags/Mesos/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Understanding Real-World Concurrency Bugs in Go
</title>
    <link href="https://blog.kevinhu.me/2019/03/04/Paper-Reading-Go-Concurrency-Bugs/"/>
    <id>https://blog.kevinhu.me/2019/03/04/Paper-Reading-Go-Concurrency-Bugs/</id>
    <published>2019-03-04T06:46:03.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://golangweekly.com/link/59972/b208593eda" target="_blank" rel="noopener">https://golangweekly.com/link/59972/b208593eda</a></p><p>A team from Penn State University and Purdue published their latest study on concurrency bugs found in Golang projects, namely large projects from Github: Docker and Kubernetes, two datacenter container systems, etcd, a distributedkey-value store system, gRPC, an RPC library, and CockroachDB and BoltDB. The authors searched commit histories of each repository to understand concurrency bug fixes for categorization and study.</p><p><strong>TL;DR</strong>:</p><ul><li>Go’s message-passing concurrency mechanism, something Go is proud of, isn’t as easy to use as it’s generally perceived. It creates just as many bugs, if not more, than shared-memory concurrency model.</li><li>Shared memory synchronization is still used more in Go projects.</li><li>Go’s built-in race and deadlock bug detection library still cannot catch all the bugs. There’s room for more improvements.</li></ul><a id="more"></a><p>Abstract: The author of this paper analyzed 171 bugs in 6 aforementioned open-source Go projects for a systematic study of Go concurrency bugs, providing better understanding for go bugs and concurrency bug detection tools.</p><h2>Type of Bugs</h2><p>The author categorized the bugs into <strong>blocking</strong> and <strong>non-blocking</strong> bugs. <strong>Blocking</strong> bugs are misuse of synchronization primitives that causes the program, or a subset of goroutines to hang. <strong>Non-Blocking</strong> bugs happen when shared memory is unprotected, causing data races, or errorneous message passing, e.g.: when goroutines don’t quit properly, causing resource leaks.</p><h3>Blocking bugs</h3><p>The paper further divided blocking bugs into traditional shared memory bugs, and bugs caused by misuse of message passing, or libraries related to messaging.</p><p>This led to an interesting observation from this paper: contrary to common belief, message passing are potentially more likely to cause blocking bugs than shared memory.</p><p>An example of blocking bugs related to message passing, with its fix. similar to the one I had before:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// goroutine 1</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">goroutine1</span><span class="params">()</span></span> &#123;</span><br><span class="line">      m.Lock()</span><br><span class="line">-     ch &lt;- request <span class="comment">// blocks</span></span><br><span class="line">+     <span class="keyword">select</span> &#123;</span><br><span class="line">+         <span class="keyword">case</span> ch &lt;- request</span><br><span class="line">+         <span class="keyword">default</span>:</span><br><span class="line">+     &#125;</span><br><span class="line">      m.Unlock()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goroutine 2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutine2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        m.Lock()   <span class="comment">// blocks</span></span><br><span class="line">        m.Unlock()</span><br><span class="line">        request &lt;- ch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An example for blocking bug related to messaging library from the paper is <code>Pipe</code> library.</p><p>The paper also noticed that for blocking bugs, there’s a high correlation between blocking bugs (shared memory as well as message passing) to their fixes, indicating there’s high potential in developing automated tools to help fix such bugs.</p><h3>Non-Blocking bugs</h3><p>For non-blocking bugs, the paper also divided them into traditional bugs, (e.g. unprotected shared memory causing data races), misuse of channels, or shared data in special libraries.</p><p>An interesting example related to non-blocking bug caused by message passing, mentioned in the paper:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when multiple goroutines execute the following code, default</span></span><br><span class="line"><span class="comment">// can execute multiple times, closing the channel more than once,</span></span><br><span class="line"><span class="comment">// which leads to panic in Go runtime</span></span><br><span class="line"></span><br><span class="line">- <span class="keyword">select</span> &#123;</span><br><span class="line">-     <span class="keyword">case</span> &lt;- c.closed:</span><br><span class="line">          <span class="comment">// do something</span></span><br><span class="line">-     <span class="keyword">default</span>:</span><br><span class="line">+         Once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">              <span class="built_in">close</span>(c.closed)</span><br><span class="line">+         &#125;)</span><br><span class="line">- &#125;</span><br></pre></td></tr></table></figure><p>Example regarding non-blocking bug related to library, the paper mentioned the <code>context</code> library, where <code>context</code> object type is designed to be accessed by mulitple goroutines. And accessing string type in the <code>context</code> library could potentially lead to data races.</p><p>The paper observes some traditional data race detector cannot detect all types, calling for future researches on this topic.</p><h2>More Discussions</h2><p>More discussions from HackerNews: <a href="https://news.ycombinator.com/item?id=19280927" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=19280927</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://golangweekly.com/link/59972/b208593eda&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://golangweekly.com/link/59972/b208593eda&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A team from Penn State University and Purdue published their latest study on concurrency bugs found in Golang projects, namely large projects from Github: Docker and Kubernetes, two datacenter container systems, etcd, a distributedkey-value store system, gRPC, an RPC library, and CockroachDB and BoltDB. The authors searched commit histories of each repository to understand concurrency bug fixes for categorization and study.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go’s message-passing concurrency mechanism, something Go is proud of, isn’t as easy to use as it’s generally perceived. It creates just as many bugs, if not more, than shared-memory concurrency model.&lt;/li&gt;
&lt;li&gt;Shared memory synchronization is still used more in Go projects.&lt;/li&gt;
&lt;li&gt;Go’s built-in race and deadlock bug detection library still cannot catch all the bugs. There’s room for more improvements.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Golang" scheme="https://blog.kevinhu.me/tags/Golang/"/>
    
      <category term="Concurrency" scheme="https://blog.kevinhu.me/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Large-scale cluster management at Google with Borg
</title>
    <link href="https://blog.kevinhu.me/2019/02/27/24-Paper-Reading-Borg/"/>
    <id>https://blog.kevinhu.me/2019/02/27/24-Paper-Reading-Borg/</id>
    <published>2019-02-27T17:05:34.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://ai.google/research/pubs/pub43438" target="_blank" rel="noopener">https://ai.google/research/pubs/pub43438</a></p><p>About: Borg is Google’s large cluster workload scheduling and management system, which handles Google’s most service and batch job workloads on a cluster on scale of thousands of machines. It hides users from burdens of management of cluster, and provides high-availability features that handles failures.</p><p>The now very famous and popular open-source docker orchestration tool Kubernetes, is an open source successor to Borg, and keeps borrowing ideas from Borg (see <a href="https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/" target="_blank" rel="noopener">kubernetes</a>).</p><a id="more"></a><h2>Concepts</h2><h3>Workloads</h3><p>There are heterogeneous workloads on the cluster, that could mainly be categorized as</p><ul><li>long-running services: that responds to user requests.</li><li>batch jobs: computation work that might take long time to finish.</li></ul><h3>Cluster and cells</h3><p>A cell is a collection of machines in a datacenter. A cluster hosts one large cell or several smaller cells for testing.</p><h3>Jobs and tasks</h3><p>A job is made of one of multiple tasks. Tasks can:</p><ul><li>have constraints on what OS, what IP, processor it requires,</li><li>run inside a container with resources (CPU, memory, disk) limits with command-line flags.</li></ul><p>Users can operate by jobs with RPCs to Borg.</p><h3>Allocs</h3><ul><li>Alloc: is a reserved set of resources on a machine for one or more tasks to be run.</li><li>Alloc Set: a set of Allocs on multiple machines. Once an Alloc Set is created, a job can be scheduled to run on it.</li></ul><h3>Priority, Quota and Admission Control</h3><p>Every job has a priority, and the scheduler schedule them ranking by the priority.</p><p>Quota is assigned to/purchased by the user. It’s defined by resources at a certain priority. Quota is managed by admission control, and a job/user is over quota, the job is immediately rejected.</p><h3>Naming and monitoring</h3><p>Borg names and monitors tasks with:</p><ul><li>“Borg name service”, that assigns each task a name and a DNS name, so that a task can be reachable at a certain DNS address.</li><li>Chubby consistency service: a task writes its info to Chubby upon creation, and updates when there’s a change in health.</li><li>Almost every task has an HTTP endpoint that exposes health metrics that can be queried by Borg health monitoring service.</li><li>Records all job submission and task events, resource usage metrics in a database for future query.</li></ul><h2>Architecture</h2><h3>Borgmaster and Borglet</h3><p>Borg master records all the job status and manages state machines to all the objects in the system (machines, tasks, allocs, etc). And the data is saved in a Paxos-enabled Chubby store.</p><p>Borglet is a local Borg agent that resides on every machine in a cell, which manages tasks on a single machine, and sends heartbeats to the master.</p><h3>Scheduler</h3><p>Borgmaster records jobs to Paxos store and pending queue, which is picked up by the scheduler, and gets scheduled. The scheduler uses an algorithm “E-PVM” for scoring, (sometimes called “worst fit”), or an algorithm that packs the tasks to minimal number of machines (sometimes called “best fit”).</p><h3>Scalability</h3><p>Borg uses the following techniques for scalability:</p><ul><li>Scheduler uses a separate process, to operate in parallel with the other Borgmaster.</li><li>A scheduler operates on a cached copy of the cell state.</li><li>Uses separate threads to talk to Borglets and respond to read-only RPCs.</li><li>Shards (partitioned) functions across five Borgmaster replicas.</li></ul><h2>Availability</h2><p>Failures are normal and applications run on Borg on expected to handle failures, and automatically rescheduled when evicted due to failure, eviction, preemption, and etc.</p><h2>Conclusion</h2><p>Borg serves as an important example for the design of all other large-scale distributed scheduling systems, which performs in the challenges of functionality, scalability and availability, and high utilization of the cluster resources.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://ai.google/research/pubs/pub43438&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ai.google/research/pubs/pub43438&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About: Borg is Google’s large cluster workload scheduling and management system, which handles Google’s most service and batch job workloads on a cluster on scale of thousands of machines. It hides users from burdens of management of cluster, and provides high-availability features that handles failures.&lt;/p&gt;
&lt;p&gt;The now very famous and popular open-source docker orchestration tool Kubernetes, is an open source successor to Borg, and keeps borrowing ideas from Borg (see &lt;a href=&quot;https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes&lt;/a&gt;).&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="Borg" scheme="https://blog.kevinhu.me/tags/Borg/"/>
    
      <category term="DistributedSystems" scheme="https://blog.kevinhu.me/tags/DistributedSystems/"/>
    
  </entry>
  
  <entry>
    <title>Debugging An Interesting Deadlock in Golang</title>
    <link href="https://blog.kevinhu.me/2019/02/09/Debugging-An-Interesting-Deadlock-In-Go/"/>
    <id>https://blog.kevinhu.me/2019/02/09/Debugging-An-Interesting-Deadlock-In-Go/</id>
    <published>2019-02-09T20:05:32.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>This week I’ve been chasing a deadlock issue in a Golang server application, which will essentially render the server unresponsive to client requests indefinitely and cannot recover in anyway without restarting. I’ve trying all ways days and nights, even ended up re-writing a small portion of the application to clean up all the locks - no luck.</p><a id="more"></a><h2>Root Cause</h2><p>The root cause of this vexing issue is the combination use of mutex locks and blocking channels. In Golang, channels are also used often as a powerful way for sychronization. They’re often used to protect inner states of a structure, or to distribute workloads, to make sure different actions are not taken at the same time.</p><p>See here: <a href="https://medium.com/stupid-gopher-tricks/more-powerful-synchronization-in-go-using-channels-f4a1c3242ed0" target="_blank" rel="noopener">https://medium.com/stupid-gopher-tricks/more-powerful-synchronization-in-go-using-channels-f4a1c3242ed0</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> value = &lt;-h.setValCh: <span class="comment">// set the current value.</span></span><br><span class="line">    <span class="keyword">case</span> h.getValCh &lt;- value: <span class="comment">// send the current value.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>By using a big select statement as a mux for all coming read and write requests, channels protect shared states, just like mutexes, and sometimes with more flexibility (e.g. when you include timer or ticker in the code). However it could be dangerous when people don’t realize, as a way of synchronization, channels are as well as prone to misuse, especially when mixed with mutexes.</p><p>Here’s an example of misusing channels to cause an deadlock. See if you can spot it:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-a:</span><br><span class="line">fmt.Println(<span class="string">"case A"</span>)</span><br><span class="line">&lt;-b</span><br><span class="line"><span class="keyword">case</span> &lt;-b:</span><br><span class="line">fmt.Println(<span class="string">"case B"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">fmt.Println(<span class="string">"case done"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It could be easy to reason about deadlocks when you’re using mutexes only, or when you’re using channels only, but perhaps not so easy when you’re mixing both.</p><p>Below is the simplified version of the deadlock bug, demonstrating how mutexes and channels used together can cause interesting issues. Without reading further can you spot the issue?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    mtx *sync.Mutex</span><br><span class="line">    <span class="comment">// other data structures</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    action <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">    clear  <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">    <span class="comment">// other channels and data structures</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := NewA()</span><br><span class="line">b := NewB()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewB</span><span class="params">()</span> *<span class="title">B</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;- clear:</span><br><span class="line">                <span class="comment">// clear records</span></span><br><span class="line">            <span class="keyword">case</span> &lt;- action:</span><br><span class="line">                a.Action()</span><br><span class="line">                <span class="comment">// ... other cases</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// other initializations</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Action</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a.Mtx.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.Mtx.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do action</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">Foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a.Mtx.Lock()</span><br><span class="line">    <span class="keyword">defer</span> a.Mtx.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do some other actions</span></span><br><span class="line">    b.clear &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The issue lies where <code>Action()</code>, and <code>Foo()</code> can be called simultaenously or in very close time, and they both enter the critical section of <code>A</code>'s mutex locks. And <code>B</code>'s mux uses blocking channels to coordinate different actions, the <code>b.clear &lt;- true</code> statement will block if code in previous case has not been completed.</p><p>Therefore, <code>a.Action()</code> and <code>a.Foo()</code> can both be locked, and <code>b.clear</code> is blocked as it’s waiting for <code>a.Action()</code> to finish, which is not going to happen when <code>a.Action()</code> is waiting for <code>a.Foo()</code> to unlock!</p><h2>Useful Debugging Tools</h2><p>In debugging experience I haven’t run into a very good tool that’ll analyze this type of deadlock. There are several tools that deals with mutex locks only. There’s one even built inside Golang’s runtime, but that’s not enough, as it only detects if all the goroutine are locked.</p><p>I’ve used <code>gdb</code> and Golang’s <code>pporf</code> library. The convenience of <code>pprof</code> library is that, if you’re writing a server application, you can directly register an HTTP endpoint with all useful debug output on <code>/debug/pprof</code>. The one I used dumped all the running goroutines in the application:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:10000/debug/pprof/goroutines?debug=1</span><br></pre></td></tr></table></figure><p>And when examining all the outputs when a deadlock happens, you need to pay attention to the following details:</p><ul><li>What mutex lock are still pending. As they’re competing with the locks, and can potentially be the culprit that contributed to the deadlock.</li><li>What channels are pending. This could be hard and easy to omit, as there can be a lot of channels that are pending by design: they are waiting for signals for certain actions, not necessarily out of a deadlock. So, it might be faster to start examining channels used in the sychronizing channels pattern mentioned above.</li></ul><p>On a side note, the <code>pprof</code> can be really useful if you’re trying to understand how the program is behaving. I even identified a resource leak in the code using <code>pprof</code> (maybe I’ll write another blog to discuss it). See more at:</p><ul><li><a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener">https://golang.org/pkg/net/http/pprof/</a></li><li><a href="https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/" target="_blank" rel="noopener">https://jvns.ca/blog/2017/09/24/profiling-go-with-pprof/</a></li><li><a href="https://blog.minio.io/debugging-go-routine-leaks-a1220142d32c" target="_blank" rel="noopener">https://blog.minio.io/debugging-go-routine-leaks-a1220142d32c</a></li></ul><p>Example goroutine output from <code>pprof</code>, from <a href="https://blog.minio.io/debugging-go-routine-leaks-a1220142d32c" target="_blank" rel="noopener">blog</a> mentioned above:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">goroutine 149 [chan send]:</span><br><span class="line">main.sum(0xc420122e58, 0x3, 0x3, 0xc420112240)</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:39 +0x6c</span><br><span class="line">created by main.sumConcurrent</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:51 +0x12b</span><br><span class="line"></span><br><span class="line">goroutine 243 [chan send]:</span><br><span class="line">main.sum(0xc42021a0d8, 0x3, 0x3, 0xc4202760c0)</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:39 +0x6c</span><br><span class="line">created by main.sumConcurrent</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:51 +0x12b</span><br><span class="line"></span><br><span class="line">goroutine 259 [chan send]:</span><br><span class="line">main.sum(0xc4202700d8, 0x3, 0x3, 0xc42029c0c0)</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:39 +0x6c</span><br><span class="line">created by main.sumConcurrent</span><br><span class="line">        /home/karthic/gophercon/count-instrument.go:51 +0x12b</span><br></pre></td></tr></table></figure><h2>Lesson Learned</h2><p>It’s easy to overlook channels as a powerful synchronization tool in Golang, and bad consequences may happen. Instead of expecting deadlock tools to come and save the day, it might be more efficient to reason about the code more prudently, with the following lessons in mind:</p><ul><li>Channels can be used for synchronizations as well.</li><li>Beware when you’re using channels and mutexes at the same time. Reason it well! The key is not to put the blocking channel send/receive inside a critical section.</li><li>Keep mutex protected sections as small as possible, right around the values you’re trying to protect if possible. You can even consider using getter/setter for structs with protected fields, and not expose mutexes as public. This will give you much better time when you’re reasoning with the code.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This week I’ve been chasing a deadlock issue in a Golang server application, which will essentially render the server unresponsive to client requests indefinitely and cannot recover in anyway without restarting. I’ve trying all ways days and nights, even ended up re-writing a small portion of the application to clean up all the locks - no luck.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.kevinhu.me/tags/Golang/"/>
    
      <category term="Mutex" scheme="https://blog.kevinhu.me/tags/Mutex/"/>
    
      <category term="Channel" scheme="https://blog.kevinhu.me/tags/Channel/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2019-01</title>
    <link href="https://blog.kevinhu.me/2019/01/22/2019-01-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2019/01/22/2019-01-Reading-Summary/</id>
    <published>2019-01-23T04:21:34.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3><a href="https://autotranslucence.wordpress.com/2018/03/30/becoming-a-magician/" target="_blank" rel="noopener">Becoming a magician</a></h3><p>If you want to become a ‘magician’, the ones that with intricate moves and skills to amaze the audience, you’ll need to adopt a growing mindset:</p><p>you cannot become a ‘magician’ with the same progress rate, or by simply imagining a better self: sometimes the way to changes involves a fundamental shift in how you see the world. And to achieve that you’ll need to observe fellow ‘magicians’, learn the difference, and make non-linear progresses.</p><a id="more"></a><h3><a href="https://theescapeartist.me/2018/12/04/how-to-get-rich-without-getting-lucky/" target="_blank" rel="noopener">How to Get Rich (Without getting lucky)</a></h3><p>Some interesting takeaways:</p><ul><li>You will get rich by giving society what it wants but does not yet know how to get. At scale.</li><li>Arm yourself with specific knowledge, accountability, and leverage.</li><li>Specific knowledge is found by pursuing your genuine curiosity and passion rather than whatever is hot right now.</li><li>Study microeconomics, game theory, psychology, persuasion, ethics, mathematics, and computers.</li></ul><p>I don’t usually like the “success stories” or “how to become rich” genre of books/blogs/articles, and I keep my suspicions with this one, too. Nevertheless I find most of the principles described in this blog reasonable, and the author sounded sincere: build skills, build trust, build networks, build leverages, and finally, build your own brand.</p><p>There are quite a few books out there how to teach you to be “successful”, and some time I’d like to do some research on those, with more caution than I approach other books.</p><h3><a href="https://www.history.com/news/second-gilded-age-income-inequality" target="_blank" rel="noopener">Are We Living in the Gilded Age 2.0 ?</a></h3><p>Extraordinary similarities observed between right now, and the late 19 century to early 21 century, where technology brings human society unrivaled fortune and wealth - unevenly. The society underwent serious transformation, and paved way to modern liberalism. The same might be expected, or not. History never follows scripts.</p><h3><a href="http://cognitivemedium.com/srs-mathematics" target="_blank" rel="noopener">Using spaced repetition systems to see through a piece of mathematics</a></h3><p>Another great piece from Michael Neilsen, on how Anki systems help improve not just memory, but the whole process of understanding itself.</p><h3><a href="https://www.nytimes.com/2018/12/11/opinion/solzhenitsyn-soviet-union-putin.html" target="_blank" rel="noopener">The Writer Who Destroyed an Empire</a></h3><p>Aleksandr Solzhenitsyn - the man who told the truth. He spread the knowledge of the gulag system and how it’s used to suppress and mistreat people, and undermined the credibility of the Soviet Union Iron Curtain empire, one of the many factors that brought it to its knees.</p><h3><a href="https://www.technologyreview.com/s/612588/its-time-for-a-bill-of-data-rights/" target="_blank" rel="noopener">It’s time for a Bill of Data Rights</a></h3><p>The new digital age problems require new solutions. In the article the author proposed the following ‘Bill of Rights’ for the new digital age:</p><ul><li>The right of the people to be secure against unreasonable surveillance shall not be violated.</li><li>No person shall have his or her behavior surreptitiously manipulated.</li><li>No person shall be unfairly discriminated against on the basis of data.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3&gt;&lt;a href=&quot;https://autotranslucence.wordpress.com/2018/03/30/becoming-a-magician/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Becoming a magician&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to become a ‘magician’, the ones that with intricate moves and skills to amaze the audience, you’ll need to adopt a growing mindset:&lt;/p&gt;
&lt;p&gt;you cannot become a ‘magician’ with the same progress rate, or by simply imagining a better self: sometimes the way to changes involves a fundamental shift in how you see the world. And to achieve that you’ll need to observe fellow ‘magicians’, learn the difference, and make non-linear progresses.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Technology" scheme="https://blog.kevinhu.me/tags/Technology/"/>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>Book Review: Weaving The Web</title>
    <link href="https://blog.kevinhu.me/2019/01/13/Book-Review-Weaving-The-Web/"/>
    <id>https://blog.kevinhu.me/2019/01/13/Book-Review-Weaving-The-Web/</id>
    <published>2019-01-13T21:27:58.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>The book “Weaving The Web”, from the creator of the World Wide Web himself, Sir Tim Berners-Lee, was first published in around 1999. But it was quite pleasant to read, and I think was surprisingly relevant to what’s going on with the Internet and the web now, in 2019, 20 years later.</p><a id="more"></a><p>Sir TBL introduced his experience of coming up with the idea of a universal “information aggregator” that unifies access to all world’s knowledge and information online while working at CERN, how he cooperated with similar brilliant minds to come up with first tools for the web, how he pushed the web into momentum, and finally, his own reflections onthe impact of the web on society, both positive and negative.</p><p>The “Internet” was already a widespread concept before Sir TBL started working on the web. And Sir TBL brought up with this simple yet powerful concept: all the world’s document on the Internet addressed by a “Universal Resource Locator”, and linked together via “hyperlinks”. In this way, you can start your research from any documents, and find all relevant resources by simply clicking on these “links” from any document. And in this way, all world’s online knowledge is weaved together and accessible to you. This abstraction helped made the Internet much more accessible to the public, and opened doors to waves of innovations and business opportunities. I think this is one of the reasons why TBL and his invention was great: he pondered on one complicated problem of organizing the Internet’s information long and hard and came up with the most essential but powerful abstraction, which benefited the whole world.</p><p>Thanks to CERN, Sir TBL was able to work on this side-project, and finally made it completely free and open to the world. Also, thanks to Sir TBL, when he left CERN to cofound WWW Consortium (W3C) in MIT, he wanted to make sure the Internet is kept running free and open to all. Without his spirit of openness and efforts to keep the web on this track, the web would be a much more dismal place. For this, he should be truly respected.</p><p>In the book, he also discussed his philosophy of keeping the open web: including topics on privacy, net neutrality, censorship, etc. It’s striking to see some of these ideas are still so relevant, if not more important today. In 2019 we are experiencing woes from abuses of web’s power, from the very Internet conglomerates the web helped to nurture, and governments who use it to rip off the freedom it’s designed to give people. That’s why I find this book still relevant and interesting today: the founder had expressed his concerns on the web long before. Had we listened to his ideas more carefully, we would be more aware and prepared to save it.</p><p>There are more interesting nuggets in the book: the whole thought process when he designed the web, the anecdotes when he first demoed the web, the stories of the first browsers of the web, and his musings on semantic web and his ultimate goal to “link the world’s information”. In all, it’s a recommend to read.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The book “Weaving The Web”, from the creator of the World Wide Web himself, Sir Tim Berners-Lee, was first published in around 1999. But it was quite pleasant to read, and I think was surprisingly relevant to what’s going on with the Internet and the web now, in 2019, 20 years later.&lt;/p&gt;
    
    </summary>
    
    
      <category term="BookReview" scheme="https://blog.kevinhu.me/tags/BookReview/"/>
    
      <category term="WorldWideWeb" scheme="https://blog.kevinhu.me/tags/WorldWideWeb/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading 10-22: Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</title>
    <link href="https://blog.kevinhu.me/2018/10/22/Paper-Reading-10-22-Dapper-a-Large-Scale-Distributed-Systems-Tracing-infrastructure/"/>
    <id>https://blog.kevinhu.me/2018/10/22/Paper-Reading-10-22-Dapper-a-Large-Scale-Distributed-Systems-Tracing-infrastructure/</id>
    <published>2018-10-22T06:24:08.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Link: <a href="https://ai.google/research/pubs/pub36356" target="_blank" rel="noopener">https://ai.google/research/pubs/pub36356</a></p><p>This is a 2010 paper that presents Dapper, a tracing infrastructure from Google,to solve problems at Google scale, in its massive scale distributed systems,where a service could invoke very deep RPC calls across different nodes in thecluster, which makes tracing quite challenging.</p><a id="more"></a><p>Highlights and takeaways:</p><h2>Design</h2><p>The paper introduces the following concepts to describe the system:<code>tree</code>, <code>span</code>, and <code>annotation</code>.</p><h3><code>tree</code></h3><p><img src="figure1.png" alt="Figure1"></p><p>A simple service call could span a few different nodes in the system,forming a calling tree between different services, as shown abovein figure1.</p><h3><code>span</code></h3><p><img src="figure2.png" alt="Figure2"></p><p>In Dapper trace tree, the tree nodes are basic units of work which isreferred to as <code>spans</code>. The edge indicates a casual relationship a spanand a parent. See figure2.</p><p>Each trace has a single trace id across all its children spans.Each span has one id, and records the relationships between parentand child. See figure2.Parent spans always starts before child and ends after children finish.</p><p>Dapper is designed to follow distributed control paths with near-zerointervention from the application developers, by instrumenting thefollowing libraries:</p><ul><li>thread library: Dapper attaches a trace context to thread-localstorage.</li><li>asynchronous control flow library: Dapper instruments the control flow library to ensureall async callbacks store the context of their creator.</li><li>IPC library: All Google’s inter-process communication is built arounda single RPC framework, for all communications on same machine,and across network.</li></ul><h3><code>annotation</code></h3><p>The instrumentation above is sufficient to derive traces of complexdistributed systems and made transparent to users, but Dapper alsoprovides capabilities for users to annotate important sections totheir applications.</p><h2>Sampling</h2><p>To improve performance, one of Dapper’s design decision issampling. Dapper team noticed that Samplingat a relative small rate can get pretty good results with insightsto critical performance issues.</p><h2>Trace collection</h2><p>Trace collection is divided to the following steps:</p><ul><li>Dapper span data is written to local log files.</li><li>Local logs are collected by Dapper daemons.</li><li>And are finally written to Bigtable.</li><li>User can query and analyze different traces with a Dapper webinterface, which aggregates all logs and sort by tracing ids.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Link: &lt;a href=&quot;https://ai.google/research/pubs/pub36356&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ai.google/research/pubs/pub36356&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a 2010 paper that presents Dapper, a tracing infrastructure from Google,
to solve problems at Google scale, in its massive scale distributed systems,
where a service could invoke very deep RPC calls across different nodes in the
cluster, which makes tracing quite challenging.&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="distributed systems" scheme="https://blog.kevinhu.me/tags/distributed-systems/"/>
    
      <category term="tracing" scheme="https://blog.kevinhu.me/tags/tracing/"/>
    
      <category term="infrastructure" scheme="https://blog.kevinhu.me/tags/infrastructure/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading 10-14: A Reconfigurable Fabric for Accelerating Large-Scale Datacenter Services</title>
    <link href="https://blog.kevinhu.me/2018/10/14/14-Paper-Reading-2-Catapult/"/>
    <id>https://blog.kevinhu.me/2018/10/14/14-Paper-Reading-2-Catapult/</id>
    <published>2018-10-15T02:47:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/" target="_blank" rel="noopener">https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/</a></p><p>This is one of the series of papers from Microsoft’s <a href="https://www.microsoft.com/en-us/research/project/project-catapult/" target="_blank" rel="noopener">Project Catapult</a>,which studies leveraging reconfigurable devices (FPGA, etc.) to accelerate data center, from very specificaccelerating algorithms like page ranking for Bing search engine, to more sophisticated machinelearning frameworks like DNN.</p><p>This is one of their early publications, which introduces the basic design and implementationof the FPGA accelerated datacenter. It covers the very fundamental details of all aspects ofserver design, from hardware, network topology, FPGA core design, fault-tolerant cluster managementsoftware design, workload scheduling algorithm, and etc…</p><a id="more"></a><p>Some highlights and takeaways:</p><h2>Hardware</h2><p>Catapult hardware is integrated with existing server-grade blades, which takes the space on thePCIe of the motherboard, through a daughter board with one single high-end FPGA card.</p><h2>Network Design</h2><p>The daughter-boardcards connects each other with a fast secondary network, independent of the CPU network. The secondarynetworks form a 6x8 torus topology network (see more details in paper), which gives fast inter-FPGA communications,good routability but not too much cabling complexity. The CPU network connects to a 48-port switch foreach pod.</p><h2>Software Interface</h2><p>On FPGA space has been divided into <em>Shell</em> and <em>Role</em>. <em>Shell</em> manages the common libraries or functionalitieslike memory management, serial link, or PCIe, reconfiguration logics, etc… The <em>Role</em> space is responsible foractual acceleration algorithm, which will be reloaded for each reconfiguration when the FPGA functionality needsto be updated.</p><p>FPGAs will be reconfigured from time to time and certain software must be designed to ensure to take the FPGAcompletely offline and ignored by neighbors, to ensure correct operations.</p><p>Debugging might be hard to achieve through typical JTAG hardware debugging facilities, considering the scaleof the datacenter. The paper presents an ‘always-on’ data collector that captures the key components andsaves them to a circular-buffer log.</p><p>The software interfaces divides the algorithm into 7-stages and distributed them to a 8-node FPGA group, withone for redundancy. The paper describes how the network accelerates the ‘Feature Extraction’, which producesa single score at the last stage, indicating how close the document is to the search key word.</p><p>All the queries are queued in memory in DRAM. The Queue Manager takes documents from each queue, then sends themdown the pipeline. It also manages the model reloads in the pipeline, which calculates different feature ‘scores’ forqueries.</p><h2>Evaluation</h2><p>The Catapult project, according to the paper, 'reduces the worst-case latency by 29% in the 95 percentile distribution’in their evaluation environment, and provides 95% gain in throughput relative to software.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.microsoft.com/en-us/research/publication/a-reconfigurable-fabric-for-accelerating-large-scale-datacenter-services/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is one of the series of papers from Microsoft’s &lt;a href=&quot;https://www.microsoft.com/en-us/research/project/project-catapult/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Project Catapult&lt;/a&gt;,
which studies leveraging reconfigurable devices (FPGA, etc.) to accelerate data center, from very specific
accelerating algorithms like page ranking for Bing search engine, to more sophisticated machine
learning frameworks like DNN.&lt;/p&gt;
&lt;p&gt;This is one of their early publications, which introduces the basic design and implementation
of the FPGA accelerated datacenter. It covers the very fundamental details of all aspects of
server design, from hardware, network topology, FPGA core design, fault-tolerant cluster management
software design, workload scheduling algorithm, and etc…&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="HPC" scheme="https://blog.kevinhu.me/tags/HPC/"/>
    
      <category term="FPGA" scheme="https://blog.kevinhu.me/tags/FPGA/"/>
    
      <category term="Datacenter" scheme="https://blog.kevinhu.me/tags/Datacenter/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2018-10-14</title>
    <link href="https://blog.kevinhu.me/2018/10/14/14-Reading-Summary-2018-10/"/>
    <id>https://blog.kevinhu.me/2018/10/14/14-Reading-Summary-2018-10/</id>
    <published>2018-10-14T20:52:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Posts I find interesting around the web:</p><h2>Miscalleneous Posts</h2><h3><a href="http://augmentingcognition.com/ltm.html" target="_blank" rel="noopener">Augumenting Long-term Memory</a></h3><p>A very interesting posts on augumenting long-term memory, based on Ebbinghaus’ forgetting curve theory: use flashcards to memorize everything you’ve learned, and even trivias like your friends’ birthday, etc… It uses Anki flashcard software to go through the list of stuff.</p><p>Author also reasoned about the benefits of memorizing all the details, concepts, and “everything”: the details are the building blocks of a field of knowledge, and memorizing them dramatically helps the understanding this field.</p><p>It’s a long read but a deep discussion, and I find it a joyful read.</p><h3><a href="https://www.edge.org/conversation/jared_diamond-how-to-get-rich" target="_blank" rel="noopener">How To Get Rich</a></h3><p>An interesting talk from Jared Diamond, the author of <em>Guns, Germs, and Steel</em>. Despite the kind of misleading title, it’s an interesting take on history and the progress of human civilizations, and how competitions between civilizations influence their prosperity.</p><h2>Systems Design and Distributed Systems</h2><h3><a href="https://medium.com/dm03514-tech-blog/you-are-going-to-need-it-using-interfaces-and-dependency-injection-to-future-proof-your-designs-2cf6f58db192" target="_blank" rel="noopener">SoftwareArch: You are going to need it — Using Interfaces and Dependency Injection to future proof your designs</a></h3><p>An introduction to interfaces in Golang, and how dependency injection can help you design large projects.</p><h3><a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener">System Design Primer</a></h3><p>The basic concepts of system design, web design, basic principals and distributed systems design. A collaborated effort on Github.</p><h3><a href="https://landing.google.com/sre/book/chapters/distributed-periodic-scheduling.html" target="_blank" rel="noopener">Distributed Periodic Scheduling with Cron</a></h3><p>A chapter from Google’s new Site Reliability Engineering book, on how to design a distributed cron job daemon, and handle problems including fault-tolerance, repeatedly scheduled jobs, overloading the cluster, etc… The whole book is a very valuable summary of experience of automation and distributed systems design at Google, and at Google scale. Definitely will read through other chapters.</p><h3><a href="https://eli.thegreenplace.net/2018/go-hits-the-concurrency-nail-right-on-the-head/" target="_blank" rel="noopener">Go hits the concurrency nail right on the head</a></h3><p>Eli Bendersky’s blog post on why Golang gracefully handles the problems of concurrency at language level, that other major languages handles rather awkwardly.</p><ul><li>Use goroutine to unify the interface to coroutines and thread.</li><li>Use channels to enforce the ‘share memory by communicating’ pattern.</li></ul><p>Which greatly reduces the programmer’s mental burden of design highly concurrent systems.</p><h3><a href="http://andy.terrel.us/blog/2012/09/27/starting-with-python/" target="_blank" rel="noopener">Getting started with Python in HPC</a></h3><p>An introduction to learning Python in HPC, from introduction to Python language, to distributed HPC frameworks for Python.</p><h3><a href="https://medium.com/@marinsmiljanic/a-whirlwind-tour-of-distributed-systems-918d6632eb78" target="_blank" rel="noopener">A Whirlwind Tour of Distributed Systems</a></h3><p>A list of concepts, papers, and interesting blog posts on distributed systems design.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Posts I find interesting around the web:&lt;/p&gt;
&lt;h2&gt;Miscalleneous Posts&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;http://augmentingcognition.com/ltm.html&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="systems" scheme="https://blog.kevinhu.me/tags/systems/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading 09-09: C++ and the Perils of Double-Checked Locking</title>
    <link href="https://blog.kevinhu.me/2018/09/09/Weekly-Paper-Reading-1-DCLP/"/>
    <id>https://blog.kevinhu.me/2018/09/09/Weekly-Paper-Reading-1-DCLP/</id>
    <published>2018-09-09T18:03:20.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>An interesting paper on the perils of C++, design pattern and multi-threading when they’re mixed together:</p><p><a href="http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf" target="_blank" rel="noopener">C++ and the Perils of Double-Checked Locking</a></p><p>The DCLP(Double-Checked Locking Pattern) is often-used in singleton design pattern: you’d like to initialize a shared object for singleton pattern, you follow the steps:</p><ul><li>check lock if the resource is already initialized</li><li>if no, lock the mutex</li><li>check again if the resource is locked inside the mutex-protected area.</li><li>and again if no, initialize the object</li></ul><p>See C++ example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Singleton* Singleton::instance() &#123;</span><br><span class="line">  if (pInstance == 0) &#123;              // 1st check, to avoid locking every time</span><br><span class="line">    Lock lock;</span><br><span class="line"></span><br><span class="line">    if (pInstance == 0) &#123;            // 2nd check, a safe check to guarantee correctness</span><br><span class="line">      pInstance = new Singleton;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return pInstance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This pattern however, introduces subtle bugs when described in C++ with multi-threading.</p><p>The issue is with this statement:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pInstance = new Singleton;</span><br></pre></td></tr></table></figure><p>The following steps happen:</p><ol><li>Allocate memory for the object</li><li>Construct an object in the allocated memory.</li><li>Assign <code>pInstance</code> to the allocated memory.</li></ol><p>But C++ specification don’t enforce the steps happen in order, and compilers are therefore not constrained to reorder them for sake of optimization. As long as the observable outcome of the instructions are correct, compilers are free to place instructions in an order so that CPUs are most utilized. Consider the following case with DCLP:</p><ul><li>Thread A execute the DCLP piece of code for the first time, performs the 1st check, lock the mutex, performs the 2nd check, allocates memory for Singleton object, points the pInstance to the allocated memory. But before the Singleton object is constructed, thread A is suspended or another thread is scheduled at the same time.</li><li>Thread B enters DCLP area, determines that <code>pInstance</code> is non-null, and start using the object even before it’s fully constructed, and start accessing the <code>Singleton</code> object.</li></ul><p>Oops. This is a very subtle bug, and hard to detect issue when we’re trying to initialize a shared resource once.</p><p>The paper digs into details on how compiler can leverage all sorts of different optimizations to spoil you effort to correct the DCLP code, and how to actually implement it correctly with <code>volatile</code> keyword.</p><p>It’s a very interesting paper on algorithm, C++, and programming, It makes you stand in awe of the difficulty and intricacies of C++ and multi-threaded programming.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;An interesting paper on the perils of C++, design pattern and multi-threading when they’re mixed together:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ari
      
    
    </summary>
    
      <category term="Paper" scheme="https://blog.kevinhu.me/categories/Paper/"/>
    
    
      <category term="Programming" scheme="https://blog.kevinhu.me/tags/Programming/"/>
    
      <category term="C++" scheme="https://blog.kevinhu.me/tags/C/"/>
    
      <category term="Multithread" scheme="https://blog.kevinhu.me/tags/Multithread/"/>
    
      <category term="WeeklyPaper" scheme="https://blog.kevinhu.me/tags/WeeklyPaper/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2018-06</title>
    <link href="https://blog.kevinhu.me/2018/07/09/09-2018-07-09-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2018/07/09/09-2018-07-09-Reading-Summary/</id>
    <published>2018-07-09T05:04:23.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Posts I found interesting around the web:</p><h3><a href="http://man7.org/linux/man-pages/man7/cgroups.7.html" target="_blank" rel="noopener">man7 Linux cgroups</a></h3><p>Linux manual page to cgroups feature in the kernel, which restricts Linux processes CPU, max process numbers, memory usage, network setup and etc…</p><h3><a href="http://man7.org/linux/man-pages/man7/namespaces.7.html" target="_blank" rel="noopener">man7 Linux namespaces</a></h3><p>Linux manual page to namespaces feature in the kernel. Namespaces can be specified by the <code>clone</code> syscall, and isolates the child process’ cgroup, IPC, network, mount, domain names, and etc…</p><h3><a href="https://www.youtube.com/watch?v=8fi7uSYlOdc" target="_blank" rel="noopener">GOTO 2018 Containers From Scratch</a></h3><p>When all the ingredients come together, it’s the foundation where Docker is built upon. This very interesting talk from GOTO2018 demonstrates how you can use the following technologies already built-in the Linux kernel to create your own very small proof-of-concept docker:</p><ul><li><code>chroot</code></li><li><code>namespace</code></li><li><code>cgroups</code></li></ul><p>It also includes very interesting details including (but not limited to):</p><ul><li>You’ll need to mount the <code>/proc</code> virtual file systems for your ‘containerized’ child process.</li><li>You’ll need to provide ‘UnshareFlag’ <code>CLONE_NEWNS</code> to the <code>clone</code> system call, to ‘unshare’ the mount point from the child process from the parent process, so that parent doesn’t see child’s mount points (which could be many and messy).</li></ul><h3><a href="https://www.quantamagazine.org/a-classical-math-problem-gets-pulled-into-the-modern-world-20180523/" target="_blank" rel="noopener">A Classical Math Problem Gets Pulled Into the Modern World</a></h3><p>An optimization problem is being used in AI, and therefore all AI applications, including self-driving, etc. Math is magical.</p><h3><a href="https://www.washingtonpost.com/news/wonk/wp/2016/10/25/somethings-terribly-wrong-with-the-internet-and-wikipedia-might-be-able-to-fix-it/?utm_term=.9594628c76ca" target="_blank" rel="noopener">Wikipedia is fixing one of Internet’s biggest flaws</a></h3><p>As it actually encourages collaborations, discussions, and exposure to opposing views.</p><h3><a href="https://dev.to/napicellatwit/golang-patterns---part-2-1906" target="_blank" rel="noopener">Golang Patterns - Part 2</a></h3><h3><a href="https://two-wrongs.com/technical-writing-learning-from-kernighan.html" target="_blank" rel="noopener">Technical Writing: Learning from Kernighan</a></h3><p>Learning technical writing from the author of your favorite C programming book, ‘The C Programming Language’.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Posts I found interesting around the web:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://man7.org/linux/man-pages/man7/cgroups.7.html&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Linux" scheme="https://blog.kevinhu.me/tags/Linux/"/>
    
      <category term="Docker" scheme="https://blog.kevinhu.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>A Note on Linux Hugepages</title>
    <link href="https://blog.kevinhu.me/2018/07/01/01-Linux-Hugepages/"/>
    <id>https://blog.kevinhu.me/2018/07/01/01-Linux-Hugepages/</id>
    <published>2018-07-01T23:30:20.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Page table is where Linux stores virtual to physical page address translation, and its size can get huge when memory usage is high. One way to reduce the size of page tables, and reduce the number of page faults, is to use huge pages. I’ve been digging some information on hugepages for my own curiosity, and it looks like Linux has pretty good support for huge pages. And this blog serves as a quick note on my readings.</p><a id="more"></a><h2>Hugepages</h2><p>The sysctl directory contains <code>/sys/kernel/mm/hugepages/hugepages-{pagesize}kB/</code> control files and information on hugepages, where pagesize could be 1048576 or 2048, corresponding to 1GB or 2MB of hugepage size.</p><p>To get information on hugepages on your Linux systems, the <code>hugepages</code> directory contains the controlling files:</p><ul><li><code>nr_hugepages</code></li><li><code>nr_hugepages_mempolicy</code></li><li><code>nr_overcommit_hugepages</code></li><li><code>free_hugepages</code></li><li><code>resv_hugepages</code></li><li><code>surplus_hugepages</code>.</li></ul><p>You can also get hugepage-related information from <code>/proc/meminfo</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HugePages_Total:    2048</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br></pre></td></tr></table></figure><p>The <a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt" target="_blank" rel="noopener">Kernel Documentation of Hugetlbpage</a> contains the detailed information and explanation of the purpose and usage of hugepage files, as well as <code>meminfo</code> fields.</p><h2>Allocating Hugepages</h2><p>The most convenient way to reserve hugepages on x86_64 Linux is to echo into the sysctl file <code>/sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</code>, e.g.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</span><br></pre></td></tr></table></figure><p>And for user to access and use the huge pages, Linux actually provides a quite convenient interface: the <code>hugetlbfs</code> file system, e.g.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t hugetlbfs nodev /mnt/huge</span><br></pre></td></tr></table></figure><p>Which mounts a pseudo filesystem of type <code>hugetlbfs</code> on <code>/mnt/huge</code>, and uses the default huge pagesize specified by the system, and all files created inside the directory uses huge pages.</p><p>And after that, you can use hugepage-backed memory by creating files inside <code>/mnt/huge</code> directory. See example in Linux source tree: <a href="https://github.com/torvalds/linux/blob/master/tools/testing/selftests/vm/hugepage-mmap.c" target="_blank" rel="noopener">hugepage-mmap.c</a>. The author takes the following steps:</p><ul><li>Open a file inside <code>/mnt</code> with read-write permission.</li><li>Map memory to the file using <code>mmap</code>, with proper protection and flags set (<code>PROT_READ | PROR_WRITE</code> and <code>MAP_SHARED</code> in this case).</li><li>Use the hugepage-backed memory as usual.</li><li>Clean up memory and file.</li></ul><h2>Enable Hugepage On Start</h2><p>According to Linux <a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt" target="_blank" rel="noopener">Kernel Documentation</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System administrators may want to put this command in one of the local rc</span><br><span class="line">init files.  This will enable the kernel to allocate huge pages early in</span><br><span class="line">the boot process when the possibility of getting physical contiguous pages</span><br><span class="line">is still very high.</span><br></pre></td></tr></table></figure><p>And to quote the <a href="https://lwn.net/Articles/376606/" target="_blank" rel="noopener">LWN article</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If the huge page pool is statically allocated at boot-time, then this section</span><br><span class="line">will not be relevant as the huge pages are guaranteed to exist. In the event</span><br><span class="line">the system needs to dynamically allocate huge pages throughout its lifetime,</span><br><span class="line">then external fragmentation may be a problem.</span><br></pre></td></tr></table></figure><p>So to avoid external fragmentation and make sure that the hugepage allocation is always successful, we may want to reserve hugepages memory regions on boot time. This <a href="https://wiki.debian.org/Hugepages" target="_blank" rel="noopener">Debian Wiki Page</a> provides a way to do that. To reserve number of hugepages, add the following line in <code>/etc/sysctl.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.nr_hugepages = 1024</span><br></pre></td></tr></table></figure><p>And to mount it automatically on system start, simply add to <code>/etc/fstab</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugetlbfs /hugepages hugetlbfs mode=1770,gid=2021 0 0</span><br></pre></td></tr></table></figure><h2>Advanced Topics</h2><p>There are other advanced topics, which probably will not be covered in the scope of this quick note:</p><ul><li><strong>Transparent Huge Pages</strong>: system automatically decides if memory should be backed by hugepages, which make usage of hugepage memory much easier.</li><li><strong>libhugetlbfs APIs</strong>: <code>libhugetlbfs</code> provides programmer APIs to manage and access hugepage memory as well. Hugepage library utilities <code>hugectl</code> can overload Linux standard <code>shmget()</code> functions to allow huge pages to be used by allocating shared memory.</li><li><strong>Text And Data</strong>: <code>hugectl</code> has options to run an application, with its <code>text</code> and <code>data</code> section mapped by hugepages, which gives potential performance benefits.</li></ul><p>These are ideas worth digging into in the future, for applications where hugepages can potential give a good performance boost.</p><h2>References</h2><ul><li><a href="https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt" target="_blank" rel="noopener">Kernel Documentation of Hugetlbpage</a></li><li><a href="https://lwn.net/Articles/374424/" target="_blank" rel="noopener">LWN Intro to Huge Pages (1 Intro)</a></li><li><a href="https://lwn.net/Articles/375096/" target="_blank" rel="noopener">LWN Intro to Huge Pages (2 Interfaces)</a></li><li><a href="https://lwn.net/Articles/375096/" target="_blank" rel="noopener">LWN Intro to Huge Pages (3 Administration)</a></li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge#s-memory-configure_hugepages" target="_blank" rel="noopener">Redhat Documentation on Performance Tuning: 5.2 Huge Pages And Transparent Huge Pages</a></li><li><a href="https://github.com/torvalds/linux/blob/master/tools/testing/selftests/vm/hugepage-mmap.c" target="_blank" rel="noopener">hugepage-mmap.c: Hugepage example in Linux source tree</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Page table is where Linux stores virtual to physical page address translation, and its size can get huge when memory usage is high. One way to reduce the size of page tables, and reduce the number of page faults, is to use huge pages. I’ve been digging some information on hugepages for my own curiosity, and it looks like Linux has pretty good support for huge pages. And this blog serves as a quick note on my readings.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://blog.kevinhu.me/categories/Programming/"/>
    
    
      <category term="Linux" scheme="https://blog.kevinhu.me/tags/Linux/"/>
    
      <category term="Programming" scheme="https://blog.kevinhu.me/tags/Programming/"/>
    
      <category term="Hugepage" scheme="https://blog.kevinhu.me/tags/Hugepage/"/>
    
  </entry>
  
  <entry>
    <title>Reading-Summary 2018-05</title>
    <link href="https://blog.kevinhu.me/2018/05/21/2018-05-21-Reading-Summary/"/>
    <id>https://blog.kevinhu.me/2018/05/21/2018-05-21-Reading-Summary/</id>
    <published>2018-05-21T05:48:06.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Posts I found interesting during my reading:</p><h3><a href="https://fabxc.org/tsdb/" target="_blank" rel="noopener">Writing a Time Series Database from Scratch</a></h3><p>The author’s experience in writing a time-series database from groundup, for Prometheus.</p><h3><a href="https://improbable.io/games/blog/thanos-prometheus-at-scale" target="_blank" rel="noopener">Introducing Thanos: Prometheus at Scale</a></h3><p>The effort to scale Prometheus with a new project Thanos, with Kubernetes sidecar pattern, to read data from individual nodes, pre-process (e.g. sampling), and submit to acentralized data storage and display.</p><h3><a href="http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html" target="_blank" rel="noopener">A Beginner’s Guide To Scaling To 11 Million+ Users On Amazon’s AWS</a></h3><p>What kind of machine/cluster you’ll need for different size of user base (from 1 to billions).</p><h3><a href="https://medium.com/netflix-techblog/netflix-flamescope-a57ca19d47bb" target="_blank" rel="noopener">Nexflix FlameScope</a></h3><p>A display of CPU trace as a Github-style texture tiles.</p><h3><a href="http://ithare.com/a-usable-c-dialect-that-is-safe-against-memory-corruption/" target="_blank" rel="noopener">A Usable C++ Dialect that is Safe Against Memory Corruption</a></h3><p>IT-‘No Bug’-Hare is an interesting blog I found recently, focused on system, C++ language and game design. A good read for C++ fanatics and system designers.</p><hr><p>I’m feeling guilty for not updating for so long. But on the bright side: I’m back.</p><p>As a part of work requirements I’m taking on Golang and some small distributed system design jobs. It’s an interesting language for this task: network, systems, infrastructures, etc. I’m having mixed but mostly positive feelings about this language, and maybe will share my experience when I got a chance.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Posts I found interesting during my reading:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://fabxc.org/tsdb/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing a Time Seri
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Technology" scheme="https://blog.kevinhu.me/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2017-06</title>
    <link href="https://blog.kevinhu.me/2017/06/11/Reading-Summary-2017-06/"/>
    <id>https://blog.kevinhu.me/2017/06/11/Reading-Summary-2017-06/</id>
    <published>2017-06-12T00:54:11.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a while since I ever post a reading summary never mention a new blog post. Writing is a time demanding job.</p><h1>Society and Technology</h1><h3><a href="https://svpow.com/2017/03/22/why-do-we-manage-academia-so-badly/" target="_blank" rel="noopener">Why do we manage academia so badly?</a></h3><p><strong>“Managers want metrics that are easy to calculate, easy to understand, and quick to yield a value …metrics with these desirable properties are almost always worse than useless.”</strong></p><p>Easy metrics are also easily “hacked” - people “hack” the metrics to make statistics look good, while deviate from the original purpose of academia: to achieve good quality research.</p><p>See also:</p><p><a href="https://svpow.com/2017/03/17/every-attempt-to-manage-academia-makes-it-worse/" target="_blank" rel="noopener">Every attempt to manage academia makes it worse</a></p><h3><a href="https://arstechnica.com/gaming/2017/04/in-memoriam-reddits-72-hour-live-graffiti-wall-as-a-social-experiment/" target="_blank" rel="noopener">Did Reddit’s April Fool’s gag solve the issue of online hate speech?</a></h3><p>An interesting, anarchic style experiment on Reddit: let thousands of Redditers draw a picture all at the same time, what would possibly happen? It turned out to be surprisingly good.</p><h3><a href="https://www.theguardian.com/technology/2017/mar/11/tim-berners-lee-web-inventor-save-internet" target="_blank" rel="noopener">Tim Berners-Lee: I invented the web. Here are three things we need to change to save it</a></h3><p>Tim Berners-Lee: The Father of the World Wide Web and Turing Award winner believes the web nowadays has serious flaws, namely the loss of control of personal privacy, rampant spreading of misinformation on the web, and manipulations from the political campaigns online. It took everyone to build the web we have today, and it takes everyone to fix it now.</p><p>More reports and readings on Tim Berners-Lee:</p><ul><li><a href="https://www.theguardian.com/technology/2009/mar/11/berners-lee-internet-data" target="_blank" rel="noopener">Web inventor warns against third-party internet snooping</a></li><li><a href="https://www.theguardian.com/technology/2017/apr/04/tim-berners-lee-online-privacy-interview-turing-award" target="_blank" rel="noopener">Tim Berners-Lee: selling private citizens’ browsing data is ‘disgusting’</a></li><li><a href="https://www.w3.org/DesignIssues/GovData.html" target="_blank" rel="noopener">Putting Government Data Online</a></li></ul><a id="more"></a><h3><a href="http://shelfjoy.com/shelfjoy/alan-kay-from-viewpoints-research-institute-recommends-his-reading-list-for-beginners" target="_blank" rel="noopener">Alan Kay’s Reading List</a></h3><p>Posted here again. He did so many tons of readings to get his insights on science, Computer Science, technology and society. It’s gonna be a long but joyful road.</p><h3><a href="http://theoatmeal.com/comics/believe" target="_blank" rel="noopener">You’re Not Going To Believe What I’m About To Tell You</a></h3><p>Lesson 101 for a netizen: handling viewpoints that contradict your own. A good read.</p><h3><a href="https://medium.com/@cdixon/crypto-tokens-a-breakthrough-in-open-network-design-e600975be2ef" target="_blank" rel="noopener">Crypto Tokens: A Breakthrough in Open Network Design</a></h3><p>How Ethereum and BlockChain technology may bring us a truly open, distributed Internet. Maybe.</p><h3><a href="https://blog.yalabot.com/i-got-sick-of-commoditized-content-for-entrepreneurs-heres-what-i-started-watching-instead-cdf9a5b28652" target="_blank" rel="noopener">I got tired of commoditized content for entrepreneurs. Here’s what I started watching instead.</a></h3><p>A curated list of video courses/podcasts for entrepreneurs.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been a while since I ever post a reading summary never mention a new blog post. Writing is a time demanding job.&lt;/p&gt;
&lt;h1&gt;Society and Technology&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;https://svpow.com/2017/03/22/why-do-we-manage-academia-so-badly/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Why do we manage academia so badly?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;“Managers want metrics that are easy to calculate, easy to understand, and quick to yield a value …
metrics with these desirable properties are almost always worse than useless.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Easy metrics are also easily “hacked” - people “hack” the metrics to make statistics look good, while deviate from the original purpose of academia: to achieve good quality research.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://svpow.com/2017/03/17/every-attempt-to-manage-academia-makes-it-worse/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Every attempt to manage academia makes it worse&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://arstechnica.com/gaming/2017/04/in-memoriam-reddits-72-hour-live-graffiti-wall-as-a-social-experiment/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Did Reddit’s April Fool’s gag solve the issue of online hate speech?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An interesting, anarchic style experiment on Reddit: let thousands of Redditers draw a picture all at the same time, what would possibly happen? It turned out to be surprisingly good.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2017/mar/11/tim-berners-lee-web-inventor-save-internet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tim Berners-Lee: I invented the web. Here are three things we need to change to save it&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tim Berners-Lee: The Father of the World Wide Web and Turing Award winner believes the web nowadays has serious flaws, namely the loss of control of personal privacy, rampant spreading of misinformation on the web, and manipulations from the political campaigns online. It took everyone to build the web we have today, and it takes everyone to fix it now.&lt;/p&gt;
&lt;p&gt;More reports and readings on Tim Berners-Lee:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2009/mar/11/berners-lee-internet-data&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web inventor warns against third-party internet snooping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2017/apr/04/tim-berners-lee-online-privacy-interview-turing-award&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tim Berners-Lee: selling private citizens’ browsing data is ‘disgusting’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/DesignIssues/GovData.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Putting Government Data Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Technology" scheme="https://blog.kevinhu.me/tags/Technology/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2017-03</title>
    <link href="https://blog.kevinhu.me/2017/03/26/Reading-Summary-2017-03/"/>
    <id>https://blog.kevinhu.me/2017/03/26/Reading-Summary-2017-03/</id>
    <published>2017-03-27T02:14:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Programming</h1><h3><a href="https://sysadmincasts.com/episodes/51-mechanics-of-building-a-carpooling-service-introduction" target="_blank" rel="noopener">Episode #51 - Mechanics of Building a Carpooling Service - Introduction</a></h3><p>Sysadmin Casts is back again, and this time with more stuff: how to turn an idea into a MVP.</p><h1>Technology</h1><h3><a href="https://www.technologyreview.com/lists/technologies/2016/" target="_blank" rel="noopener">Technology Review: 10 Breakthroughs Technologies 2016</a></h3><p>Artificial Intelligence for better conversational interfaces, Elon Musk’s companies, and biological technologies are back to people’s attention again.</p><a id="more"></a><h3><a href="https://blog.yalabot.com/i-got-sick-of-commoditized-content-for-entrepreneurs-heres-what-i-started-watching-instead-cdf9a5b28652#.ovebbjiaj" target="_blank" rel="noopener">12½ Great YouTube Channels For Entrepreneurs</a></h3><p>YouTube channels for inspirations.</p><h3><a href="https://www.nextplatform.com/2017/03/21/can-fpgas-beat-gpus-accelerating-next-generation-deep-learning/" target="_blank" rel="noopener">Can FPGA Beat GPUs In Accelerating Next-Generation Deep Learning?</a></h3><p>Why FPGAs still have a shot.</p><h1>Social</h1><h3><a href="https://mobile.nytimes.com/2017/03/17/upshot/what-if-sociologists-had-as-much-influence-as-economists.html?smid=tw-nytimes&amp;smtyp=cur&amp;referer=https://t.co/DuJskMsbQf" target="_blank" rel="noopener">What if Sociologists Had as Much Influence as Economists?</a></h3><h3><a href="https://github.com/btford/write-good" target="_blank" rel="noopener">Write Good</a></h3><p>An interesting tool for better writing, including <a href="https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests" target="_blank" rel="noopener">Flesch–Kincaid readability tests</a> and pointing out <a href="https://en.wikipedia.org/wiki/Weasel_word" target="_blank" rel="noopener">Weasel Words</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Programming&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;https://sysadmincasts.com/episodes/51-mechanics-of-building-a-carpooling-service-introduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Episode #51 - Mechanics of Building a Carpooling Service - Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sysadmin Casts is back again, and this time with more stuff: how to turn an idea into a MVP.&lt;/p&gt;
&lt;h1&gt;Technology&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.technologyreview.com/lists/technologies/2016/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Technology Review: 10 Breakthroughs Technologies 2016&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Artificial Intelligence for better conversational interfaces, Elon Musk’s companies, and biological technologies are back to people’s attention again.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Python" scheme="https://blog.kevinhu.me/tags/Python/"/>
    
      <category term="C/C++" scheme="https://blog.kevinhu.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-12</title>
    <link href="https://blog.kevinhu.me/2017/01/08/Reading-Summary-2016-12/"/>
    <id>https://blog.kevinhu.me/2017/01/08/Reading-Summary-2016-12/</id>
    <published>2017-01-09T05:15:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>C/C++</h1><h3><a href="http://arjunsreedharan.org/post/69303442896/the-difference-between-arr-and-arr-how-to-find" target="_blank" rel="noopener">How to find size of an array in C without sizeof</a></h3><p>The difference between arr and &amp;arr - basically, arr is of type int *, and &amp;arr is of type (int *)[size].</p><p>Very excellent article on the fundamentals of C/C++!</p><h3><a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html" target="_blank" rel="noopener">What Every C Programmer Should Know About Undefined Behavior</a></h3><p>Some “gotchas” and pitfalls in the C programming language and how sometimes compiler optimizations can make it worse. Long story short is, steer away from undefined behaviors.</p><p>This post is from Chris Lattner himeself. Really nice article.</p><h1>Python</h1><h3><a href="http://community.redhat.com/blog/2016/12/python-has-big-impact-at-red-hat/" target="_blank" rel="noopener">Python Has Big Impact At Red Hat</a></h3><p>Why Python is such a cool language and how Python is used in Redhat. Most of redhat’s important infrastructure is written in Python, including but not limited to <code>firewalld</code>, <code>yum</code>, and its successor <code>dnf</code>, and many cloud PaaS tools for OpenShift.</p><a id="more"></a><h3><a href="https://youtu.be/Iq9DzN6mvYA" target="_blank" rel="noopener">Statistics For Hackers - PyCon2016 (Video)</a></h3><p>How to write a few lines of Python to simulate for a statistic problem which otherwise be onerous with all the math theorems and formulas.</p><h3><a href="https://youtu.be/D_6ybDcU5gc" target="_blank" rel="noopener">Refactoring Python: Why and how to restructure your code - PyCon2016 (Video)</a></h3><p>How to write clean, well-structured and “Pythonic” code.</p><h3><a href="https://youtu.be/YgtL4S7Hrwo" target="_blank" rel="noopener">Python Language - PyCon2016 (Video)</a></h3><p>By no one but Guido van Rossum himself, on the status of Python 3, and how he created Python.</p><p>(And Death to Python 2!!)</p><h3><a href="https://youtu.be/o9pEzgHorH0" target="_blank" rel="noopener">Stop Writing Classes - PyCon2012 (Video)</a></h3><p>Stop writing classes - when, and when not to use classes. Stop thinking in Java (no offense), and learn to be “Pythonic”, for a smaller, cleaner, and more well-structured project code base.</p><h1>Misc.</h1><h3><a href="https://www.bloomberg.com/view/articles/2016-12-22/if-you-re-so-smart-why-aren-t-you-rich" target="_blank" rel="noopener">If You’re So Smart, Why Aren’t You Rich?</a></h3><p>Conscientiousness - “A Personality trait marked by diligence, perseverance and self-discipline”.</p><h3><a href="http://www.economist.com/news/books-and-arts/21711860-michael-lewis-dissects-enduring-friendship-between-daniel-kahneman-and-amos?fsrc=scn%2Ftw%2Fte%2Fbl%2Fed%2Fthinkingaboutthinking" target="_blank" rel="noopener">Thinking about thinking</a></h3><p>Daniel Kahneman - I’ve been recently reading his book <a href="https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555/" target="_blank" rel="noopener">“Thinking: Fast and Slow”</a>. It’s often listed as work in economics, but from what I’ve read it’s also an amazing book on psychology and human cognitives.</p><p>Reading more books is definitely one of my New Year resolutions. Just started this book, will finish.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;C/C++&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://arjunsreedharan.org/post/69303442896/the-difference-between-arr-and-arr-how-to-find&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to find size of an array in C without sizeof&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The difference between arr and &amp;amp;arr - basically, arr is of type int *, and &amp;amp;arr is of type (int *)[size].&lt;/p&gt;
&lt;p&gt;Very excellent article on the fundamentals of C/C++!&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What Every C Programmer Should Know About Undefined Behavior&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some “gotchas” and pitfalls in the C programming language and how sometimes compiler optimizations can make it worse. Long story short is, steer away from undefined behaviors.&lt;/p&gt;
&lt;p&gt;This post is from Chris Lattner himeself. Really nice article.&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://community.redhat.com/blog/2016/12/python-has-big-impact-at-red-hat/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python Has Big Impact At Red Hat&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Why Python is such a cool language and how Python is used in Redhat. Most of redhat’s important infrastructure is written in Python, including but not limited to &lt;code&gt;firewalld&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, and its successor &lt;code&gt;dnf&lt;/code&gt;, and many cloud PaaS tools for OpenShift.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Python" scheme="https://blog.kevinhu.me/tags/Python/"/>
    
      <category term="Compilers" scheme="https://blog.kevinhu.me/tags/Compilers/"/>
    
      <category term="Undefined Behavior" scheme="https://blog.kevinhu.me/tags/Undefined-Behavior/"/>
    
      <category term="C/C++" scheme="https://blog.kevinhu.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-11</title>
    <link href="https://blog.kevinhu.me/2016/11/27/Reading-Summary-2016-11/"/>
    <id>https://blog.kevinhu.me/2016/11/27/Reading-Summary-2016-11/</id>
    <published>2016-11-28T05:56:03.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1>C/C++</h1><h3>“Effective C++” and “C++ In A Nutshell”</h3><p>Finished most part of “C++ In A Nutshell”, and Scott Meyer’s “Effective C++”, and started to learn the basics of C++ language. Really great books to start to learn the basics of C++, and some of the fundamental problems in the language.</p><a id="more"></a><h1>System Design</h1><h3><a href="https://www.hiredintech.com/classrooms/system-design/lesson/52" target="_blank" rel="noopener">What Are System Design Questions?</a></h3><p>A very interesting guide to scalable system design and how you should deal with them in an interview. It’s very interesting to learn the basics, while to do them properly, it might require years of experience.</p><h3><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones" target="_blank" rel="noopener">Scalability For Dummies</a></h3><p>A guide to scalability, a series of interesting and concise introduction to the same problem.</p><h1>Unix</h1><h3><a href="https://sanctum.geek.nz/arabesque/series/unix-as-ide/" target="_blank" rel="noopener">Unix As IDE: Introduction</a></h3><p>A very interesting guide on how to use Unix’s core utilities (grep, find, bash, awk, sort, gcc, gdb, git, vim/emacs, …) to arm yourself for code editing/maintenance tasks.</p><h1>Programming Languages</h1><h3><a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.7pr0vhyyb" target="_blank" rel="noopener">How It Feels To Learn JavaScript In 2016</a></h3><p>JavaScript…</p><h3><a href="https://julien.danjou.info/blog/2016/python-exceptions-guide" target="_blank" rel="noopener">The Definitive Guide to Python Exceptions</a></h3><p>A Python hacker’s guide to Python, from the author of “The Hacker’s Guide To Python”.</p><h1>Miscellaneous</h1><h3><a href="https://mises.org/blog/why-democracy-rewards-bad-people" target="_blank" rel="noopener">Why Democracy Rewards Bad People</a></h3><p>In light of the recent election…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;C/C++&lt;/h1&gt;
&lt;h3&gt;“Effective C++” and “C++ In A Nutshell”&lt;/h3&gt;
&lt;p&gt;Finished most part of “C++ In A Nutshell”, and Scott Meyer’s “Effective C++”, and started to learn the basics of C++ language. Really great books to start to learn the basics of C++, and some of the fundamental problems in the language.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-09</title>
    <link href="https://blog.kevinhu.me/2016/09/28/Reading-Summary-2016-09/"/>
    <id>https://blog.kevinhu.me/2016/09/28/Reading-Summary-2016-09/</id>
    <published>2016-09-28T05:11:03.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Reading</h1><h3><a href="https://access.redhat.com/blogs/766093/posts/2592591" target="_blank" rel="noopener">A Bit of Python</a></h3><p>Some security pitfalls in Python language. Very interesting read, from RedHat.</p><h3><a href="https://omtcyfz.github.io/2016/08/30/Improving-workflow-by-using-Clang-based-tools.html" target="_blank" rel="noopener">Improving Workflow By Using Clang-based Tools</a></h3><h3><a href="https://metricpanda.com/tips-for-productive-debugging-with-gdb" target="_blank" rel="noopener">Tips For Productive Debugging With GDB</a></h3><p>A very beautifully crafted GDB init file. Worth taking a look.</p><h3><a href="https://julien.danjou.info/blog/2016/python-exceptions-guide" target="_blank" rel="noopener">The Definitive Guide to Python Exceptions</a></h3><p>From the author of ‘The Hacker’s Guide to Python’.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Reading&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;https://access.redhat.com/blogs/766093/posts/2592591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A Bit of Python&lt;/a&gt;&lt;/h3&gt;

      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-08</title>
    <link href="https://blog.kevinhu.me/2016/08/15/Reading-Summary-2016-08/"/>
    <id>https://blog.kevinhu.me/2016/08/15/Reading-Summary-2016-08/</id>
    <published>2016-08-16T04:51:14.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Reading</h1><h3><a href="http://www.squeakland.org/resources/books/readingList.jsp" target="_blank" rel="noopener">Alan Kay’s Reading List</a></h3><p>If this site is reliable, this is Alan Kay’s reading list for all his students. He’s a great thinker, not just in Computer Science, but human intelligence in general. His list is a constant reminder how much I’m trailing the great minds of this generation, and how much I should pick up the pace in reading.</p><h2><a href="http://chrismm.com/blog/how-to-use-your-full-brain-when-writing-code/" target="_blank" rel="noopener">How to use your full brain when writing code</a></h2><p>Tips on being an efficient programmer.</p><h1>Digital Rights</h1><h3><a href="https://medium.com/swlh/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3#.c9i8kx8cg" target="_blank" rel="noopener">How Technology Hijacks People’s Minds -from a Magician and Google’s Design Ethicist</a></h3><p>Interestingly how big companies like Facebook and Google use techniques to enchant you to stay on their page for more time, or click on more of their links. I think it’s an interesting read that raises our awareness against cases such tricks, and help us defend ourselves from such exploitation.</p><h3><a href="http://www.economist.com/news/business/21700642-slew-startups-trying-decentralise-online-world-reweaving-web?fsrc=scn/tw/te/pe/ed/reweavingtheweb" target="_blank" rel="noopener">Reweaving the web</a></h3><p>How a slew of new startup decide to use the latest technology such as “Blockchain” and “Ethereum” to decentralize the key web infrastructures and the World Wide Web they support, to compete against giant cooperations like Google and Facebook. It’s an interesting to trend to keep an eye on, but so far I don’t know if I have the optimism that they’ll succeed.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Reading&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.squeakland.org/resources/books/readingList.jsp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alan Kay’s Reading L
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-04</title>
    <link href="https://blog.kevinhu.me/2016/05/06/Reading-Summary-2016-04/"/>
    <id>https://blog.kevinhu.me/2016/05/06/Reading-Summary-2016-04/</id>
    <published>2016-05-06T06:34:31.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Programming</h1><h3><a href="http://eli.thegreenplace.net/" target="_blank" rel="noopener">Eli Bendersky’s Website</a></h3><p>Eli Bendersky’s blog has always been a must-read to me. He never fails to regularly come up with posts of interesting and insightful ideas, or detailed tutorials.</p><p>He also actively participates in LLVM-dev mailing list and based on his blogs, has board interests in programming language, computer systems and etc…</p><h1>Computer Science</h1><h3><a href="http://www.pgbovine.net/what-is-hci-research.htm" target="_blank" rel="noopener">What is HCI research? And what is its relationship to computer science?</a></h3><p>Phillip Guo is another one of my favorite bloggers. This time he wrote an intro to HCI research.</p><a id="more"></a><hr><p>I haven’t read extensively from books or blogs recently, which is a shame. I shall definitely invest more time in reading and expanding knowledge.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Programming&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://eli.thegreenplace.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eli Bendersky’s Website&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Eli Bendersky’s blog has always been a must-read to me. He never fails to regularly come up with posts of interesting and insightful ideas, or detailed tutorials.&lt;/p&gt;
&lt;p&gt;He also actively participates in LLVM-dev mailing list and based on his blogs, has board interests in programming language, computer systems and etc…&lt;/p&gt;
&lt;h1&gt;Computer Science&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.pgbovine.net/what-is-hci-research.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What is HCI research? And what is its relationship to computer science?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Phillip Guo is another one of my favorite bloggers. This time he wrote an intro to HCI research.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Avoid Nasal Demons</title>
    <link href="https://blog.kevinhu.me/2016/02/21/Avoid-Nasal-Damons/"/>
    <id>https://blog.kevinhu.me/2016/02/21/Avoid-Nasal-Damons/</id>
    <published>2016-02-21T07:31:27.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently my colleague and I were working to port V8 JS engine as one of our benchmarks. We used it as it’s a widely-used library on devices we cared about, and we believed it’s a well-maintained, high code quality project. Or at least we thought.</p><a id="more"></a><p>The very recent GCC 6.0 version in trunk, however, will produce bad binary for a relatively stable version of V8 with <code>-O3</code> flag enabled. The output binary will segfault on some of the very basic tests. At first we immediately assumed it was a bug from the bleeding-edge GCC, and submitted the bug report to the community, which responded promptly (within half an hour, that’s incredible speed. Kudos for GCC), that the problem resulted from an undefined behavior in V8. The problem roots in the fact that some V8 code is dereference null object pointers to access member functions. You can even see in their C++ code comparing <code>this</code> to <code>NULL</code> in class member functions.</p><pre><code>if (this == NULL) {   // some logic}</code></pre><p>And new GCC decided to optimize it away. Cause in well-defined C++ programs, <code>this</code> will never be <code>NULL</code>.</p><p>Undefined behavior are also referred to as <a href="">Nasal Demons</a>. The “dereferencing NULL pointer” code has also been discussed in this well-written post: <a href="http://www.viva64.com/en/b/0226/" target="_blank" rel="noopener">Still Comparing “this” Pointer to Null?</a>, about the hazards of using it. Somehow, from M$ MFC library, to widely used V8 JS engine, they are all using this for a happy hacking experience. This tech debt is a time bomb they plant in their code, and no one knows when it will go off. For V8 it was around Oct. 2015 when mainline trunk GCC guys decided to use this undefined behavior for optimization, which causes crashes in produced V8 binary.</p><p>Theoretically it could be worse: this can cause a security vulnerability. And the problematic code will work just fine with the last revision of GCC compiler, but not with the very next commit. It’s a nightmare for anyone to debug.</p><p>Guys in chromium project seem to be aware of this problem for some time. I quote: “Fundamentally this is fixable by making the functions static and explicitly passing the entity as parameter, but that’s a  tremendous amount of work.” See this bug:</p><p><a href="https://bugs.chromium.org/p/v8/issues/detail?id=3782" target="_blank" rel="noopener">https://bugs.chromium.org/p/v8/issues/detail?id=3782</a></p><p>All coders who touched V8 code should be much smarter than I am. But somehow they just let this code slip in, and right now the bad code piles up and it’s too hard to fix. The moral of this story is: C/C++ is a very hard language to use right, and it should take much patience to learn, understand, and write correct, clean code. Without patience to learn correct code, fall to the dark side of the source one easily will.</p><p><img src="yoda-patience.jpeg" alt="Patience, you must have"></p><p>Looks like this code has bitten other people as well. And they are from quite a while ago:</p><p><a href="https://jira.mongodb.org/browse/SERVER-15182" target="_blank" rel="noopener">https://jira.mongodb.org/browse/SERVER-15182</a></p><p><a href="https://jira.mongodb.org/browse/SERVER-15306" target="_blank" rel="noopener">https://jira.mongodb.org/browse/SERVER-15306</a></p><p>Attached is a pretty good presentation on undefined C/C++ code:</p><p><a href="http://www.slideshare.net/linaroorg/bkk16503-undefined-behavior-and-compiler-optimizations-why-your-program-stopped-working-with-a-newer-compiler" target="_blank" rel="noopener">http://www.slideshare.net/linaroorg/bkk16503-undefined-behavior-and-compiler-optimizations-why-your-program-stopped-working-with-a-newer-compiler</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently my colleague and I were working to port V8 JS engine as one of our benchmarks. We used it as it’s a widely-used library on devices we cared about, and we believed it’s a well-maintained, high code quality project. Or at least we thought.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://blog.kevinhu.me/categories/Programming/"/>
    
    
      <category term="Undefined Behavior" scheme="https://blog.kevinhu.me/tags/Undefined-Behavior/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2016-02</title>
    <link href="https://blog.kevinhu.me/2016/02/20/Reading-Summary-2016-01/"/>
    <id>https://blog.kevinhu.me/2016/02/20/Reading-Summary-2016-01/</id>
    <published>2016-02-21T02:08:07.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Programming</h1><h3><a href="https://github.com/Keith-S-Thompson/how-to-c-response/blob/master/README.md" target="_blank" rel="noopener">A critique of “How to C in 2016” by Matt</a></h3><p>A good review as well as critique to the original <a href="https://matt.sh/howto-c" target="_blank" rel="noopener">“How to C in 2016”</a>, debunking some myths, and making suggestions on how to really code in C.</p><h1>Miscellany</h1><h3><a href="https://en.m.wikipedia.org/wiki/List_of_common_misconceptions" target="_blank" rel="noopener">List of Common Misconceptions</a> from Wikipedia.</h3><h3><a href="https://www.technologyreview.com/s/544786/best-of-2015-the-social-network-illusion-that-tricks-your-mind/" target="_blank" rel="noopener">Best of 2015: The Social-Network Illusion That Tricks Your Mind</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Programming&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;https://github.com/Keith-S-Thompson/how-to-c-response/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Social" scheme="https://blog.kevinhu.me/tags/Social/"/>
    
      <category term="Coding" scheme="https://blog.kevinhu.me/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2015-12</title>
    <link href="https://blog.kevinhu.me/2015/12/31/Reading-Summary-2015-12/"/>
    <id>https://blog.kevinhu.me/2015/12/31/Reading-Summary-2015-12/</id>
    <published>2015-12-31T07:30:43.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Frontend</h1><h3><a href="http://www.pgbovine.net/react-babel-webpack-javascript-es6-setup.htm" target="_blank" rel="noopener">How to set up a Web development environment with React, Babel, Webpack, and JavaScript ES6 - Philip Guo</a></h3><h3><a href="http://www.pgbovine.net/react-es6-js-setup-minimal.htm" target="_blank" rel="noopener">Minimal fuss setup for getting started with React and JavaScript ES6</a></h3><p>The minimal fuss setup for frontend development, from Philip, one of my favorite professor, programmer and bloggers.</p><a id="more"></a><h1>Compiler</h1><h3><a href="http://beginners.re/" target="_blank" rel="noopener">Reverse Engineering for Beginners</a></h3><p>Or rather, an intro to assembly. I’ve just took a quick glimpse on the lite version, which is x86/x86_64 MSVC assembly only. A quick review to polish the memories on x86 assembly.</p><p>The full version also contains ARM version of assembly, which is my next target.</p><h1>Python</h1><h3><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8</a></h3><p>The PEP8 Style Guide for Python Code. A good guide to writing consistently readable and beautiful Python code.</p><h1>Miscellaneous</h1><h3><a href="http://zacharyvoase.com/2009/08/20/openpgp/" target="_blank" rel="noopener">OpenPGP for Complete Beginners</a></h3><p>A good intro to openpgp if you’re a beginner or haven’t heard of it before.</p><h3><a href="http://matt.might.net/articles/programmers-resolutions/" target="_blank" rel="noopener">12 resolutions for programmers</a></h3><p>An idea list of new year resolutions for programmers. I really like the ‘Embrace the uncomfortable’ part. Comfort is what kills you - it makes you lazy and dull, and makes your brains decay. It’s a good idea to stimulate it once in a while.</p><p>I do want to learn at least one more new programming language (or maybe pickup Haskell or/and Scheme again?), learn more about security, learn how to use vim, and learn more about non-programming (economics, philosophy, sociology and etc.?).</p><h3><a href="http://www.scotthyoung.com/blog/2015/12/22/illusion-of-explanatory-depth/" target="_blank" rel="noopener">The Bicycle Problem: How the Illusion of Explanatory Depth Tricks Your Brain</a></h3><h3><a href="https://www.youtube.com/watch?v=FrNqSLPaZLc" target="_blank" rel="noopener">Feynman Technique (Youtube)</a></h3><p>Scott Young explains why we acutally do not understand what we think we understand. And how to really understand by using the ‘Feynman Technique’.</p><h3><a href="http://www.amazon.com/Start-up-Nation-Israels-Economic-Miracle/dp/0446541478?tag=duckduckgo-d-20" target="_blank" rel="noopener">Start-up Nation: The Story of Israel’s Economic Miracle</a></h3><p>I’ve read the Chinese version of this book. Very interesting insight on Israel and Jewish culture. It basically explains how Israel manage to build such a powerful nation and exert influence on global economics, politics, and technology, with limited resources and hostile environment.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Frontend&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.pgbovine.net/react-babel-webpack-javascript-es6-setup.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to set up a Web development environment with React, Babel, Webpack, and JavaScript ES6 - Philip Guo&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.pgbovine.net/react-es6-js-setup-minimal.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minimal fuss setup for getting started with React and JavaScript ES6&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The minimal fuss setup for frontend development, from Philip, one of my favorite professor, programmer and bloggers.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Here Comes Everybody - Book Review</title>
    <link href="https://blog.kevinhu.me/2015/11/30/Here-Comes-Everybody-Book-Review/"/>
    <id>https://blog.kevinhu.me/2015/11/30/Here-Comes-Everybody-Book-Review/</id>
    <published>2015-11-30T06:52:28.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just finished Clay Shirky’s <a href="https://books.google.com/books/about/Here_Comes_Everybody.html?id=mafZyckH_bAC" target="_blank" rel="noopener"><em>Here Comes Everybody</em></a>, which I think it’s a very interesting book. The author shared his insights on how the Internet effectively gathers the power of people, and how it is rapidly reshaping the society today. Book starts with a story on how Internet helps a lady to regain her lost cellphone with the assistance and pressure from people online, and expands discussion to what why it could happen, and what we should do about it. The world is smaller and people are closer than ever before, for better or worse, because of technologies. In this book, the author carefully analyzed ways Internet could affect our lives, what it means to the world.</p><p>I listed several observations the authors provided in this book, which I find very interesting.</p><a id="more"></a><h2>Mass Amateurization</h2><p>The Internet provides most people the ability to access information from everybody else, which makes everyone a media outlet. It has always been a trend that new technologies lower the barriers of professions, and causes mass amateurization. Just like ancient scribes has been replaced by Gutenberg printing technology, the technological barriers of printing, editing, distributing news and etc. has been lowered by the invention of Internet, and made accessible to the public instead of the elite few, blurring the lines between amateurs and professionals.</p><h2>Publish, Then Filter</h2><p>One outcome of mass amateurization is that the contents provided by the general public is often not of good quality as professionals. However, the accessibility of the Internet has extremely lowered the costs of publishing, and the new form of media has adapted to the ‘publish, then filter’ pattern.</p><h2>Power Law Distribution</h2><p>– “Fewer than two percent of the Wikipedia users ever contribute, yet that is enough to create profound value for millions of users.”</p><p>The distribution of participation in large projects always follow power law: the most active contributor contributes ten, to hundreds of times more than average contributors. And the larger the project. This is true for almost all online participants. Most Wikipedia’s pages are contributed by a handful few, but maintained by many users who contribute a few lines, or fix some typos. Most large open source projects are maintained by a few core developers, yet receive small contributions from everywhere. Interestingly, I quote the book: “most large social experiments are engines for harnessing inequality rather than limiting it.”</p><h2>Motivation To Participate</h2><p>Before Wikipedia the founders started off their ideas of an open online encyclopedia by creating a site called <a href="https://en.wikipedia.org/wiki/Nupedia" target="_blank" rel="noopener">Nupedia</a>, with contents contributed from experts only. Apparently this experiment failed, but the succeeding non-profit, volunteer-only Wikipedia soon gained popularity. One of the many interesting questions about Wikipedia is: what gave people the motivation to contribute?</p><p>The author’s answer is: the love to Wikipedia. 'When people care enough, they can come together and accomplish things of a scope and longevity that were previously impossible; they can do big things for love.&quot;</p><p>Wikipedia provides a power engine (the wiki engine) to protect the love from contributors. Wiki allows revisions and histories, thus made iterative improvements possible, and at the same maintains history versions to keep wiki pages from catastrophic damages from evil-minded people. Together they are indispensable ingredients to Wikipedia’s success.</p><h2>Promise, Tool, Bargain</h2><p>“The order of promise, tool, and bargain is also the order in which they matter most to the success of any given group.”</p><p>The promise of a group provides the ideology for one group and is the main reason why people are willing to participate. It sets the tone for this group activity. “Let’s try to see if we can come up with something together”, is actually the very first promise Torvalds put in the mail introducing his toy OS Linux. It was not as sweeping as a promise like “Let’s make a world-changing Operating System together” (although it did at last), but it provides just enough interest to people for this small infant project.</p><p>Tools define how interactions happen among the groups, setting tones for interactions. A wiki is good for shared knowledge and judgment, while a mailing list is more convenient for open discussions.</p><p>The bargain is more like the adjustment to the culture inside one group. “We expect politeness of one another, and we rebuke the impolite” is a bargain’s most likely creating a culture which is friendly and respecting.</p><h2>Summary</h2><p>This is an interesting book on how large groups, especially groups on Internet works, and how the “wisdom of the crowd” is collected, and should be collected. As my energy is so limited, I can’t even list out all the important ideas in it. This post is my best effort. Anyone who’s interested in building a society online might benefit from this book. In all it might be interesting to take a look at.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just finished Clay Shirky’s &lt;a href=&quot;https://books.google.com/books/about/Here_Comes_Everybody.html?id=mafZyckH_bAC&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;Here Comes Everybody&lt;/em&gt;&lt;/a&gt;, which I think it’s a very interesting book. The author shared his insights on how the Internet effectively gathers the power of people, and how it is rapidly reshaping the society today. Book starts with a story on how Internet helps a lady to regain her lost cellphone with the assistance and pressure from people online, and expands discussion to what why it could happen, and what we should do about it. The world is smaller and people are closer than ever before, for better or worse, because of technologies. In this book, the author carefully analyzed ways Internet could affect our lives, what it means to the world.&lt;/p&gt;
&lt;p&gt;I listed several observations the authors provided in this book, which I find very interesting.&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Internet, BookReview" scheme="https://blog.kevinhu.me/tags/Internet-BookReview/"/>
    
  </entry>
  
  <entry>
    <title>Reading Summary 2015-11</title>
    <link href="https://blog.kevinhu.me/2015/11/11/Reading-Summary-2015-11/"/>
    <id>https://blog.kevinhu.me/2015/11/11/Reading-Summary-2015-11/</id>
    <published>2015-11-12T05:20:46.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Compilers</h1><h3><a href="http://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/" target="_blank" rel="noopener">Directed graph traversal, orderings and applications to data-flow analysis</a></h3><p>On the graph traversal and their efficiency.</p><ul><li>Pre-order depth-first-search</li><li>Reverse post-order depth-first-search</li></ul><p>This could be a very helpful reference when designing data-flow analysis on programs.</p><h1>Programming</h1><h3><a href="http://semver.org/" target="_blank" rel="noopener">Semantic Version</a></h3><p>How to use version numbers in a sensible way: the MAJOR.MINOR.PATCH format. And I quote:</p><blockquote><ol><li>MAJOR version when you make incompatible API changes.</li><li>MINOR version when you add functionality in a backwards-compatible manner.</li><li>PATCH version when you make backwards-compatible bug fixes.</li></ol></blockquote><h1>Internet</h1><h3><a href="http://lifehacker.com/im-a-privacy-advocate-but-i-still-use-windows-10-and-g-1723611163" target="_blank" rel="noopener">I’m a Privacy Advocate, but I Still Use Windows 10 and Google Now</a></h3><p>Your personal data is the fuel to power the Internet today, and how should we face it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Compilers&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Reading Summary in 2015/10</title>
    <link href="https://blog.kevinhu.me/2015/10/24/Reading-Summary-in-2015-10/"/>
    <id>https://blog.kevinhu.me/2015/10/24/Reading-Summary-in-2015-10/</id>
    <published>2015-10-24T06:38:05.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Compilers</h1><h3><a href="http://thiemonagel.de/2010/01/signed-integer-overflow/" target="_blank" rel="noopener">Troubles with GCC signed integer overflow optimization</a></h3><h3><a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=30475" target="_blank" rel="noopener">BUG 30475 - assert(int+100&gt;int) optimized away</a></h3><p>An interesting ‘bug’ in some versions of GCC (and Clang as well) implementation. Since it’s <strong>‘undefined’</strong> behavior after all, compiler is not obliged to implement it as a defined behavior. Use <code>-fwrapv</code> flag in GCC to inform the compiler that integer value wraps.</p><h1>Python</h1><h3><a href="https://nylas.com/blog/performance" target="_blank" rel="noopener">Profiling Python in Production</a></h3><p>Signal timeout for every small amount of time (say, 1ms in this case) and record the current stack, and we can infer time spent in each function precisely enough. A smart way of profiling large Python programs.</p><p>Note: python signal callback passes signal type and signal handler, and signal handler takes signal number and current stack frame.</p><h3><a href="http://docs.python-guide.org/en/latest/" target="_blank" rel="noopener">Hitchhiker’s Guide to Python</a></h3><p>Great book to Python, covering code style, best practices and scenario guide. Just started reading it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Compilers&lt;/h1&gt;
&lt;h3&gt;&lt;a href=&quot;http://thiemonagel.de/2010/01/signed-integer-overflow/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Troubles with GCC sig
      
    
    </summary>
    
      <category term="Reading" scheme="https://blog.kevinhu.me/categories/Reading/"/>
    
    
      <category term="Python" scheme="https://blog.kevinhu.me/tags/Python/"/>
    
      <category term="Compilers" scheme="https://blog.kevinhu.me/tags/Compilers/"/>
    
  </entry>
  
  <entry>
    <title>A Small Discovery In C Linker</title>
    <link href="https://blog.kevinhu.me/2015/04/16/A-Small-Discovery-In-C/"/>
    <id>https://blog.kevinhu.me/2015/04/16/A-Small-Discovery-In-C/</id>
    <published>2015-04-17T04:01:33.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>C language is an old-school programming language, learned by almost all professional programmers. Still, it never failed to surprise me each time I dig in a little deeper, as it’s full of small details, some hardly noticed, such as this one I recently discovered by accident.</p><a id="more"></a><p>Consider the following two C files:</p><p>foo.c:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void foo(int c, int d, int e)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;The param is %d, %d, %d\n&quot;, c, d, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int foo(char c);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a = foo(100);</span><br><span class="line"></span><br><span class="line">    printf(&quot;The return value of foo is %d\n&quot;, a);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At first sight, you’d probably laugh and think: “What the heck is this? There are some very elementary mistakes that a CS101 student wouldn’t even make. They definitely wouldn’t compile.”</p><p>Is it really so?</p><p>Try the following command to compile them:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc hello.c foo.c -o hello</span><br></pre></td></tr></table></figure><p>Or if you’re an LLVM fan:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang hello.c foo.c -o hello</span><br></pre></td></tr></table></figure><p>How do they complain?</p><p>None. I’ve tested this on my Linux Ubuntu machine with gcc-4.8, gcc-4.9, and clang-3.5. None of them complained a thing. They got successfully compiled!</p><p>Surprise? Not really. If you’re a expert in C and how compiler works, you’d think it’s quite normal. Well, I’m not. So I was quite astonished when I first saw this.</p><p>Why would this happen?</p><p>Well. Simply put, it’s because C linkers don’t do type checking for functions. C files are first compiled into object files, exposing external symbol names for the linker. In this particular case, <code>main.c</code> exposes <code>main</code> function definition and <code>foo</code> function declaration, and <code>foo.c</code> exposes <code>foo</code> function definition. When the C linker notice <code>foo</code> is only a declaration in <code>main.c</code>, it would search for its definitions in all the externally exposed symbols in all object files, and it finds a hit in the object file that <code>foo.c</code> compiles to. As the function symbol in the object file records function names only, no return type or parameter type checking is done. The linker happily accepts this unmatching <code>foo</code> as a match and use it in main function.</p><p>Somehow, C++ does name mangling to preserve function types and any type unmatching for functions could be avoided. This won’t compile for any C++ compilers. Try g++ or clang++. Some other compilers or IDEs with static checkings may also notice this error.</p><p>So, what would happen if you actually run it?</p><p>I got the following results in one run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The param is 100, -1549285384, -1549285368</span><br><span class="line">The return value of foo is 43</span><br></pre></td></tr></table></figure><p>It’s easy to understand the 100 output. The following two shall be the value of d and e. And as <code>main</code> doesn’t pass any parameters, the <code>foo</code> function will happily read whatever on the program stack where these two parameters should be. And in this case, it shall be garbage.</p><p>And what about that 43 returned from the <code>foo</code> function? That doesn’t look like garbage. Actually if you run this broken piece of program for enough times, you’ll notice this value is always somewhat around 30~50. So this mysterious number could be something more than garbage. Is it the meaning to your life? No, that’s 42. Is it something <a href="http://bigbangtheory.wikia.com/wiki/The_43_Peculiarity" target="_blank" rel="noopener">on the wall of Sheldon’s secret room</a>? Probably.</p><p>So what is it exactly?</p><p>After poking around in gdb for a while, I confirmed my guess that this is actually the return value of <code>printf</code> inside of <code>foo</code>. As on x86 machines, most of the time C program uses <code>eax</code> register to carry return values, <code>main</code> function loads <code>a</code>’s value from <code>eax</code> when it tries to read the return value of <code>foo</code>. As <code>foo</code> has void return type, this register is untampered after return of <code>printf</code> inside <code>foo</code>, and saved directly to integer <code>a</code> in <code>main</code>.</p><p>The following is the dump inside gdb. This time I have 31 as <code>foo</code>’s return value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Run till exit from #0  __printf (format=0x400637 &quot;The param is %d, %d, %d\n&quot;) at printf.c:32</span><br><span class="line">The param is 100, -7816, -7800</span><br><span class="line">foo (c=100, d=-7816, e=-7800) at foo.c:6</span><br><span class="line">6       &#125;</span><br><span class="line">Value returned is $1 = 31</span><br><span class="line">(gdb) info registers</span><br><span class="line">info registers</span><br><span class="line">rax            0x1f     31</span><br><span class="line">rbx            0x0      0</span><br><span class="line">rcx            0x1e     30</span><br><span class="line">(gdb) info register eax</span><br><span class="line">info register eax</span><br><span class="line">eax            0x1f     31</span><br></pre></td></tr></table></figure><p>We all know the return value of <code>printf</code> is the number of characters written to the stdout. So, the mysterious return value is actually the number of characters printed out in the first sentence. You can count to confirm, and don’t forget the return character.</p><h2>Afterthoughts</h2><p>I remember someone joked that C is but a high-level syntax sugar for assembly. Now it looks to me that it’s also low level enough that it exposes lots of features in assembly. It’s never an easy task to understand all these very little details of C, as well as any other languages, but it’s probably a must if one wishes to become a qualified programmer in it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C language is an old-school programming language, learned by almost all professional programmers. Still, it never failed to surprise me each time I dig in a little deeper, as it’s full of small details, some hardly noticed, such as this one I recently discovered by accident.&lt;/p&gt;
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
    
      <category term="C" scheme="https://blog.kevinhu.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>BitHacks</title>
    <link href="https://blog.kevinhu.me/2015/03/07/Bithacks/"/>
    <id>https://blog.kevinhu.me/2015/03/07/Bithacks/</id>
    <published>2015-03-08T03:22:30.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve recently come across a very interesting article on <a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">BitHacks</a> – the low level magics for bit level operations. Some of the tricks introduced here are really excellently clever, some of them may even make you exclaim for their genius!</p><p>I had a lot of fun reading through some of the BitHacks. It’s also worth noticing these BitHacks are not only for intellectual pleasures, they provide actual boosts to algorithm performance as well. When an operations is used often enough, the overall performance benefits to the whole program might be significant.</p><p>I couldn’t help but keep wondering how on earth did these clever CS guys ever come up with such algorithms. I tried very hard to find some answers and the following are some patterns I noticed in this attempt. Still, honestly, I highly doubt if I can come up with same solutions myself if I ever run into these problems again. Some of them are just to clever.</p><a id="more"></a><h2>Some examples</h2><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign" target="_blank" rel="noopener">Compute the sign of an integer</a></li></ul><p>The beauty part of bit hackings is that most of the times they avoid branching in CPU, which could be expensive for modern pipelining CPUs, as a misprediction in branching means flushing operations, causing waste in time and power.</p><p>For example, to compute the sign of an integer, instead of using branching, we can use the following code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> v;       <span class="comment">// the integer</span></span><br><span class="line"><span class="keyword">int</span> sign;    <span class="comment">// the sign of the integer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CHAR_BIT is the number of bits per byte (normally 8). </span></span><br><span class="line"><span class="comment">// But for compatibility issues, here uses CHAR_BIT instead.</span></span><br><span class="line"></span><br><span class="line">sign = - (v &lt; <span class="number">0</span>);   <span class="comment">// sign = -1 when v is negative</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return -1 when v is negative, 0 when 0, and 1 when positive:</span></span><br><span class="line"><span class="comment">// cast v to be unsigned, right shift the sign bit to the LSB, cast it back</span></span><br><span class="line"><span class="comment">// to integer, and assign the sign.</span></span><br><span class="line">sign = (v != <span class="number">0</span>) | -(<span class="keyword">int</span>)((<span class="keyword">unsigned</span>)((<span class="keyword">int</span> v) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or for better speed</span></span><br><span class="line">sign = (v &gt; <span class="number">0</span>) - (v &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#DetermineIfPowerOf2" target="_blank" rel="noopener">Determine if integer is power of 2</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// One interesting feature of an integer to the power of 2:</span></span><br><span class="line"><span class="comment">// v &amp; (v - 1) == 0</span></span><br><span class="line"><span class="comment">// 0 is also incorrectly considered to be a power of 2 with</span></span><br><span class="line"><span class="comment">// the above equation, but the fix is simple</span></span><br><span class="line"></span><br><span class="line">f = v &amp;&amp; !(v &amp; (v - <span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax" target="_blank" rel="noopener">Find the min or max of two integers</a>.</li></ul><p>The effect shall be the same as</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max = x &gt; y ? x : y;</span><br><span class="line">min = x &lt; y ? x : y;</span><br></pre></td></tr></table></figure><p>Somehow the above approach also use branch to determine value. A BitHack way is to:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = x ^ ((x ^ y) &amp; -(x &lt; y));</span><br></pre></td></tr></table></figure><p>Amazing! Isn’t it? Here when x &lt; y, -(x &lt; y) evaluates to -1, which is all 1s in binary representation. The result will then evaluates to:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ (x ^ y)</span><br></pre></td></tr></table></figure><p>Which is y. While when x &gt; y, -(x &lt; y) evaluates to 0, and the result will be assigned x.</p><p>This is a very interesting feature of the XOR operation. Remember how XOR could be used to exchange the value of two numbers without extra memory:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;  <span class="comment">// (a ^ b) ^ b</span></span><br><span class="line">a = a ^ b;  <span class="comment">// (a ^ b) ^ a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Here a and b are exchanged</span></span><br></pre></td></tr></table></figure><p>XOR has many interesting features, and is a very important operations in BitHacks. Here’s another example.</p><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerAbs" target="_blank" rel="noopener">Absolute value of an integer</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">result = (v + mask) ^ mask;</span><br></pre></td></tr></table></figure><p>When v is positive, mask is 0, result will be assigned v. And when v is negative, mask will evaluate to -1 (all 1s in binary), and the result will be (v - 1) ^ (-1). As XORing all 1s gives the NOT of an integer (v ^ -1 == ~v), the result becomes ~(v - 1). Not surprisingly, this is the negative value of v.</p><p>An alternative but similar approach is:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (v ^ mask) - mask;</span><br></pre></td></tr></table></figure><h2>Some Observations</h2><p>I believe some general guidelines could be useful for inventing our own BitHacks could be useful, but the post did not mention any special techniques, and some of the hacks seems really ad-hoc (sure, that’s why they’re called “hacks”, right?). Nevertheless, the following is some observations I had when reading. Keeping these in mind might help the next time when inventing BitHacks.</p><h3>Use AND, OR, shift and masking</h3><p>Use AND to clear the bit field, OR to set the bit field, and use shift to move important bit to the right position. Use a carefully designed mask to clear or set the fields.</p><p>An excellent example could be found in <a href="https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel" target="_blank" rel="noopener">here: counting bit set, in parallel</a>.</p><p>In the example, instead of iterating all the bit fields in the given integer, we could use a mask to mask the fields, and merge the all the counts, a bit like reduce in the map-reduce. In this way, no loops are required to count the bit sets.</p><p>The operations could be explained as follows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first, I randomly pick a 32-bit integer to count bits set</span></span><br><span class="line"><span class="comment">// value: 0110 1000 1011 0100  0101 1001 1011 1110</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MASK1: 0101 0101 0101 0101  0101 0101 0101 0101</span></span><br><span class="line"><span class="comment">//         1 0  0 0  0 1  1 0   1 1  0 1  0 1  1 0</span></span><br><span class="line"><span class="comment">// +       0 1  1 0  1 1  0 0   0 0  1 0  1 1  1 1</span></span><br><span class="line"><span class="comment">// c   :  0101 0100 0110 0100  0101 0101 0110 1001</span></span><br><span class="line"><span class="comment">// The idea is to find the bit counts for every two bits.</span></span><br><span class="line"><span class="comment">// To achieve so, using mask and shift, we can shift the value</span></span><br><span class="line"><span class="comment">// 1 to the right and add the masked original value together,</span></span><br><span class="line"><span class="comment">// as following:</span></span><br><span class="line"></span><br><span class="line">c = ((v &gt;&gt; <span class="number">1</span>) &amp; MASK0) + (v &amp; MASK0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Although here the post uses a faster way;</span></span><br><span class="line"><span class="comment">// c = v - ((v &gt;&gt; 1) &amp; MASK0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Then add the counts for each 4 bits. The mask becomes:</span></span><br><span class="line"><span class="comment">// MASK1: 0011 0011 0011 0011  0011 0011 0011 0011</span></span><br><span class="line"></span><br><span class="line">c = ((c &gt;&gt; <span class="number">2</span>) &amp; MASK1) + (c &amp; MASK1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After this operation, then find the count in every 8 bits,</span></span><br><span class="line"><span class="comment">// and every 16 bits, and every 32 bits. The final count would</span></span><br><span class="line"><span class="comment">// be what we want.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MASK2: 0000 1111 0000 1111  0000 1111 0000 1111</span></span><br><span class="line"><span class="comment">// MASK3: 0000 0000 1111 1111  0000 0000 1111 1111</span></span><br><span class="line"><span class="comment">// MASK4: 0000 0000 0000 0000  1111 1111 1111 1111</span></span><br><span class="line"></span><br><span class="line">c = ((c &gt;&gt; <span class="number">4</span>) &amp; MASK2) + (c &amp; MASK2);</span><br><span class="line">c = ((c &gt;&gt; <span class="number">8</span>) &amp; MASK3) + (c &amp; MASK3);</span><br><span class="line">c = ((c &gt;&gt; <span class="number">16</span>) &amp; MASK4) + (c &amp; MASK4);</span><br></pre></td></tr></table></figure><h3>XOR operation</h3><p>The XOR operation has many interesting features which could be used cleverly in BitHacks.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value, other;</span><br><span class="line"></span><br><span class="line">value ^ <span class="number">0</span> == value;</span><br><span class="line">value ^ <span class="number">0xFFFFFFFF</span> == ~value;</span><br><span class="line">value ^ (<span class="number">-1</span>) == ~value;           <span class="comment">// same as above</span></span><br><span class="line">value ^ value == <span class="number">0</span></span><br><span class="line">value ^ (value ^ other) == other;</span><br></pre></td></tr></table></figure><p>The previous, and some following examples all uses these features to efficiently “hack the bits”. For example: exchanging values without extra memory, finding absolute value, finding the min or max of two values.</p><h3>Two’s complements</h3><p>In the previous example: Absolute value of an integer, a mask was used to conditionally find the original and the negative value, by setting the mask to either 0 or all 1s, which is -1 in integer representation. The negative value of v could be found by very simple operations:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v = ~v + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// here to find the value of ~v, one could use v ^ -1.</span></span><br><span class="line"><span class="comment">// And since (v ^ 0 == v), we can easily come up with</span></span><br><span class="line"><span class="comment">// the solution to find the abs of v.</span></span><br><span class="line"></span><br><span class="line">v = (v ^ mask) - mask</span><br><span class="line"></span><br><span class="line"><span class="comment">// or its alternative, as described previously</span></span><br><span class="line">v = (v + mask) ^ mask</span><br></pre></td></tr></table></figure><p>Taking advantage of this property, we can also come up with a way to <a href="https://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate" target="_blank" rel="noopener">conditionally negate a value</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (v ^ -flag) + flag;</span><br></pre></td></tr></table></figure><h3>Lookup table</h3><p>A lot of complicated operations could be accomplished by using lookup tables, one example could be the counting bits set as above. Some other examples includes:</p><ul><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#ParityLookupTable" target="_blank" rel="noopener">Compute parity by lookup table</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#BitReverseTable" target="_blank" rel="noopener">Reverse bits lookup table</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup" target="_blank" rel="noopener">Find the log base 2 of an integer with a lookup table</a></li></ul><p>Although it might take up more space for memory, it’s often worthwhile to trade some amount of memory for speed. Memory operations may be more expensive, but considering prefetching is now prevalent in modern CPUs, fetching data from the cache is way faster than a misprediction in branch operations.</p><h2>Afterthoughts</h2><p>There are many other interesting and mind-opening techniques, tricks and hacks to speed up your program in <a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign" target="_blank" rel="noopener">this post</a>. I have a hunch that I might actually use some of them in the future, or come up with my own BitHacks with similar mindset. Before this, I didn’t even realize I could play with bit operations in C/C++ this way. Also, <a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign" target="_blank" rel="noopener">this post</a> could serve as a great reference when a performance critical part needs optimization with BitHacks.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve recently come across a very interesting article on &lt;a href=&quot;https://graphics.stanford.edu/~seander/bithacks.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BitHacks&lt;/a&gt; – the low level magics for bit level operations. Some of the tricks introduced here are really excellently clever, some of them may even make you exclaim for their genius!&lt;/p&gt;
&lt;p&gt;I had a lot of fun reading through some of the BitHacks. It’s also worth noticing these BitHacks are not only for intellectual pleasures, they provide actual boosts to algorithm performance as well. When an operations is used often enough, the overall performance benefits to the whole program might be significant.&lt;/p&gt;
&lt;p&gt;I couldn’t help but keep wondering how on earth did these clever CS guys ever come up with such algorithms. I tried very hard to find some answers and the following are some patterns I noticed in this attempt. Still, honestly, I highly doubt if I can come up with same solutions myself if I ever run into these problems again. Some of them are just to clever.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://blog.kevinhu.me/categories/Algorithm/"/>
    
    
      <category term="BitHacks" scheme="https://blog.kevinhu.me/tags/BitHacks/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm I Summary</title>
    <link href="https://blog.kevinhu.me/2015/01/10/Algorithm-I-Summary/"/>
    <id>https://blog.kevinhu.me/2015/01/10/Algorithm-I-Summary/</id>
    <published>2015-01-10T07:54:07.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Finally! Just finished all the lecture videos of “Algorithm I” from Coursera, and I believe now it’s a good time to review and summarize.</p><a id="more"></a><p>All contents are based on Coursera course slides, as well as other helpful sites (Wikipedia, StackOverflow, <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithm - 4th Edition</a> from Princeton U). All pictures are from the slides and the <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener">Algorithm - 4th Edition</a>.</p><h2>Stacks and Queues</h2><p>Stacks and Queues are probably the most commonly seen data structures seen in the software. Stacks are “First-In-Last-Out”, while Queues are “First-In-First-Out”. The basic operations they support are push() and pop().</p><p>The underlying implementations could be linked-list, arrays and etc… Linked list provides with more flexible memory management, constant time operations, but brings more time overhead and memory overhead for the link operations. Arrays on the other hand, brings tricky issues of resizing, but the operations are also constant time, and has less memory overheads.</p><h2>Priority Queues and Heaps</h2><h3>Priority Queues</h3><p>Although often mentioned together, Priority Queue and Heap are <a href="http://en.wikipedia.org/wiki/Priority_queue" target="_blank" rel="noopener">different concepts</a>. Priority Queue is an abstract data type which is like a queue or stack data structure, but is often implemented in heaps, just like lists could be implemented as arrays or linked lists.</p><p>Priority Queue, as its name suggests, could give the element with highest priority. Usually it requires O(1) performance for this operation as it’s crucial to many applications, to name a few (From course slides):</p><ul><li>Event-driven simulation [give the next event for simulation]</li><li>Graph searching [Dijkstra’s Algorithm]</li><li>Data compression</li><li>Statistics [Maintain largest M values]</li><li>Operating Systems [Load balancing, interrupt handling]</li><li>…</li></ul><h3>Heap</h3><p>Binary Heap is one most common implementation of Priority Heap. It uses a binary tree to maintain the data relationship, and could be implemented with arrays. As shown below. (Picture from slide of <a href="https://class.coursera.org/algs4partI-006" target="_blank" rel="noopener">Coursera Algorithm I Course</a>).</p><p><img src="HeapRepresentation.png" alt="Binary Heap Representation"></p><p>A Binary Heap has the following properties:</p><ul><li>Is a complete binary tree.</li><li>Largest key is root node of binary tree, which is represented as list[1].</li><li>In array representation, the 0 node is often a dummy node, therefore,</li><li>Parent of node k is at k/2.</li><li>Children of node k are at 2k and 2k+1</li></ul><p>The following operations are supported by Binary Heap:</p><ul><li><p><strong>Insertion</strong>: To insert, add a node at the end, then swim it up. Meaning: keep comparing it with its parent, if larger than parent, then switch position with it.</p></li><li><p><strong>Deletion</strong>: Binary heap supports deletion from the root node (extract the max element). It removes the root node, then replace the root node with the last element on the last level, then sink it. Meaning: keep switching position with the larger one of its children.</p></li></ul><p>Binary Heaps, both insertion and deletion takes O(logN) time to swim or sink, which makes finding max M elements in N O(MlogN).</p><p>For Heap Sort, I’d like to categorize it together with all the sorting algorithms, described as following.</p><h2>Sorting Algorithms</h2><h2>Elementary Sort</h2><p>The elementary sorting algorithm part introduces <strong>Insertion Sort</strong>, <strong>Selection Sort</strong>, along with <strong>Shell Sort</strong>.</p><p><strong>Selection Sort</strong>: As name suggests, selection sort traverse the unsorted part of the list to find the minimum element, and put it in the front of the unsorted part, and consider this element sorted.</p><p>Selection Sort has O(N^2) of average time complexity, even when the list is almost sorted.</p><p><strong>Insertion Sort</strong>: For each element, keep comparing it to the element in front of it and switch position if it’s smaller than the front element, until it’s the larger one.</p><p>It has O(N^2) of average time complexity as well, but only ~N operations when the list is almost sorted, which makes it actually quite useful in certain cases.</p><p><strong>Shell Sort</strong>: The algorithm starts with sorting elements h elements apart with insertion sort, then keep decreasing h to have the list “h-sorted”, until h reaches 1, and the whole list is sorted.</p><p>With these two gap sequences, Shell Sort is known to have <a href="http://www.sorting-algorithms.com/shell-sort" target="_blank" rel="noopener">O(N^3/2) average time complexity</a>, <a href="http://www.sorting-algorithms.com/shell-sort" target="_blank" rel="noopener">O(Nlog(N)) time complexity</a> for nearly sorted lists, which gives it pretty good performance.The value of the gap h is commonly chosen by 3k+1, or an experiment found array of [1, 4, 10, 23, 57, 132, 301, 701]. Also as it doesn’t require function calls, it’s actually used in many cases such as embedded systems, and Linux kernel.</p><h3>Merge Sort</h3><p>Merge Sort is best described recursively. It takes the following procedures to the list of elements:</p><ul><li>Divide array into two halves.</li><li>Recursively divide and sort each half.</li><li>Merge two halves in order.</li></ul><p>One important feature of Merge Sort is that, it takes O(N) of extra memory space. Also, it has so much overhead for tiny subarrays. Therefore, for small sized subarrays, Merge Sort could use Insertion Sort for speed up.</p><p>Time complexity for Merge Sort is O(NlogN). It is stable - meaning previously sorted items would not be rearranged by new sorts.</p><h3>Quick Sort</h3><p>The steps for quick sort are as follows:</p><ul><li>Choose an element of the list to be the pivot.</li><li>Put all elements smaller than the pivot to the left, elements larger than the pivot to the right.</li><li>Recursively sort the left and right partition.</li><li>Join the left, pivot, and the right.</li></ul><p>Quick Sort, as its name suggests, has the <a href="http://rosettacode.org/wiki/Sorting_algorithms/Quicksort" target="_blank" rel="noopener">reputation for the fastest sort</a>. It has O(NlogN) time complexity, although for certain inputs and bad pivot selection (e.g. a sorted list and first element for pivot), the worst case could be O(N^2). Also, for small subarrays, Quick Sort could use Insertion Sort to reduce overhead.</p><p>One problem with Quick Sort is that its performance decreases when dealing with lists with many identical elements. This could be solved by a variation: The 3 way Quick Sort, which separates the list into 3 separations of less-than, equal, and larger than.</p><p>Quick Sort is known as fast, and is therefore widely used in many system applications.</p><h3>Heap Sort</h3><p>The idea for Heap Sort is to create a heap with all the keys, and repeatedly remove the max key. As described above, when the max value is deleted, the last element replaces the root node, and sunk down to the appropriate place.</p><p>One significant feature of Heap Sort is that: it has O(NlogN) worst-case performance. But (From Course Slides):</p><ul><li>Inner loop longer than Quick Sort.</li><li>Cache unfriendly.</li><li>Not stable.</li></ul><h3>Summary for Sorting</h3><p>There is an website introducing the details of different sorting algorithms, with sorting animations: <a href="http://www.sorting-algorithms.com/" target="_blank" rel="noopener">http://www.sorting-algorithms.com/</a> . The following table summarizes some of the common sorting algorithms.</p><p>| Algorithm | Average Time | Worst Time | Extra Space | Adaptive | Stable ||-----------------------------------|| Selection Sort | O(N^2) | O(N^2) | O(1) | No | No || Insertion Sort | O(N^2) | O(N^2) | O(1) | Yes | Yes || Shell Sort | O(N^3/2) | O(N^2) | O(1) | Yes | No || Merge Sort | O(NlogN) | O(N^2) | O(N) | No | Yes || Quick Sort | O(NlogN) | O(N^2) | O(1) | No | No || 3-Way Quick Sort | O(NlogN) | O(N^2) | O(1) | Yes | No || Heap Sort | O(NlogN) | O(NlogN) | O(1) | No | No |</p><h2>Binary Search Trees</h2><p>A Binary Search Tree is a Binary Tree in Symmetric Order. Meaning: each node has a key, that’s larger than all keys in its left subtree, but smaller than all keys in its right subtree.</p><p><strong>Search</strong>: Searching in Binary Search Tree is intuitive: if search key is less than node, go left, if greater, go right, if equal, search hit.</p><p>Search in Binary Tree has average time complexity of O(logN) for N elements.</p><p><strong>Insert</strong>: Inserting in Binary Search Tree is similar to search. It keeps finding in the tree until see NULL node.</p><p>Both Search Insertion requires O(logN) of time in average, but could be O(N) in worst case when the tree is unbalanced (e.g. The tree is inserted in sequential order).</p><p><strong>Deletion</strong>: One famous deletion technique for Binary Search Tree is the <a href="http://algs4.cs.princeton.edu/32bst/" target="_blank" rel="noopener">Hibbard deletion</a>. As Hibbard deletion describes, when deleting:</p><ul><li><strong>Node with one child:</strong> Delete the node and replace it with its child.</li><li><strong>Node with two children:</strong><ul><li>Find the node t to delete.</li><li>Find successor x of t, so that x has no left child (the min in t’s right subtree).</li><li>Put x in t’s spot.</li></ul></li></ul><p>See below:</p><p><img src="bst-delete.png" alt="BST deletion"></p><p>Deletion is said to have O(sqrt(N)) average time complexity (From course slides), but still suffers from performance worsening when the tree is unbalanced. One way to tackle this issue is to use a Balanced Search Tree, as described below.</p><h2>Balanced Search Trees</h2><h3>2-3 Search Trees</h3><p>2-3 Tree has the following properties:</p><ul><li>Allow 1 or 2 keys per node.<ul><li>2-node: 1 key, 2 children.</li><li>3-node: 2 keys, 3 children.</li></ul></li><li>In symmetric order.</li><li>Perfect balance: every path from root to null link has same length.</li></ul><p>2-3 Tree is designed to keep the tree perfectly balanced, since all its transformation keeps the tree symmetric.</p><p><strong>Insertion for 2-3 Search Tree:</strong></p><ul><li>Search and find the node to insert in, as in Binary Search Tree.</li><li>If the node is a 2 node, then insert the key to make it a 3 node.</li><li>If the node is a 3 node, then insert the key to make it a temp 4 node, then:<ul><li>Split the 4 node, percolate the middle node up to the parent.</li><li>Split the rest 2 keys as two separate 2 nodes.</li><li>If the parent becomes 4 node, recursively split the parent node in the same way.</li></ul></li></ul><p>As shown below:</p><p><img src="23tree-insert3c.png" alt="2-3 Tree Insertion to 3 Node"></p><p>The idea for 2-3 Tree is a beautiful idea, but complicated in implementation. So there are variations and derivations of implementations. Red-Black Tree is one of them.</p><h3>Red-Black Trees</h3><p>One variation of Red-Black Tree discussed in the course is called the Left-Leaning Red-Black Tree. (Guibas-Sedgewick 1979 and Sedgewick 2007, and Sedgewick is the instructor of this online course!)</p><p>LLRBT uses a red node to represent the glue for 3-nodes in 2-3 Tree. Therefore it has the following properties:</p><ul><li>No node has two red links connected to it.</li><li>Every path from root to null link has the same number of black links. (Because the corresponding 2-3 Tree is balanced.)</li><li>Red links lean left.</li></ul><p>To understand the operations in LLRBT, we can build all operations with the following basic operations:</p><ul><li><strong>Left Rotation:</strong> Orient a temporarily right-leaning red link to lean left.as follows:<img src="redblack-left-rotate.png" alt="Left Rotate In LLRBT"></li><li><strong>Right Rotation:</strong> Same as Left Rotation, rotate node to the right.</li><li><strong>Color Flip:</strong> If a node has two red children, flip the color of children to black and mark itself red.</li></ul><p>And with these basic transformations, we can operate with insertion on the LLRBT, in case of following scenarios:</p><ul><li><strong>Inserting into a single node</strong> (A 2 node in 2-3 Tree):<ul><li><strong>Insert to the left:</strong> Add to the left, and mark the new node red.</li><li><strong>Insert to the right:</strong> Add to the right, and since there’s a right-leaning red link, left rotate its parent node, to make the parent a left-leaning red node.</li></ul></li><li><strong>Inserting into a 3 node</strong>:<ul><li><strong>To the left of a 3 node:</strong> This makes its parent in the middle of two left leaning red links. Right rotate the parent node, and flip color.</li><li><strong>To the center of a 3 node:</strong> This makes its parent in the middle of a two red links, the parent node is left leaning, and the inserted node is left leaning. Left rotate the parent node, then right flip the inserted node, then flip color.</li><li><strong>To the right of a 3 node:</strong> This makes the parent has two red children, then flip color.</li></ul></li></ul><p>As the graph shows:</p><p><img src="LLRBT_insert_3node.png" alt="Basic operations for inserting into 3-node in LLRBT"></p><p>Although the operations in each cases look really complicated, the actual code could be made concise and elegant using with recursion. To keep in mind that all these operations are used to guarantee that the tree is fully balanced, and there are no right leaning red links.</p><p>The Java example for inserting in LLRBT from the course slide is shown as follows. The insertion searches in the tree for appropriate insert position, and add a new red node at the end. Then determine if the node is violating the properties for LLRBT (Right leaning red node? Two consecutive red links? …), and operate on the node accordingly.</p><p>Code example for LLRBT insertion in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == NULL) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, RED);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) h.left = put(h.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) h.right = put(h.right, key, val);</span><br><span class="line">    <span class="keyword">else</span>              h.val = val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left))    h = rotateLeft(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; !isRed(h.right))    flipColors(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>Symbol Tables And Hash Tables</h2><p>The Symbol Table, again, is an abstract data type, which maps from keys to values. It supports operations of insertion, deletion, search by key, and etc… It’s commonly implemented with Hash Tables, which is used everywhere. Some languages have built-in support for Hash Tables.</p><h3>Hash Table</h3><p>Hash Table is a key-indexed table, that maps from its keys to value, and index is a function of the key (hashing function).</p><p>The ideal scenario is that the index distributed uniformly in the hashing index, so that the access to each element requires O(1) time. Somehow when there are collisions, there are two ways to resolve collisions.</p><p><strong>Separate Chaining:</strong> For separate chaining, each collision is stored under the same index, but uses a linked-list to store all the elements under the same index.</p><p><strong>Open Addressing:</strong> In case of a collision, the Hash Table probes the array for the next available position of inserting. There are more than one way to find the next available slot:</p><ul><li>Linear Probing.</li><li>Quadratic Probing.</li><li>Double Hashing.</li></ul><p>While for linear probing, when the array gets too full, the performance for searching and insertion degrades drastically. It keeps relatively good performance when the array is under 50% full.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Finally! Just finished all the lecture videos of “Algorithm I” from Coursera, and I believe now it’s a good time to review and summarize.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://blog.kevinhu.me/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://blog.kevinhu.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading - Fundamental Concepts In Programming Languages</title>
    <link href="https://blog.kevinhu.me/2015/01/03/Paper-Reading-Fundamental-Concepts-In-Programming-Languages/"/>
    <id>https://blog.kevinhu.me/2015/01/03/Paper-Reading-Fundamental-Concepts-In-Programming-Languages/</id>
    <published>2015-01-03T06:14:06.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a holiday reading summary. I recently came across two interesting blogs on fundamental concepts in computer science, both with the title “10 Papers Every Programmer Should Read (At Least Twice)”. One could be found in <a href="http://web.archive.org/web/20121024173845/http:/blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice" target="_blank" rel="noopener">here</a>, and another one in <a href="http://blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/" target="_blank" rel="noopener">Fogus’ blog</a>. Topics of these papers range from Programming Language theories, functional programming, to Lamport’s distributed system theories. I will read and summarize some of them in my blog. It’ll be 20 papers, and 40 paper-readings to do if I do read each one twice. So, it might be a long time before all is finished.</p><a id="more"></a><p>The first one I chose is “Fundamental Concepts In Programming Languages” (<a href="https://github.com/papers-we-love/papers-we-love/blob/master/plt/fundamental-concepts-in-programming-languages.pdf?raw=true" target="_blank" rel="noopener">Link To Paper</a>). It’s probably the most influential set of lecture notes in computer science, compiled to paper by <a href="http://en.wikipedia.org/wiki/Christopher_Strachey" target="_blank" rel="noopener">Christopher Strachey</a> in 1967, two years before the development of C programming language. Left and Right-values, Parametric and Ad-hoc polymorphism were all defined in this paper.</p><p>I will only try to summarize some highlights that I find interesting.</p><h2>L-values and R-values</h2><p>Light and Right-values, also L and R-values. As their names suggest, L-value is for address-like object appropriate on the left of an assignment, R-value is for the contents-like object appropriate for the right. An L-value is for a location in memory, which has content – an associated R-value.</p><p>A name in program (or ‘identifier’) is associated with an L-value, and the association cannot be changed by any assignment. For example, in:</p><pre><code>let p = 3.5</code></pre><p>In this statement, an available location in memory is setup as the L-value of <code>p</code>, and the R-value 3.5 is assigned to this location.</p><p>Somehow, multiple names could have same L-value, by assigning reference to other names. This is slightly different than the concept of pointers, which represents a location by R-value, explained in the paper:</p><blockquote><p>Suppose X is a real variable with L-value a, then P is an object whose R-value is a, we say the type of P is real pointer and that P ‘points to’ X.</p></blockquote><p>The L and R-value should also be specified for the function parameter calling modes, namely, calling a parameter by value (R-value) or reference (L-value). Free variables should also be defined as L-value or R-value, the difference can be shown by the following example.</p><pre><code>Free variable by R-valuelet a = 3let f[x] = x + a... (f[5] = 8)a := 10... (f[5] = 8) Free variable by L-value let a = 3 let f[x] = x + a ... (f[5] = 8) a := 10 ... (f[5] = 15)</code></pre><h2>Function and routines as data items</h2><p>First and second class objects are described as following:</p><blockquote><p>In ALGOL a real number may appear in an expression or be assigned to a variable, and either may appear as an actual parameter in a procedure call. A procedure, on the other hand, may only appear in another procedure call either as the operator (the most common case) or as one of the actual parameters. There are no expressions involving procedures or whose results are procedures. Thus in a sense in ALGOL are second class citizens…</p></blockquote><p>To represent functions as data items, we need to make sure the R-value of a function. It includes two parts – a rule for evaluating the expression, and an environment which supplies its free variables. An R-value of this sort will be called a closure.</p><h2>Types and Polymorphism</h2><p>In the paper, it describes:</p><blockquote><p>“The type of an object determines its representation and constrains the range of abstract object it may be used to represent.”</p></blockquote><p>Whether the type is an attribute of an L-value or an R-value is language dependent, and can largely affect the amount of work. L-values are invariant under assignment, so their type is also invariant. And if we can determine the type of a polymorphism operator and the result from the operands, we can these attribute <strong>manifest</strong>. Attributes that can only be determined by running the program are known as <strong>latent</strong>.</p><p>Polymorphism is the provision of a single interface to entities of different types. (Definition from <a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science)" target="_blank" rel="noopener">Wikipedia</a>). In this paper two modes of polymorphism is defined:</p><p><strong>Ad-hoc Polymorphism:</strong> It describes that functions could apply to arguments of different types, and can behave differently depending on the type of arguments. A good example could be the add (+) operand in some languages:</p><pre><code>3 + 5&quot;Hello&quot; + &quot; &quot; + &quot;World&quot;</code></pre><p>In the example above, (+) acts with different meanings. First is the adding of two integers, while the second is the concatenation of strings.</p><p><strong>Parametric Polymorphism</strong>: Parametric Polymorphism act the same regardless of the type. It treats the argument as a more generalized type. This makes the language more flexible while not breaking its static type-safety. A good example will be list operations. For example, to determine the length of a list one need not to know the data type of the list objects, and could therefore it could act on list of all types.</p><h2>Afterthoughts</h2><p>There are other interesting topics in the paper as well. After learning all these concepts from programming languages, it’s sometimes interesting and necessary to learn the origins, to know how these ideas first came into formation. Putting the trivias of different language syntax aside for a while and getting back to theories actually helps understanding their designs.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a holiday reading summary. I recently came across two interesting blogs on fundamental concepts in computer science, both with the title “10 Papers Every Programmer Should Read (At Least Twice)”. One could be found in &lt;a href=&quot;http://web.archive.org/web/20121024173845/http:/blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;, and another one in &lt;a href=&quot;http://blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fogus’ blog&lt;/a&gt;. Topics of these papers range from Programming Language theories, functional programming, to Lamport’s distributed system theories. I will read and summarize some of them in my blog. It’ll be 20 papers, and 40 paper-readings to do if I do read each one twice. So, it might be a long time before all is finished.&lt;/p&gt;
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/tags/ProgrammingLanguage/"/>
    
      <category term="PaperReading" scheme="https://blog.kevinhu.me/tags/PaperReading/"/>
    
  </entry>
  
  <entry>
    <title>What Parsers Are They Using?</title>
    <link href="https://blog.kevinhu.me/2014/11/24/24-what-parsers-are-they-using/"/>
    <id>https://blog.kevinhu.me/2014/11/24/24-what-parsers-are-they-using/</id>
    <published>2014-11-24T23:29:00.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a <del>quite boring</del> post on programming language trivia, which doesn’t dig into anything deep.</p><h2>GCC and Clang</h2><p>The GCC is mostly implemented in C, and used to use Bison for parser generation, according to its <a href="http://en.wikipedia.org/wiki/GNU_bison" target="_blank" rel="noopener">Wikipedia page</a>.By default, it generates right recursive table driven LALR parser.</p><a id="more"></a><p>Somehow according to the <a href="http://en.wikipedia.org/wiki/GNU_bison#Where_is_it_used.3F" target="_blank" rel="noopener">same page</a>, GCC has switched to <a href="http://dinosaur.compilertools.net/yacc/" target="_blank" rel="noopener">YACC</a> before now switching to a hand-written recursive-descent parser for C/C++/Objective C. This could also be seen from GCC release notes <a href="https://gcc.gnu.org/gcc-3.4/changes.html#cplusplus" target="_blank" rel="noopener">3.4</a> and <a href="https://gcc.gnu.org/gcc-4.1/changes.html" target="_blank" rel="noopener">4.1</a>.</p><p>Clang, as well as LLVM is implemented in C++. It also uses a unified recursive-descent parser for C, Objective C, C++ and Objective C++, according to the <a href="http://clang.llvm.org/features.html" target="_blank" rel="noopener">LLVM Clang Page</a>. Both GCC and Clang now uses recursive-descent parser, claiming it provides with faster speed. On Clang page, it also states recursive-descent parser:</p><blockquote><p>… makes it very easy for new developers to understand the code, it easily supports ad-hoc rules and other strange hacks required by C/C++, and makes it straight-forward to implement excellent diagnostics and error recovery.</p></blockquote><h2>Python</h2><p>Here Python refers to the CPython implementation. In its repo under <a href="https://github.com/python/cpython/tree/master/Parser" target="_blank" rel="noopener">“Parser” directory</a>, it could be seen CPython actually uses <a href="http://asdl.sourceforge.net/" target="_blank" rel="noopener">Zephyr ASDL</a> for syntax description. Zyphyr ASDL is also described in its <a href="https://www.cs.princeton.edu/research/techreps/TR-554-97" target="_blank" rel="noopener">Princeton CS Dept. Page</a>.</p><p>Python uses LL(1) grammar. Its AST file (Python-ast.c) isgenerated according to the ASDL description of the language. The detailed process is described in <a href="http://legacy.python.org/dev/peps/pep-0339/" target="_blank" rel="noopener">PEP339</a>.</p><h2>Ruby</h2><p>Ruby MRI is implemented in C. According to <a href="http://en.wikipedia.org/wiki/GNU_bison#Where_is_it_used.3F" target="_blank" rel="noopener">Bison Wikipedia Page</a>, Ruby also uses Bison for the parser generation, which should be a right-recursive parser.</p><p>The source code for parser and syntax could be found in <a href="https://github.com/ruby/ruby/blob/trunk/parse.y" target="_blank" rel="noopener">its repo</a>.</p><h2>JavaScript</h2><p>JavaScript v8 is implemented in C++. It claims to be using a hand-written top-down parser, according to <a href="http://www.quora.com/What-are-the-parsing-techniques-used-by-modern-compilers" target="_blank" rel="noopener">this Quora post</a>.</p><p>I have no time to dig in its code base at the moment. Also it’s not in the scope of this post.</p><h2>Haskell</h2><p>According to the <a href="http://www.quora.com/What-are-the-parsing-techniques-used-by-modern-compilers" target="_blank" rel="noopener">Quora post above</a>, GHC uses a generator called <a href="https://www.haskell.org/happy/" target="_blank" rel="noopener">Happy</a>. From its official website, it looks like it’s first created to generate parser specifically for GHC.</p><p>Its syntax is defined in its codebase directory <a href="https://github.com/ghc/ghc/tree/master/compiler/parser" target="_blank" rel="noopener">“compiler/parser/Parser.y”</a>.</p><h2>Julia</h2><p>Interestingly, after searching a while in its <a href="https://github.com/JuliaLang/julia/tree/master/src" target="_blank" rel="noopener">GitHub codebase</a>, I found that Julia actually uses Scheme for itsfrontend and parser. Although most its other source files are in C.</p><p>It looks like it also uses a recursive-descent parser.</p><h2>Golang</h2><p>Golang parser is now implemented in Golang itself now. (Wow!) Not only that, most Golang implementation is in Go, according to its <a href="https://github.com/jnwhiteh/golang" target="_blank" rel="noopener">Github mirror repo</a>. By the time I checked it, it contains 75.7% Golang, 19.4% C, 3.0% Assembly, and 1.9% other.</p><p>From its parser <a href="https://github.com/jnwhiteh/golang/blob/master/src/go/parser/parser.go" target="_blank" rel="noopener">source code</a>, it looks like it also uses a recursive-descent parser.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a &lt;del&gt;quite boring&lt;/del&gt; post on programming language trivia, which doesn’t dig into anything deep.&lt;/p&gt;
&lt;h2&gt;GCC and Clang&lt;/h2&gt;
&lt;p&gt;The GCC is mostly implemented in C, and used to use Bison for parser generation, according to its &lt;a href=&quot;http://en.wikipedia.org/wiki/GNU_bison&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wikipedia page&lt;/a&gt;.
By default, it generates right recursive table driven LALR parser.&lt;/p&gt;
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
    
  </entry>
  
  <entry>
    <title>More On Passwd</title>
    <link href="https://blog.kevinhu.me/2014/10/31/31-more-on-passwd/"/>
    <id>https://blog.kevinhu.me/2014/10/31/31-more-on-passwd/</id>
    <published>2014-11-01T02:30:45.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>A little bit more interesting discoveries while digging into the passwd code file.</p><h2>The ‘s’ flag in file permission</h2><p>First, the file permission of passwd executable is <code>-rwsr-xr-x</code>. There’s an ‘s’ flag which don’t usually appear in common Unix files. The usage of the ‘s’ field is explained here:</p><p><a href="http://en.wikipedia.org/wiki/Setuid" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Setuid</a></p><a id="more"></a><p>Which means when a user runs the passwd program, his effective uid will become the owner of the executable file, which is root in this case. While inside the passwd program, it uses <code>getuid</code>, which returns the user’s real id instead of effective id.</p><h2>On updating the shadow file</h2><p>I also do notice that the whole passwd program would only require one Unix system capability: the <code>CAP_FCHOWN</code> capability, which is required when you’re changing the owner of one file. Here’s why the program needs it.</p><p>As a matter of fact, the passwd program never actually directly writes into the <code>/etc/shadow</code> file. For some reason (perhaps security concerns), it writes into a temp file first, set the uid and gid of the temp file, and then rewrite the shadow file with the temp file.</p><p>The code is defined in <code>commonio.c</code> file, <code>commonio_update</code> function. As described in the code bellow:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set the temp filename</span></span><br><span class="line"><span class="built_in">snprintf</span> (buf, <span class="keyword">sizeof</span> buf, <span class="string">"%s+"</span>, db-&gt;filename);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// open the file with name defined in buf, permissions defined in sb, returns the file pointer</span></span><br><span class="line">db-&gt;fp = fopen_set_perms (buf, <span class="string">"w"</span>, &amp;sb);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// write all data to db-&gt;fp, the temp fp</span></span><br><span class="line"><span class="keyword">if</span> (write_all (db) != <span class="number">0</span>)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rename the temp filename in buf to db-&gt;filename, which is /etc/shadow</span></span><br><span class="line"><span class="keyword">if</span> (lrename (buf, db-&gt;filename) != <span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A little bit more interesting discoveries while digging into the passwd code file.&lt;/p&gt;
&lt;h2&gt;The ‘s’ flag in file permission&lt;/h2&gt;
&lt;p&gt;First, the file permission of passwd executable is &lt;code&gt;-rwsr-xr-x&lt;/code&gt;. There’s an ‘s’ flag which don’t usually appear in common Unix files. The usage of the ‘s’ field is explained here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Setuid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://en.wikipedia.org/wiki/Setuid&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CodeReading" scheme="https://blog.kevinhu.me/categories/CodeReading/"/>
    
    
      <category term="CodeReading" scheme="https://blog.kevinhu.me/tags/CodeReading/"/>
    
      <category term="Password" scheme="https://blog.kevinhu.me/tags/Password/"/>
    
  </entry>
  
  <entry>
    <title>A Dive Into Password</title>
    <link href="https://blog.kevinhu.me/2014/10/13/13-a-dive-into-password/"/>
    <id>https://blog.kevinhu.me/2014/10/13/13-a-dive-into-password/</id>
    <published>2014-10-14T02:08:55.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2>Passwd</h2><p>The passwd is program on Unix systems to manage users’ passwords. The user and password information on most Unix systems is stored in two separate files: /etc/passwd for user information, and /etc/shadow for password information, including encrypted password value, expiration data, UID, GID, and etc… Therationale behind storing information in separate files is discussed in <a href="http://www.tldp.org/HOWTO/Shadow-Password-HOWTO-2.html" target="_blank" rel="noopener">Why shadow your passwd file?</a></p><a id="more"></a><p>The passwd program is a part of the shadow-utils, which includes a series of programs to manage user accounts, group accounts, and converting plain passwords to shadow password format, such as: groupadd, useradd, usermod, login, passwd, su, and etc…</p><p>The source file of <code>passwd</code> is available in <a href="http://pkg-shadow.alioth.debian.org/" target="_blank" rel="noopener">Debian Alioth Page</a> and <a href="https://packages.debian.org/source/wheezy/shadow" target="_blank" rel="noopener">Debian Package Information Page</a>. I downloaded the 4.1.5 original source for my study. See opensource isn’t just a campaign slogan, it’s something real!</p><p>Basically, what passwd does is to manage passwords, like updating passwords,  setting minimum and maximum password expiration date, and all these information is saved to the /etc/passwd and /etc/shadow files, and password information in particular, needs an encryption library for protection, instead of being saved as plain text.</p><p>Below is a <strong>NON</strong>-comprehensive list of code files required by the passwd program in the shadow-utils code base:</p><pre>src/passwd.clib/defines.hlib/getdef.(h/c)lib/shadow.(h/c)lib/shadowio.(h/c)lib/commonio.(h/c)lib/sgetspent.c</pre><h2>How we change our password</h2><h3>Data structure definitions first?</h3><ul><li><strong>Shadow passwd struct</strong>:Defined in shadow.h in linux include directory. Defines the structure of the shadow file. The pointer in the main function is defined as:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">struct</span> spwd *sp;  <span class="comment">/* Shadow file entry for user   */</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Structure of the password file.  */</span></span><br><span class="line"><span class="keyword">struct</span> spwd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *sp_namp;              <span class="comment">/* Login name.  */</span></span><br><span class="line">    <span class="keyword">char</span> *sp_pwdp;              <span class="comment">/* Encrypted password.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_lstchg;         <span class="comment">/* Date of last change.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_min;            <span class="comment">/* Minimum number of days between changes.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_max;            <span class="comment">/* Maximum number of days between changes.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_warn;           <span class="comment">/* Number of days to warn user to change</span></span><br><span class="line"><span class="comment">    the password.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_inact;          <span class="comment">/* Number of days the account may be</span></span><br><span class="line"><span class="comment">    inactive.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_expire;         <span class="comment">/* Number of days since 1970-01-01 until</span></span><br><span class="line"><span class="comment">    account expires.  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> sp_flag;  <span class="comment">/* Reserved.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>Passwd Structure</strong>:Defined in pwd.h in linux include directory. Defines the <code>/etc/passwd</code> file structure. The pointer in the main function is defined:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">struct</span> passwd *pw;  <span class="comment">/* Password file entry for user      */</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/* The passwd structure.  */</span></span><br><span class="line"><span class="keyword">struct</span> passwd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *pw_name;                <span class="comment">/* Username.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_passwd;              <span class="comment">/* Password.  */</span></span><br><span class="line">    <span class="keyword">__uid_t</span> pw_uid;               <span class="comment">/* User ID.  */</span></span><br><span class="line">    <span class="keyword">__gid_t</span> pw_gid;               <span class="comment">/* Group ID.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_gecos;               <span class="comment">/* Real name.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_dir;                 <span class="comment">/* Home directory.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_shell;               <span class="comment">/* Shell program.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Shadow_db structure</strong>: Defined in <code>lib/shadowio.c</code>. It’s a doubly linked list, storing information for all the shadow file entries. It’s declared with a type called <code>struct commonio_db</code>, defined in <code>commonio.h</code>.</p><p>Shadow library has <code>commonio.c</code> for all the common io data structures and operations, and <code>shadowio.c</code>, which could be seen as a wrapper around common io for all shadow file data structure and operations.</p><p>The <code>shadow_db</code> defined as below. The <code>SHADOW_FILE</code> as you might have already guessed, is a macro defined as <code>“/etc/shadow”</code>.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> commonio_db shadow_db = &#123;</span><br><span class="line">    SHADOW_FILE,            <span class="comment">/* filename */</span></span><br><span class="line">    &amp;shadow_ops,            <span class="comment">/* ops */</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* fp */</span></span><br><span class="line">    #ifdef WITH_SELINUX</span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* scontext */</span></span><br><span class="line">    #endif</span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* head */</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* tail */</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* cursor */</span></span><br><span class="line">    <span class="literal">false</span>,                  <span class="comment">/* changed */</span></span><br><span class="line">    <span class="literal">false</span>,                  <span class="comment">/* isopen */</span></span><br><span class="line">    <span class="literal">false</span>,                  <span class="comment">/* locked */</span></span><br><span class="line">    <span class="literal">false</span>                   <span class="comment">/* readonly */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Some important global variables</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *name;   <span class="comment">/* The name of user whose password is being changed */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *myname; <span class="comment">/* The current user's name */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> amroot;  <span class="comment">/* The caller's real UID was 0 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> crypt_passwd[<span class="number">256</span>];</span><br></pre></td></tr></table></figure><h3>Main function</h3><p>Though the whole password update procedure could be simply described as “reading and updating the <code>/etc/passwd</code> and <code>/etc/shadow</code> file”, the shadow library uses piles of code to check identity, permission, and several layers of function calls for encryption, and finally updating files. It needs to consider every aspect of the problem, which makes the code size larger than you  might expect.</p><p>Also, passwd libray took <a href="http://www.wikiwand.com/en/Linux_PAM" target="_blank" rel="noopener">PAM</a>, <a href="http://www.wikiwand.com/en/Trusted_computing_base" target="_blank" rel="noopener">TCB</a> and <a href="http://www.wikiwand.com/en/Security-Enhanced_Linux" target="_blank" rel="noopener">SELinux</a> into considerations. I would skip these here for I don’t yet have time to study all.</p><p>A good place to start reading is the <code>main()</code> entry of the <code>passwd.c</code>. The procedures could be summarized as follows:</p><ul><li><strong>Initialization</strong>:Init data structures (<code>const struct passwd *pw</code>, <code>const struct spwd *sp</code>, etc.), sanitize environment, check if the user is root, …;</li><li><strong>Parse parameters</strong>:A large switch case for all parameters. As I’m now only interested in updating my password, I would follow the execution path where no parameters are given;</li><li><strong>Get username, check permissions</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pw = get_my_pwent();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!amroot &amp;&amp; (pw-&gt;pw_uid!=getuid()))&#123;...&#125;</span><br><span class="line">...</span><br><span class="line">sp = getspnam(name);</span><br><span class="line">...</span><br><span class="line">check_password(pw, sp);</span><br></pre></td></tr></table></figure><p>Get username, init pw and sp data structures, check if the user is root or if the user is trying to change his own password. Then it checks the validity of the user’s account: is it expired, is its min password change time reached? These are in <code>check_password()</code> function.</p><ul><li><strong>Get new password</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (new_password(pw) != <span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>Here’s where there’s most fun. It’ when the <code>passwd</code> program prompts you for your old password, and tell you to input your new password. If you fail in trying too many times, the program would get upset and refuses to update password for you.Under the hood, it also does the following things:</p><ul><li><p>Encrypt your input with <code>pw_encrypt()</code>(defined in <code>lib/encrypt.c</code>), then compare it with the old encrypted string. There must be a lot of fun to dig into the encryption method, but it’s not in the scope of this blog;</p></li><li><p>Warns you of weak password;</p></li><li><p>Encrypt the password then immediately wipe the cleartext password, saves the encrypted password to the global variable <code>crypt_passwd</code>, which would then copied to other data structures, and then saves to the shadow file.</p></li><li><p><strong>Update shadow file</strong>:</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update_shadow();</span><br></pre></td></tr></table></figure><p>The program warns you the username you are changing password, then it calls the <code>update_shadow()</code> if you have shadow file. Otherwise, it calls <code>update_noshadow()</code>.</p><p>The <code>update_shadow()</code> is going to the core of the program, and it’s what I will observe closely.</p><h3>update_shadow() function</h3><p>Function <code>update_shadow()</code> is defined in <code>src/passwd.c</code>, and the summary of the procedures is:</p><ul><li><strong>Set a global lock</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (spw_lock() == <span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>Lock the shadow password file access. Spit an error if it’s already locked.</p><ul><li><strong>Open the shadow file</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (spw_open(O_RDWR)==<span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>Taking a deeper look inside the <code>spw_open</code> in <code>lib/shadowio.c</code>, you could find that here is when it opens up the shadow file, reads it, and stores all the entries to the <code>shadow_db</code> doubly linked list.</p><ul><li><strong>Locate the entry by name</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp = spw_locate (name);</span><br></pre></td></tr></table></figure><p>Also a function call in <code>lib/shadowio.c</code>. The <code>name</code> param is the current username.</p><ul><li><strong>Create nsp Data Structure</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsp = __spw_dup (sp);</span><br></pre></td></tr></table></figure><p>It copies the content in sp to a new pointer nsp;</p><ul><li><strong>Update the encrypted passwd</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update_crypt_pw(nsp-&gt;sp_pwdp);</span><br></pre></td></tr></table></figure><p>Finally! The <code>crypted_passwd</code> is copied to the data structure, with:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp=xstrdup(crypt_passwd)</span><br></pre></td></tr></table></figure><p>inside of <code>update_crypt_pw()</code> function. This process is hidden so deep.The nsp data structure would then carry this encrypted password to the shadow file. The program would also update metadata, such as the expiration date and so on;</p><ul><li><strong>Update the shadow_db Data Structure</strong>:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (spw_update(nsp) == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> commonio_update(&amp;shadow_db, (<span class="keyword">const</span> <span class="keyword">void</span> *)sp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>spw_update()</code>, again is a wrapper for the relating <code>commonio_update()</code>. Inside it would try to find the entry of the <code>shadow_db</code> data structure, or create new entry when not found. Then it saves all the information in the <code>sp</code> to the <code>shadow_db</code>.</p><ul><li><strong>Close the shadow file, unlock the global lock</strong>:*<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spw_close();</span><br><span class="line">...</span><br><span class="line">spw_unlock();</span><br></pre></td></tr></table></figure></li></ul><p>Close and saves the shadow file to its place. Unlock the global lock, concludes the whole process. Still, there’s much interesting things to look at inside the <code>spw_close()</code> and <code>commonio_close()</code>, but I think I’ve written long enough.</p><h2>Afterthoughts</h2><p>Reading code is fun, recording the whole process is even more so. It’s a rewarding process, especially for some high-quality code as shadow library. It kinda teaches you how top-notch programmers tackles system-level problems. It’s also tiring though, when you dig into all the function calls, variables (especially global variables) while tracking its execution path. At some point I really wish the code could be a little bit more commented.</p><p>I might have the energy to blog all the code I will read, but I think I will definitely read more code before I start writing something similar. To conclude, it’s actually fun experience that quenches your curiosity of “How it actually works”.</p><blockquote><p>Written with <a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a>.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;Passwd&lt;/h2&gt;
&lt;p&gt;The passwd is program on Unix systems to manage users’ passwords. The user and password information on most Unix systems is stored in two separate files: /etc/passwd for user information, and /etc/shadow for password information, including encrypted password value, expiration data, UID, GID, and etc… The
rationale behind storing information in separate files is discussed in &lt;a href=&quot;http://www.tldp.org/HOWTO/Shadow-Password-HOWTO-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Why shadow your passwd file?&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CodeReading" scheme="https://blog.kevinhu.me/categories/CodeReading/"/>
    
    
      <category term="CodeReading" scheme="https://blog.kevinhu.me/tags/CodeReading/"/>
    
      <category term="Password" scheme="https://blog.kevinhu.me/tags/Password/"/>
    
  </entry>
  
  <entry>
    <title>A Dive Into PLY</title>
    <link href="https://blog.kevinhu.me/2014/10/11/11-a-dive-into-ply/"/>
    <id>https://blog.kevinhu.me/2014/10/11/11-a-dive-into-ply/</id>
    <published>2014-10-12T01:50:24.000Z</published>
    <updated>2019-09-07T18:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been auditing a course in computer language implementation and particularly interested in parser generator. Just spent an afternoon reading about the Python parser generator <a href="http://www.dabeaz.com/ply/" target="_blank" rel="noopener">PLY</a>. It’s a pure Python Implementation of Lex and Yacc. And <a href="http://www.dabeaz.com/ply/ply.html#ply_nn4" target="_blank" rel="noopener">here</a> is the PLY documentation I’ve been reading the whole afternoon.</p><a id="more"></a><h2>PLY Lex</h2><p>Basically, writing a tokenizer is to generate a finite automata.  It should be easy to implement with the assist of regular expressions. For PLY Lex, the following needs to be defined:</p><ul><li><strong>Tokens</strong>: The token types;</li><li><strong>Token definition</strong>: You can define a token by a variable of regular expression, or a method whose docstring is regular expression definition. Naming convention follows: <code>t_TOKENNAME</code>, e.g. SYMBOL token should be defined by a variable or method with name <code>t_SYMBOL</code>;</li><li><strong>Error method</strong>: define the <code>t_error()</code> method for error handling.</li></ul><p>Finally, run Lex build method to build the tokenizer. If you define all data structure in a class, point the module argument to that class.</p><p>Code listed as following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLexer</span>:</span></span><br><span class="line">    tokens = (</span><br><span class="line">    <span class="string">"SYMBOL"</span>,</span><br><span class="line">    <span class="string">"OP"</span>,</span><br><span class="line">    <span class="string">"FIXNUM"</span>,</span><br><span class="line">    <span class="string">"WS"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    t_SYMBOL = <span class="string">r'[a-zA-Z_]+[a-zA-Z_0-9]+'</span></span><br><span class="line">        t_OP = <span class="string">r'\+|-|\*|/'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_WS</span><span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="string">r'\s+'</span></span><br><span class="line">            <span class="comment"># input t is the input token class</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_FIXNUM</span><span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="string">r'\d+'</span></span><br><span class="line">            t.value = int (t.value)</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_newline</span><span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="string">r'\n+'</span></span><br><span class="line">            <span class="comment"># t.lexer points to the lexer class, which stores info for whole lexer</span></span><br><span class="line">            t.lexer.lineno += len(t.value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_error</span> <span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Illegal"</span>)</span><br><span class="line">            t.lexer.skip (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">            self.lexer = ply.lex.lex(module=self, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span> <span class="params">(self, data)</span>:</span></span><br><span class="line">            self.lexer.input(data)</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> self.lexer:</span><br><span class="line">            <span class="keyword">print</span> (t)</span><br><span class="line"></span><br><span class="line">m = MyLexer ()</span><br><span class="line"><span class="comment"># build lexer and init data structre</span></span><br><span class="line">m.build ()</span><br><span class="line">m.run (<span class="string">"3 + 4 * 6"</span>)</span><br></pre></td></tr></table></figure><h2>PLY Yacc</h2><p>Yacc generates a table-driven LR parser, and LALR(1) by default, SLR when specified.</p><p>Yacc also uses docstring to define Context Free Grammar. Similarly, grammar definition method has naming convention as <code>p_PRODUCT_NAME</code>. It also generates a shift/reduce parser.out output for debugging purpose.</p><p>Yacc allows ambiguous grammar. It can resolve ambiguity by supporting precedence. One example for arithmetic operations from documentation:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">expression : expression PLUS expression</span><br><span class="line">           | expression MINUS expression</span><br><span class="line">           | expression TIMES expression</span><br><span class="line">           | expression DIVIDE expression</span><br><span class="line">           | &apos;(&apos; expression &apos;)&apos;</span><br><span class="line">           | NUMBER</span><br></pre></td></tr></table></figure><p>Which creates ambiguity when parsing expressions like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 + 4 * 5</span><br></pre></td></tr></table></figure><p>With precedence, Yacc would always know to handle higher precedence operations than lower precedence ones.</p><p>One example (from PLY offical release 3.14 examples) of expression definition with precedence defined:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">precedence = (</span><br><span class="line">    (&apos;left&apos;,&apos;+&apos;,&apos;-&apos;),</span><br><span class="line">        (&apos;left&apos;,&apos;*&apos;,&apos;/&apos;),</span><br><span class="line">            (&apos;right&apos;,&apos;UMINUS&apos;),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">def p_expression_binop(p):</span><br><span class="line">    &apos;&apos;&apos;expression : expression &apos;+&apos; expression</span><br><span class="line">                  | expression &apos;-&apos; expression</span><br><span class="line">                  | expression &apos;*&apos; expression</span><br><span class="line">                  | expression &apos;/&apos; expression&apos;&apos;&apos;</span><br><span class="line">                  if p[2] == &apos;+&apos;  : p[0] = p[1] + p[3]</span><br><span class="line">                  elif p[2] == &apos;-&apos;: p[0] = p[1] - p[3]</span><br><span class="line">                  elif p[2] == &apos;*&apos;: p[0] = p[1] * p[3]</span><br><span class="line">                  elif p[2] == &apos;/&apos;: p[0] = p[1] / p[3]</span><br></pre></td></tr></table></figure><p>A collection of examples could be found in <a href="https://github.com/dabeaz/ply/tree/master/example" target="_blank" rel="noopener">here</a>.</p><h2>Afterthoughts</h2><p>PLY is an interesting tool that I want to build something with. There’s also a variation based on PLY called <a href="https://github.com/erezsh/plyplus" target="_blank" rel="noopener">PLYPlus</a> that trys to provide a cleaner interface for programmers. Somehow I have a hunch that it could be done better.</p><p>GCC used to use bison generated parser as frontend, but now it’s using a hand-written recursive-descent parser for performance reasons. So is clang. For language generators as far as I know, Ruby uses Yacc as its parser, and Python uses <a href="http://www.cs.princeton.edu/research/techreps/TR-554-97" target="_blank" rel="noopener">ASDL</a>, which are all worth digging when I have time.</p><p>Somehow I wonder why not very many people claim to use PLY as a tool for language manipulations. It could be quite handy when you consider constructing something  with relatively complex grammar parsing,  requires faster development cycle, and is not performance critical. If I encounter any projects like that in future, I think PLY would be on the top list of my tool selections.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been auditing a course in computer language implementation and particularly interested in parser generator. Just spent an afternoon reading about the Python parser generator &lt;a href=&quot;http://www.dabeaz.com/ply/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PLY&lt;/a&gt;. It’s a pure Python Implementation of Lex and Yacc. And &lt;a href=&quot;http://www.dabeaz.com/ply/ply.html#ply_nn4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; is the PLY documentation I’ve been reading the whole afternoon.&lt;/p&gt;
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
    
      <category term="ProgrammingLanguage" scheme="https://blog.kevinhu.me/tags/ProgrammingLanguage/"/>
    
  </entry>
  
  <entry>
    <title>A New Blog For My Tech Notes</title>
    <link href="https://blog.kevinhu.me/2014/10/08/08-a-new-blog-for-my-tech-notes/"/>
    <id>https://blog.kevinhu.me/2014/10/08/08-a-new-blog-for-my-tech-notes/</id>
    <published>2014-10-09T01:47:44.000Z</published>
    <updated>2019-09-07T18:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World!</p><p>It’s been a while since the last time I ever wrote some serious blog posts. After some thought I now decide to separate my everyday chit-chat blog from a more tech-oriented blog, so that contents from either sides won’t get entwined with each other, especially when I decide to blog in both languages.</p><p>For a more tech-oriented blog I’d like to keep everything in English. For I believe it’s a language most tech people could understand, even in China. And now I could publish all my discoveries, my thoughts, my ideas centered around technology in this blog, and welcome discussions. Blogging is a beautiful way of communication, and hopefully I could make friends with like-minded through keeping this blog.</p><p>And there it goes. A brand new blogging journey!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;It’s been a while since the last time I ever wrote some serious blog posts. After some thought I now decide to separa
      
    
    </summary>
    
      <category term="Diary" scheme="https://blog.kevinhu.me/categories/Diary/"/>
    
    
  </entry>
  
</feed>
