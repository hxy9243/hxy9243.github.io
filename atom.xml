<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kevin Hu's Blog]]></title>
  <subtitle><![CDATA[A Hungry Fool]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.kevinhu.me/"/>
  <updated>2016-02-22T06:42:13.183Z</updated>
  <id>http://blog.kevinhu.me/</id>
  
  <author>
    <name><![CDATA[Kevin Hu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Avoid Nasal Demons]]></title>
    <link href="http://blog.kevinhu.me/2016/02/21/Avoid-Nasal-Damons/"/>
    <id>http://blog.kevinhu.me/2016/02/21/Avoid-Nasal-Damons/</id>
    <published>2016-02-21T07:31:27.000Z</published>
    <updated>2016-02-22T06:42:13.183Z</updated>
    <content type="html"><![CDATA[<p>Recently my colleague and I were working to port V8 JS engine as one of our benchmarks. We used it as it’s a widely-used library on devices we cared about, and we believed it’s a well-maintained, high code quality project. Or at least we thought.</p>
<a id="more"></a>
<p>The very recent GCC 6.0 version in trunk, however, will produce bad binary for a relatively stable version of V8 with <code>-O3</code> flag enabled. The output binary will segfault on some of the very basic tests. At first we immediately assumed it was a bug from the bleeding-edge GCC, and submitted the bug report to the community, which responded promptly (within half an hour, that’s incredible speed. Kudos for GCC), that the problem resulted from an undefined behavior in V8. The problem roots in the fact that some V8 code is dereference null object pointers to access member functions. You can even see in their C++ code comparing <code>this</code> to <code>NULL</code> in class member functions.</p>
<pre><code><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="keyword">NULL</span>) {
   <span class="comment">// some logic</span>
}
</code></pre><p>And new GCC decided to optimize it away. Cause in well-defined C++ programs, <code>this</code> will never be <code>NULL</code>.</p>
<p>Undefined behavior are also referred to as <a href="">Nasal Demons</a>. The “dereferencing NULL pointer” code has also been discussed in this well-written post: <a href="http://www.viva64.com/en/b/0226/" target="_blank" rel="external">Still Comparing “this” Pointer to Null?</a>, about the hazards of using it. Somehow, from M$ MFC library, to widely used V8 JS engine, they are all using this for a happy hacking experience. This tech debt is a time bomb they plant in their code, and no one knows when it will go off. For V8 it was around Oct. 2015 when mainline trunk GCC guys decided to use this undefined behavior for optimization, which causes crashes in produced V8 binary.</p>
<p>Theoretically it could be worse: this can cause a security vulnerability. And the problematic code will work just fine with the last revision of GCC compiler, but not with the very next commit. It’s a nightmare for anyone to debug.</p>
<p>All coders who touched V8 code should be much smarter than I am. But somehow they just let this code slip in. The moral of this story is: C/C++ is a very hard language to use right, and it should take much patience to learn, understand, and write correct, clean code. Without patience to learn correct code, fall to the dark side of the source one easily will.</p>
<p><img src="yoda-patience.jpeg" alt="Patience, you must have"></p>
<p>Looks like this code has bitten other people as well. And they are from quite a while ago:</p>
<p><a href="https://jira.mongodb.org/browse/SERVER-15182" target="_blank" rel="external">https://jira.mongodb.org/browse/SERVER-15182</a></p>
<p><a href="https://jira.mongodb.org/browse/SERVER-15306" target="_blank" rel="external">https://jira.mongodb.org/browse/SERVER-15306</a></p>
<p>Attached is a pretty good presentation on undefined C/C++ code:</p>
<p><a href="http://www.slideshare.net/linaroorg/bkk16503-undefined-behavior-and-compiler-optimizations-why-your-program-stopped-working-with-a-newer-compiler" target="_blank" rel="external">http://www.slideshare.net/linaroorg/bkk16503-undefined-behavior-and-compiler-optimizations-why-your-program-stopped-working-with-a-newer-compiler</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently my colleague and I were working to port V8 JS engine as one of our benchmarks. We used it as it’s a widely-used library on devices we cared about, and we believed it’s a well-maintained, high code quality project. Or at least we thought.</p>]]>
    
    </summary>
    
      <category term="Undefined Behavior" scheme="http://blog.kevinhu.me/tags/Undefined-Behavior/"/>
    
      <category term="Programming" scheme="http://blog.kevinhu.me/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reading Summary 2016-02]]></title>
    <link href="http://blog.kevinhu.me/2016/02/20/Reading-Summary-2016-01/"/>
    <id>http://blog.kevinhu.me/2016/02/20/Reading-Summary-2016-01/</id>
    <published>2016-02-21T02:08:07.000Z</published>
    <updated>2016-02-21T03:19:34.262Z</updated>
    <content type="html"><![CDATA[<h1 id="Programming">Programming</h1><h3 id="A_critique_of_“How_to_C_in_2016”_by_Matt"><a href="https://github.com/Keith-S-Thompson/how-to-c-response/blob/master/README.md" target="_blank" rel="external">A critique of “How to C in 2016” by Matt</a></h3><p>A good review as well as critique to the original <a href="https://matt.sh/howto-c" target="_blank" rel="external">“How to C in 2016”</a>, debunking some myths, and making suggestions on how to really code in C.</p>
<h1 id="Miscellany">Miscellany</h1><h3 id="List_of_Common_Misconceptions_from_Wikipedia-"><a href="https://en.m.wikipedia.org/wiki/List_of_common_misconceptions" target="_blank" rel="external">List of Common Misconceptions</a> from Wikipedia.</h3><h3 id="Best_of_2015:_The_Social-Network_Illusion_That_Tricks_Your_Mind"><a href="https://www.technologyreview.com/s/544786/best-of-2015-the-social-network-illusion-that-tricks-your-mind/" target="_blank" rel="external">Best of 2015: The Social-Network Illusion That Tricks Your Mind</a></h3>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Programming">Programming</h1><h3 id="A_critique_of_“How_to_C_in_2016”_by_Matt"><a href="https://github.com/Keith-S-Thompson/how-to-c]]>
    </summary>
    
      <category term="Coding" scheme="http://blog.kevinhu.me/tags/Coding/"/>
    
      <category term="Social" scheme="http://blog.kevinhu.me/tags/Social/"/>
    
      <category term="Reading" scheme="http://blog.kevinhu.me/categories/Reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reading Summary 2015-12]]></title>
    <link href="http://blog.kevinhu.me/2015/12/31/Reading-Summary-2015-12/"/>
    <id>http://blog.kevinhu.me/2015/12/31/Reading-Summary-2015-12/</id>
    <published>2015-12-31T07:30:43.000Z</published>
    <updated>2016-01-03T16:43:35.849Z</updated>
    <content type="html"><![CDATA[<h1 id="Frontend">Frontend</h1><h3 id="How_to_set_up_a_Web_development_environment_with_React,_Babel,_Webpack,_and_JavaScript_ES6_-_Philip_Guo"><a href="http://www.pgbovine.net/react-babel-webpack-javascript-es6-setup.htm" target="_blank" rel="external">How to set up a Web development environment with React, Babel, Webpack, and JavaScript ES6 - Philip Guo</a></h3><h3 id="Minimal_fuss_setup_for_getting_started_with_React_and_JavaScript_ES6"><a href="http://www.pgbovine.net/react-es6-js-setup-minimal.htm" target="_blank" rel="external">Minimal fuss setup for getting started with React and JavaScript ES6</a></h3><p>The minimal fuss setup for frontend development, from Philip, one of my favorite professor, programmer and bloggers. </p>
<a id="more"></a>
<h1 id="Compiler">Compiler</h1><h3 id="Reverse_Engineering_for_Beginners"><a href="http://beginners.re/" target="_blank" rel="external">Reverse Engineering for Beginners</a></h3><p>Or rather, an intro to assembly. I’ve just took a quick glimpse on the lite version, which is x86/x86_64 MSVC assembly only. A quick review to polish the memories on x86 assembly.</p>
<p>The full version also contains ARM version of assembly, which is my next target.</p>
<h1 id="Python">Python</h1><h3 id="PEP8"><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP8</a></h3><p>The PEP8 Style Guide for Python Code. A good guide to writing consistently readable and beautiful Python code.</p>
<h1 id="Miscellaneous">Miscellaneous</h1><h3 id="OpenPGP_for_Complete_Beginners"><a href="http://zacharyvoase.com/2009/08/20/openpgp/" target="_blank" rel="external">OpenPGP for Complete Beginners</a></h3><p>A good intro to openpgp if you’re a beginner or haven’t heard of it before.</p>
<h3 id="12_resolutions_for_programmers"><a href="http://matt.might.net/articles/programmers-resolutions/" target="_blank" rel="external">12 resolutions for programmers</a></h3><p>An idea list of new year resolutions for programmers. I really like the ‘Embrace the uncomfortable’ part. Comfort is what kills you - it makes you lazy and dull, and makes your brains decay. It’s a good idea to stimulate it once in a while.</p>
<p>I do want to learn at least one more new programming language (or maybe pickup Haskell or/and Scheme again?), learn more about security, learn how to use vim, and learn more about non-programming (economics, philosophy, sociology and etc.?).</p>
<h3 id="The_Bicycle_Problem:_How_the_Illusion_of_Explanatory_Depth_Tricks_Your_Brain"><a href="http://www.scotthyoung.com/blog/2015/12/22/illusion-of-explanatory-depth/" target="_blank" rel="external">The Bicycle Problem: How the Illusion of Explanatory Depth Tricks Your Brain</a></h3><h3 id="Feynman_Technique_(Youtube)"><a href="https://www.youtube.com/watch?v=FrNqSLPaZLc" target="_blank" rel="external">Feynman Technique (Youtube)</a></h3><p>Scott Young explains why we acutally do not understand what we think we understand. And how to really understand by using the ‘Feynman Technique’. </p>
<h3 id="Start-up_Nation:_The_Story_of_Israel’s_Economic_Miracle"><a href="http://www.amazon.com/Start-up-Nation-Israels-Economic-Miracle/dp/0446541478?tag=duckduckgo-d-20" target="_blank" rel="external">Start-up Nation: The Story of Israel’s Economic Miracle</a></h3><p>I’ve read the Chinese version of this book. Very interesting insight on Israel and Jewish culture. It basically explains how Israel manage to build such a powerful nation and exert influence on global economics, politics, and technology, with limited resources and hostile environment.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Frontend">Frontend</h1><h3 id="How_to_set_up_a_Web_development_environment_with_React,_Babel,_Webpack,_and_JavaScript_ES6_-_Philip_Guo"><a href="http://www.pgbovine.net/react-babel-webpack-javascript-es6-setup.htm">How to set up a Web development environment with React, Babel, Webpack, and JavaScript ES6 - Philip Guo</a></h3><h3 id="Minimal_fuss_setup_for_getting_started_with_React_and_JavaScript_ES6"><a href="http://www.pgbovine.net/react-es6-js-setup-minimal.htm">Minimal fuss setup for getting started with React and JavaScript ES6</a></h3><p>The minimal fuss setup for frontend development, from Philip, one of my favorite professor, programmer and bloggers. </p>]]>
    
    </summary>
    
      <category term="Reading" scheme="http://blog.kevinhu.me/categories/Reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Here Comes Everybody - Book Review]]></title>
    <link href="http://blog.kevinhu.me/2015/11/30/Here-Comes-Everybody-Book-Review/"/>
    <id>http://blog.kevinhu.me/2015/11/30/Here-Comes-Everybody-Book-Review/</id>
    <published>2015-11-30T06:52:28.000Z</published>
    <updated>2015-12-19T21:09:59.256Z</updated>
    <content type="html"><![CDATA[<p>Just finished Clay Shirky’s <a href="https://books.google.com/books/about/Here_Comes_Everybody.html?id=mafZyckH_bAC" target="_blank" rel="external"><em>Here Comes Everybody</em></a>, which I think it’s a very interesting book. The author shared his insights on how the Internet effectively gathers the power of people, and how it is rapidly reshaping the society today. Book starts with a story on how Internet helps a lady to regain her lost cellphone with the assistance and pressure from people online, and expands discussion to what why it could happen, and what we should do about it. The world is smaller and people are closer than ever before, for better or worse, because of technologies. In this book, the author carefully analyzed ways Internet could affect our lives, what it means to the world.</p>
<p>I listed several observations the authors provided in this book, which I find very interesting.</p>
<a id="more"></a>
<h2 id="Mass_Amateurization">Mass Amateurization</h2><p>The Internet provides most people the ability to access information from everybody else, which makes everyone a media outlet. It has always been a trend that new technologies lower the barriers of professions, and causes mass amateurization. Just like ancient scribes has been replaced by Gutenberg printing technology, the technological barriers of printing, editing, distributing news and etc. has been lowered by the invention of Internet, and made accessible to the public instead of the elite few, blurring the lines between amateurs and professionals.</p>
<h2 id="Publish,_Then_Filter">Publish, Then Filter</h2><p>One outcome of mass amateurization is that the contents provided by the general public is often not of good quality as professionals. However, the accessibility of the Internet has extremely lowered the costs of publishing, and the new form of media has adapted to the ‘publish, then filter’ pattern.</p>
<h2 id="Power_Law_Distribution">Power Law Distribution</h2><p>— “Fewer than two percent of the Wikipedia users ever contribute, yet that is enough to create profound value for millions of users.”</p>
<p>The distribution of participation in large projects always follow power law: the most active contributor contributes ten, to hundreds of times more than average contributors. And the larger the project. This is true for almost all online participants. Most Wikipedia’s pages are contributed by a handful few, but maintained by many users who contribute a few lines, or fix some typos. Most large open source projects are maintained by a few core developers, yet receive small contributions from everywhere. Interestingly, I quote the book: “most large social experiments are engines for harnessing inequality rather than limiting it.”</p>
<h2 id="Motivation_To_Participate">Motivation To Participate</h2><p>Before Wikipedia the founders started off their ideas of an open online encyclopedia by creating a site called <a href="https://en.wikipedia.org/wiki/Nupedia" target="_blank" rel="external">Nupedia</a>, with contents contributed from experts only. Apparently this experiment failed, but the succeeding non-profit, volunteer-only Wikipedia soon gained popularity. One of the many interesting questions about Wikipedia is: what gave people the motivation to contribute?</p>
<p>The author’s answer is: the love to Wikipedia. ‘When people care enough, they can come together and accomplish things of a scope and longevity that were previously impossible; they can do big things for love.”</p>
<p>Wikipedia provides a power engine (the wiki engine) to protect the love from contributors. Wiki allows revisions and histories, thus made iterative improvements possible, and at the same maintains history versions to keep wiki pages from catastrophic damages from evil-minded people. Together they are indispensable ingredients to Wikipedia’s success.</p>
<h2 id="Promise,_Tool,_Bargain">Promise, Tool, Bargain</h2><p>“The order of promise, tool, and bargain is also the order in which they matter most to the success of any given group.”</p>
<p>The promise of a group provides the ideology for one group and is the main reason why people are willing to participate. It sets the tone for this group activity. “Let’s try to see if we can come up with something together”, is actually the very first promise Torvalds put in the mail introducing his toy OS Linux. It was not as sweeping as a promise like “Let’s make a world-changing Operating System together” (although it did at last), but it provides just enough interest to people for this small infant project.</p>
<p>Tools define how interactions happen among the groups, setting tones for interactions. A wiki is good for shared knowledge and judgment, while a mailing list is more convenient for open discussions.</p>
<p>The bargain is more like the adjustment to the culture inside one group. “We expect politeness of one another, and we rebuke the impolite” is a bargain’s most likely creating a culture which is friendly and respecting.</p>
<h2 id="Summary">Summary</h2><p>This is an interesting book on how large groups, especially groups on Internet works, and how the “wisdom of the crowd” is collected, and should be collected. As my energy is so limited, I can’t even list out all the important ideas in it. This post is my best effort. Anyone who’s interested in building a society online might benefit from this book. In all it might be interesting to take a look at.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Just finished Clay Shirky’s <a href="https://books.google.com/books/about/Here_Comes_Everybody.html?id=mafZyckH_bAC"><em>Here Comes Everybody</em></a>, which I think it’s a very interesting book. The author shared his insights on how the Internet effectively gathers the power of people, and how it is rapidly reshaping the society today. Book starts with a story on how Internet helps a lady to regain her lost cellphone with the assistance and pressure from people online, and expands discussion to what why it could happen, and what we should do about it. The world is smaller and people are closer than ever before, for better or worse, because of technologies. In this book, the author carefully analyzed ways Internet could affect our lives, what it means to the world.</p>
<p>I listed several observations the authors provided in this book, which I find very interesting.</p>]]>
    
    </summary>
    
      <category term="Internet, BookReview" scheme="http://blog.kevinhu.me/tags/Internet-BookReview/"/>
    
      <category term="Reading" scheme="http://blog.kevinhu.me/categories/Reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reading Summary 2015-11]]></title>
    <link href="http://blog.kevinhu.me/2015/11/11/Reading-Summary-2015-11/"/>
    <id>http://blog.kevinhu.me/2015/11/11/Reading-Summary-2015-11/</id>
    <published>2015-11-12T05:20:46.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<h1 id="Compilers">Compilers</h1><h3 id="Directed_graph_traversal,_orderings_and_applications_to_data-flow_analysis"><a href="http://eli.thegreenplace.net/2015/directed-graph-traversal-orderings-and-applications-to-data-flow-analysis/" target="_blank" rel="external">Directed graph traversal, orderings and applications to data-flow analysis</a></h3><p>On the graph traversal and their efficiency.</p>
<ul>
<li>Pre-order depth-first-search</li>
<li>Reverse post-order depth-first-search</li>
</ul>
<p>This could be a very helpful reference when designing data-flow analysis on programs.</p>
<h1 id="Programming">Programming</h1><h3 id="Semantic_Version"><a href="http://semver.org/" target="_blank" rel="external">Semantic Version</a></h3><p>How to use version numbers in a sensible way: the MAJOR.MINOR.PATCH format. And I quote:</p>
<blockquote>
<ol>
<li>MAJOR version when you make incompatible API changes.</li>
<li>MINOR version when you add functionality in a backwards-compatible manner.</li>
<li>PATCH version when you make backwards-compatible bug fixes.</li>
</ol>
</blockquote>
<h1 id="Internet">Internet</h1><h3 id="I’m_a_Privacy_Advocate,_but_I_Still_Use_Windows_10_and_Google_Now"><a href="http://lifehacker.com/im-a-privacy-advocate-but-i-still-use-windows-10-and-g-1723611163" target="_blank" rel="external">I’m a Privacy Advocate, but I Still Use Windows 10 and Google Now</a></h3><p>Your personal data is the fuel to power the Internet today, and how should we face it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Compilers">Compilers</h1><h3 id="Directed_graph_traversal,_orderings_and_applications_to_data-flow_analysis"><a href="http://eli.the]]>
    </summary>
    
      <category term="Reading" scheme="http://blog.kevinhu.me/categories/Reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reading Summary in 2015/10]]></title>
    <link href="http://blog.kevinhu.me/2015/10/24/Reading-Summary-in-2015-10/"/>
    <id>http://blog.kevinhu.me/2015/10/24/Reading-Summary-in-2015-10/</id>
    <published>2015-10-24T06:38:05.000Z</published>
    <updated>2015-12-19T21:09:59.256Z</updated>
    <content type="html"><![CDATA[<h1 id="Compilers">Compilers</h1><h3 id="Troubles_with_GCC_signed_integer_overflow_optimization"><a href="http://thiemonagel.de/2010/01/signed-integer-overflow/" target="_blank" rel="external">Troubles with GCC signed integer overflow optimization</a></h3><h3 id="BUG_30475_-_assert(int+100&gt;int)_optimized_away"><a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=30475" target="_blank" rel="external">BUG 30475 - assert(int+100&gt;int) optimized away</a></h3><p>An interesting ‘bug’ in some versions of GCC (and Clang as well) implementation. Since it’s <strong>‘undefined’</strong> behavior after all, compiler is not obliged to implement it as a defined behavior. Use <code>-fwrapv</code> flag in GCC to inform the compiler that integer value wraps.</p>
<h1 id="Python">Python</h1><h3 id="Profiling_Python_in_Production"><a href="https://nylas.com/blog/performance" target="_blank" rel="external">Profiling Python in Production</a></h3><p>Signal timeout for every small amount of time (say, 1ms in this case) and record the current stack, and we can infer time spent in each function precisely enough. A smart way of profiling large Python programs.</p>
<p>Note: python signal callback passes signal type and signal handler, and signal handler takes signal number and current stack frame.</p>
<h3 id="Hitchhiker’s_Guide_to_Python"><a href="http://docs.python-guide.org/en/latest/" target="_blank" rel="external">Hitchhiker’s Guide to Python</a></h3><p>Great book to Python, covering code style, best practices and scenario guide. Just started reading it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Compilers">Compilers</h1><h3 id="Troubles_with_GCC_signed_integer_overflow_optimization"><a href="http://thiemonagel.de/2010/01/sign]]>
    </summary>
    
      <category term="Python, Compilers" scheme="http://blog.kevinhu.me/tags/Python-Compilers/"/>
    
      <category term="Reading" scheme="http://blog.kevinhu.me/categories/Reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Small Discovery In C Linker]]></title>
    <link href="http://blog.kevinhu.me/2015/04/16/A-Small-Discovery-In-C/"/>
    <id>http://blog.kevinhu.me/2015/04/16/A-Small-Discovery-In-C/</id>
    <published>2015-04-17T04:01:33.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<p>C language is an old-school programming language, learned by almost all professional programmers. Still, it never failed to surprise me each time I dig in a little deeper, as it’s full of small details, some hardly noticed, such as this one I recently discovered by accident.</p>
<a id="more"></a>
<p>Consider the following two C files:</p>
<p>foo.c:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void foo(int c, int d, int e)&#10;&#123;&#10;    printf(&#34;The param is %d, %d, %d\n&#34;, c, d, e);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>main.c:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int foo(char c);&#10;&#10;int main()&#10;&#123;&#10;    int a = foo(100);&#10;&#10;    printf(&#34;The return value of foo is %d\n&#34;, a);&#10;&#10;    return 0;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>At first sight, you’d probably laugh and think: “What the heck is this? There are some very elementary mistakes that a CS101 student wouldn’t even make. They definitely wouldn’t compile.”</p>
<p>Is it really so?</p>
<p>Try the following command to compile them:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc hello.c foo.c -o hello</span><br></pre></td></tr></table></figure>
<p>Or if you’re an LLVM fan:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang hello.c foo.c -o hello</span><br></pre></td></tr></table></figure>
<p>How do they complain?</p>
<p>None. I’ve tested this on my Linux Ubuntu machine with gcc-4.8, gcc-4.9, and clang-3.5. None of them complained a thing. They got successfully compiled!</p>
<p>Surprise? Not really. If you’re a expert in C and how compiler works, you’d think it’s quite normal. Well, I’m not. So I was quite astonished when I first saw this.</p>
<p>Why would this happen? </p>
<p>Well. Simply put, it’s because C linkers don’t do type checking for functions. C files are first compiled into object files, exposing external symbol names for the linker. In this particular case, <code>main.c</code> exposes <code>main</code> function definition and <code>foo</code> function declaration, and <code>foo.c</code> exposes <code>foo</code> function definition. When the C linker notice <code>foo</code> is only a declaration in <code>main.c</code>, it would search for its definitions in all the externally exposed symbols in all object files, and it finds a hit in the object file that <code>foo.c</code> compiles to. As the function symbol in the object file records function names only, no return type or parameter type checking is done. The linker happily accepts this unmatching <code>foo</code> as a match and use it in main function.</p>
<p>Somehow, C++ does name mangling to preserve function types and any type unmatching for functions could be avoided. This won’t compile for any C++ compilers. Try g++ or clang++. Some other compilers or IDEs with static checkings may also notice this error.</p>
<p>So, what would happen if you actually run it?</p>
<p>I got the following results in one run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The param is 100, -1549285384, -1549285368&#10;The return value of foo is 43</span><br></pre></td></tr></table></figure>
<p>It’s easy to understand the 100 output. The following two shall be the value of d and e. And as <code>main</code> doesn’t pass any parameters, the <code>foo</code> function will happily read whatever on the program stack where these two parameters should be. And in this case, it shall be garbage.</p>
<p>And what about that 43 returned from the <code>foo</code> function? That doesn’t look like garbage. Actually if you run this broken piece of program for enough times, you’ll notice this value is always somewhat around 30~50. So this mysterious number could be something more than garbage. Is it the meaning to your life? No, that’s 42. Is it something <a href="http://bigbangtheory.wikia.com/wiki/The_43_Peculiarity" target="_blank" rel="external">on the wall of Sheldon’s secret room</a>? Probably.</p>
<p>So what is it exactly?</p>
<p>After poking around in gdb for a while, I confirmed my guess that this is actually the return value of <code>printf</code> inside of <code>foo</code>. As on x86 machines, most of the time C program uses <code>eax</code> register to carry return values, <code>main</code> function loads <code>a</code>‘s value from <code>eax</code> when it tries to read the return value of <code>foo</code>. As <code>foo</code> has void return type, this register is untampered after return of <code>printf</code> inside <code>foo</code>, and saved directly to integer <code>a</code> in <code>main</code>.</p>
<p>The following is the dump inside gdb. This time I have 31 as <code>foo</code>‘s return value.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run till exit from #0  __printf (format=0x400637 &#34;The param is %d, %d, %d\n&#34;) at printf.c:32&#10;The param is 100, -7816, -7800&#10;foo (c=100, d=-7816, e=-7800) at foo.c:6&#10;6       &#125;&#10;Value returned is $1 = 31&#10;(gdb) info registers&#10;info registers&#10;rax            0x1f     31&#10;rbx            0x0      0&#10;rcx            0x1e     30&#10;(gdb) info register eax&#10;info register eax&#10;eax            0x1f     31</span><br></pre></td></tr></table></figure>
<p>We all know the return value of <code>printf</code> is the number of characters written to the stdout. So, the mysterious return value is actually the number of characters printed out in the first sentence. You can count to confirm, and don’t forget the return character.</p>
<h2 id="Afterthoughts">Afterthoughts</h2><p>I remember someone joked that C is but a high-level syntax sugar for assembly. Now it looks to me that it’s also low level enough that it exposes lots of features in assembly. It’s never an easy task to understand all these very little details of C, as well as any other languages, but it’s probably a must if one wishes to become a qualified programmer in it.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>C language is an old-school programming language, learned by almost all professional programmers. Still, it never failed to surprise me each time I dig in a little deeper, as it’s full of small details, some hardly noticed, such as this one I recently discovered by accident.</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://blog.kevinhu.me/tags/C/"/>
    
      <category term="ProgrammingLanguage" scheme="http://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BitHacks]]></title>
    <link href="http://blog.kevinhu.me/2015/03/07/Bithacks/"/>
    <id>http://blog.kevinhu.me/2015/03/07/Bithacks/</id>
    <published>2015-03-08T03:22:30.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<p>I’ve recently come across a very interesting article on <a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="external">BitHacks</a> — the low level magics for bit level operations. Some of the tricks introduced here are really excellently clever, some of them may even make you exclaim for their genius!</p>
<p>I had a lot of fun reading through some of the BitHacks. It’s also worth noticing these BitHacks are not only for intellectual pleasures, they provide actual boosts to algorithm performance as well. When an operations is used often enough, the overall performance benefits to the whole program might be significant.</p>
<p>I couldn’t help but keep wondering how on earth did these clever CS guys ever come up with such algorithms. I tried very hard to find some answers and the following are some patterns I noticed in this attempt. Still, honestly, I highly doubt if I can come up with same solutions myself if I ever run into these problems again. Some of them are just to clever.</p>
<a id="more"></a>
<h2 id="Some_examples">Some examples</h2><ul>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign" target="_blank" rel="external">Compute the sign of an integer</a></li>
</ul>
<p>The beauty part of bit hackings is that most of the times they avoid branching in CPU, which could be expensive for modern pipelining CPUs, as a misprediction in branching means flushing operations, causing waste in time and power.</p>
<p>For example, to compute the sign of an integer, instead of using branching, we can use the following code:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> v;       <span class="comment">// the integer</span></span><br><span class="line"><span class="keyword">int</span> sign;    <span class="comment">// the sign of the integer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CHAR_BIT is the number of bits per byte (normally 8). </span></span><br><span class="line"><span class="comment">// But for compatibility issues, here uses CHAR_BIT instead.</span></span><br><span class="line"></span><br><span class="line">sign = - (v &lt; <span class="number">0</span>);   <span class="comment">// sign = -1 when v is negative</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return -1 when v is negative, 0 when 0, and 1 when positive:</span></span><br><span class="line"><span class="comment">// cast v to be unsigned, right shift the sign bit to the LSB, cast it back</span></span><br><span class="line"><span class="comment">// to integer, and assign the sign.</span></span><br><span class="line">sign = (v != <span class="number">0</span>) | -(<span class="keyword">int</span>)((<span class="keyword">unsigned</span>)((<span class="keyword">int</span> v) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or for better speed</span></span><br><span class="line">sign = (v &gt; <span class="number">0</span>) - (v &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#DetermineIfPowerOf2" target="_blank" rel="external">Determine if integer is power of 2</a></li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// One interesting feature of an integer to the power of 2:</span></span><br><span class="line"><span class="comment">// v &amp; (v - 1) == 0</span></span><br><span class="line"><span class="comment">// 0 is also incorrectly considered to be a power of 2 with</span></span><br><span class="line"><span class="comment">// the above equation, but the fix is simple</span></span><br><span class="line"></span><br><span class="line">f = v &amp;&amp; !(v &amp; (v - <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax" target="_blank" rel="external">Find the min or max of two integers</a>.</li>
</ul>
<p>The effect shall be the same as</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max = x &gt; y ? x : y;</span><br><span class="line">min = x &lt; y ? x : y;</span><br></pre></td></tr></table></figure>
<p>Somehow the above approach also use branch to determine value. A BitHack way is to:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = x ^ ((x ^ y) &amp; -(x &lt; y));</span><br></pre></td></tr></table></figure>
<p>Amazing! Isn’t it? Here when x &lt; y, -(x &lt; y) evaluates to -1, which is all 1s in binary representation. The result will then evaluates to:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x ^ (x ^ y)</span><br></pre></td></tr></table></figure>
<p>Which is y. While when x &gt; y, -(x &lt; y) evaluates to 0, and the result will be assigned x.</p>
<p>This is a very interesting feature of the XOR operation. Remember how XOR could be used to exchange the value of two numbers without extra memory:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;  <span class="comment">// (a ^ b) ^ b</span></span><br><span class="line">a = a ^ b;  <span class="comment">// (a ^ b) ^ a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Here a and b are exchanged</span></span><br></pre></td></tr></table></figure>
<p>XOR has many interesting features, and is a very important operations in BitHacks. Here’s another example.</p>
<ul>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerAbs" target="_blank" rel="external">Absolute value of an integer</a></li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">result = (v + mask) ^ mask;</span><br></pre></td></tr></table></figure>
<p>When v is positive, mask is 0, result will be assigned v. And when v is negative, mask will evaluate to -1 (all 1s in binary), and the result will be (v - 1) ^ (-1). As XORing all 1s gives the NOT of an integer (v ^ -1 == ~v), the result becomes ~(v - 1). Not surprisingly, this is the negative value of v.</p>
<p>An alternative but similar approach is:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (v ^ mask) - mask;</span><br></pre></td></tr></table></figure>
<h2 id="Some_Observations">Some Observations</h2><p>I believe some general guidelines could be useful for inventing our own BitHacks could be useful, but the post did not mention any special techniques, and some of the hacks seems really ad-hoc (sure, that’s why they’re called “hacks”, right?). Nevertheless, the following is some observations I had when reading. Keeping these in mind might help the next time when inventing BitHacks.</p>
<h3 id="Use_AND,_OR,_shift_and_masking">Use AND, OR, shift and masking</h3><p>Use AND to clear the bit field, OR to set the bit field, and use shift to move important bit to the right position. Use a carefully designed mask to clear or set the fields.</p>
<p>An excellent example could be found in <a href="https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel" target="_blank" rel="external">here: counting bit set, in parallel</a>.</p>
<p>In the example, instead of iterating all the bit fields in the given integer, we could use a mask to mask the fields, and merge the all the counts, a bit like reduce in the map-reduce. In this way, no loops are required to count the bit sets.</p>
<p>The operations could be explained as follows:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first, I randomly pick a 32-bit integer to count bits set</span></span><br><span class="line"><span class="comment">// value: 0110 1000 1011 0100  0101 1001 1011 1110</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MASK1: 0101 0101 0101 0101  0101 0101 0101 0101</span></span><br><span class="line"><span class="comment">//         1 0  0 0  0 1  1 0   1 1  0 1  0 1  1 0</span></span><br><span class="line"><span class="comment">// +       0 1  1 0  1 1  0 0   0 0  1 0  1 1  1 1</span></span><br><span class="line"><span class="comment">// c   :  0101 0100 0110 0100  0101 0101 0110 1001</span></span><br><span class="line"><span class="comment">// The idea is to find the bit counts for every two bits.</span></span><br><span class="line"><span class="comment">// To achieve so, using mask and shift, we can shift the value</span></span><br><span class="line"><span class="comment">// 1 to the right and add the masked original value together,</span></span><br><span class="line"><span class="comment">// as following:</span></span><br><span class="line"></span><br><span class="line">c = ((v &gt;&gt; <span class="number">1</span>) &amp; MASK0) + (v &amp; MASK0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Although here the post uses a faster way;</span></span><br><span class="line"><span class="comment">// c = v - ((v &gt;&gt; 1) &amp; MASK0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Then add the counts for each 4 bits. The mask becomes:</span></span><br><span class="line"><span class="comment">// MASK1: 0011 0011 0011 0011  0011 0011 0011 0011</span></span><br><span class="line"></span><br><span class="line">c = ((c &gt;&gt; <span class="number">2</span>) &amp; MASK1) + (c &amp; MASK1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After this operation, then find the count in every 8 bits,</span></span><br><span class="line"><span class="comment">// and every 16 bits, and every 32 bits. The final count would</span></span><br><span class="line"><span class="comment">// be what we want.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MASK2: 0000 1111 0000 1111  0000 1111 0000 1111</span></span><br><span class="line"><span class="comment">// MASK3: 0000 0000 1111 1111  0000 0000 1111 1111</span></span><br><span class="line"><span class="comment">// MASK4: 0000 0000 0000 0000  1111 1111 1111 1111</span></span><br><span class="line"></span><br><span class="line">c = ((c &gt;&gt; <span class="number">4</span>) &amp; MASK2) + (c &amp; MASK2);</span><br><span class="line">c = ((c &gt;&gt; <span class="number">8</span>) &amp; MASK3) + (c &amp; MASK3);</span><br><span class="line">c = ((c &gt;&gt; <span class="number">16</span>) &amp; MASK4) + (c &amp; MASK4);</span><br></pre></td></tr></table></figure>
<h3 id="XOR_operation">XOR operation</h3><p>The XOR operation has many interesting features which could be used cleverly in BitHacks.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value, other;</span><br><span class="line"></span><br><span class="line">value ^ <span class="number">0</span> == value;</span><br><span class="line">value ^ <span class="number">0xFFFFFFFF</span> == ~value;</span><br><span class="line">value ^ (-<span class="number">1</span>) == ~value;           <span class="comment">// same as above</span></span><br><span class="line">value ^ value == <span class="number">0</span></span><br><span class="line">value ^ (value ^ other) == other;</span><br></pre></td></tr></table></figure>
<p>The previous, and some following examples all uses these features to efficiently “hack the bits”. For example: exchanging values without extra memory, finding absolute value, finding the min or max of two values.</p>
<h3 id="Two’s_complements">Two’s complements</h3><p>In the previous example: Absolute value of an integer, a mask was used to conditionally find the original and the negative value, by setting the mask to either 0 or all 1s, which is -1 in integer representation. The negative value of v could be found by very simple operations:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v = ~v + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// here to find the value of ~v, one could use v ^ -1.</span></span><br><span class="line"><span class="comment">// And since (v ^ 0 == v), we can easily come up with</span></span><br><span class="line"><span class="comment">// the solution to find the abs of v.</span></span><br><span class="line"></span><br><span class="line">v = (v ^ mask) - mask</span><br><span class="line"></span><br><span class="line"><span class="comment">// or its alternative, as described previously</span></span><br><span class="line">v = (v + mask) ^ mask</span><br></pre></td></tr></table></figure>
<p>Taking advantage of this property, we can also come up with a way to <a href="https://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate" target="_blank" rel="external">conditionally negate a value</a>:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = (v ^ -flag) + flag;</span><br></pre></td></tr></table></figure>
<h3 id="Lookup_table">Lookup table</h3><p>A lot of complicated operations could be accomplished by using lookup tables, one example could be the counting bits set as above. Some other examples includes:</p>
<ul>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#ParityLookupTable" target="_blank" rel="external">Compute parity by lookup table</a></li>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#BitReverseTable" target="_blank" rel="external">Reverse bits lookup table</a></li>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup" target="_blank" rel="external">Find the log base 2 of an integer with a lookup table</a></li>
</ul>
<p>Although it might take up more space for memory, it’s often worthwhile to trade some amount of memory for speed. Memory operations may be more expensive, but considering prefetching is now prevalent in modern CPUs, fetching data from the cache is way faster than a misprediction in branch operations. </p>
<h2 id="Afterthoughts">Afterthoughts</h2><p>There are many other interesting and mind-opening techniques, tricks and hacks to speed up your program in <a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign" target="_blank" rel="external">this post</a>. I have a hunch that I might actually use some of them in the future, or come up with my own BitHacks with similar mindset. Before this, I didn’t even realize I could play with bit operations in C/C++ this way. Also, <a href="https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign" target="_blank" rel="external">this post</a> could serve as a great reference when a performance critical part needs optimization with BitHacks.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’ve recently come across a very interesting article on <a href="https://graphics.stanford.edu/~seander/bithacks.html">BitHacks</a> — the low level magics for bit level operations. Some of the tricks introduced here are really excellently clever, some of them may even make you exclaim for their genius!</p>
<p>I had a lot of fun reading through some of the BitHacks. It’s also worth noticing these BitHacks are not only for intellectual pleasures, they provide actual boosts to algorithm performance as well. When an operations is used often enough, the overall performance benefits to the whole program might be significant.</p>
<p>I couldn’t help but keep wondering how on earth did these clever CS guys ever come up with such algorithms. I tried very hard to find some answers and the following are some patterns I noticed in this attempt. Still, honestly, I highly doubt if I can come up with same solutions myself if I ever run into these problems again. Some of them are just to clever.</p>]]>
    
    </summary>
    
      <category term="BitHacks" scheme="http://blog.kevinhu.me/tags/BitHacks/"/>
    
      <category term="Algorithm" scheme="http://blog.kevinhu.me/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Algorithm I Summary]]></title>
    <link href="http://blog.kevinhu.me/2015/01/10/Algorithm-I-Summary/"/>
    <id>http://blog.kevinhu.me/2015/01/10/Algorithm-I-Summary/</id>
    <published>2015-01-10T07:54:07.000Z</published>
    <updated>2015-12-19T21:09:59.256Z</updated>
    <content type="html"><![CDATA[<p>Finally! Just finished all the lecture videos of “Algorithm I” from Coursera, and I believe now it’s a good time to review and summarize.<br><a id="more"></a></p>
<p>All contents are based on Coursera course slides, as well as other helpful sites (Wikipedia, StackOverflow, <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="external">Algorithm - 4th Edition</a> from Princeton U). All pictures are from the slides and the <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="external">Algorithm - 4th Edition</a>.</p>
<h2 id="Stacks_and_Queues">Stacks and Queues</h2><p>Stacks and Queues are probably the most commonly seen data structures seen in the software. Stacks are “First-In-Last-Out”, while Queues are “First-In-First-Out”. The basic operations they support are push() and pop().</p>
<p>The underlying implementations could be linked-list, arrays and etc.. Linked list provides with more flexible memory management, constant time operations, but brings more time overhead and memory overhead for the link operations. Arrays on the other hand, brings tricky issues of resizing, but the operations are also constant time, and has less memory overheads.</p>
<h2 id="Priority_Queues_and_Heaps">Priority Queues and Heaps</h2><h3 id="Priority_Queues">Priority Queues</h3><p>Although often mentioned together, Priority Queue and Heap are <a href="http://en.wikipedia.org/wiki/Priority_queue" target="_blank" rel="external">different concepts</a>. Priority Queue is an abstract data type which is like a queue or stack data structure, but is often implemented in heaps, just like lists could be implemented as arrays or linked lists.</p>
<p>Priority Queue, as its name suggests, could give the element with highest priority. Usually it requires O(1) performance for this operation as it’s crucial to many applications, to name a few (From course slides):</p>
<ul>
<li>Event-driven simulation [give the next event for simulation]</li>
<li>Graph searching [Dijkstra’s Algorithm]</li>
<li>Data compression</li>
<li>Statistics [Maintain largest M values]</li>
<li>Operating Systems [Load balancing, interrupt handling]</li>
<li>…</li>
</ul>
<h3 id="Heap">Heap</h3><p>Binary Heap is one most common implementation of Priority Heap. It uses a binary tree to maintain the data relationship, and could be implemented with arrays. As shown below. (Picture from slide of <a href="https://class.coursera.org/algs4partI-006" target="_blank" rel="external">Coursera Algorithm I Course</a>).</p>
<p><img src="HeapRepresentation.png" alt="Binary Heap Representation"></p>
<p>A Binary Heap has the following properties:</p>
<ul>
<li>Is a complete binary tree.</li>
<li>Largest key is root node of binary tree, which is represented as list[1].</li>
<li>In array representation, the 0 node is often a dummy node, therefore,</li>
<li>Parent of node k is at k/2.</li>
<li>Children of node k are at 2k and 2k+1</li>
</ul>
<p>The following operations are supported by Binary Heap:</p>
<ul>
<li><p><strong>Insertion</strong>: To insert, add a node at the end, then swim it up. Meaning: keep comparing it with its parent, if larger than parent, then switch position with it.</p>
</li>
<li><p><strong>Deletion</strong>: Binary heap supports deletion from the root node (extract the max element). It removes the root node, then replace the root node with the last element on the last level, then sink it. Meaning: keep switching position with the larger one of its children. </p>
</li>
</ul>
<p>Binary Heaps, both insertion and deletion takes O(logN) time to swim or sink, which makes finding max M elements in N O(MlogN).</p>
<p>For Heap Sort, I’d like to categorize it together with all the sorting algorithms, described as following.</p>
<h2 id="Sorting_Algorithms">Sorting Algorithms</h2><h2 id="Elementary_Sort">Elementary Sort</h2><p>The elementary sorting algorithm part introduces <strong>Insertion Sort</strong>, <strong>Selection Sort</strong>, along with <strong>Shell Sort</strong>.</p>
<p><strong>Selection Sort</strong>: As name suggests, selection sort traverse the unsorted part of the list to find the minimum element, and put it in the front of the unsorted part, and consider this element sorted.</p>
<p>Selection Sort has O(N^2) of average time complexity, even when the list is almost sorted.</p>
<p><strong>Insertion Sort</strong>: For each element, keep comparing it to the element in front of it and switch position if it’s smaller than the front element, until it’s the larger one.</p>
<p>It has O(N^2) of average time complexity as well, but only ~N operations when the list is almost sorted, which makes it actually quite useful in certain cases.</p>
<p><strong>Shell Sort</strong>: The algorithm starts with sorting elements h elements apart with insertion sort, then keep decreasing h to have the list “h-sorted”, until h reaches 1, and the whole list is sorted.</p>
<p>With these two gap sequences, Shell Sort is known to have <a href="http://www.sorting-algorithms.com/shell-sort" target="_blank" rel="external">O(N^3/2) average time complexity</a>, <a href="http://www.sorting-algorithms.com/shell-sort" target="_blank" rel="external">O(Nlog(N)) time complexity</a> for nearly sorted lists, which gives it pretty good performance.The value of the gap h is commonly chosen by 3k+1, or an experiment found array of [1, 4, 10, 23, 57, 132, 301, 701]. Also as it doesn’t require function calls, it’s actually used in many cases such as embedded systems, and Linux kernel.</p>
<h3 id="Merge_Sort">Merge Sort</h3><p>Merge Sort is best described recursively. It takes the following procedures to the list of elements:</p>
<ul>
<li>Divide array into two halves.</li>
<li>Recursively divide and sort each half.</li>
<li>Merge two halves in order.</li>
</ul>
<p>One important feature of Merge Sort is that, it takes O(N) of extra memory space. Also, it has so much overhead for tiny subarrays. Therefore, for small sized subarrays, Merge Sort could use Insertion Sort for speed up.</p>
<p>Time complexity for Merge Sort is O(NlogN). It is stable - meaning previously sorted items would not be rearranged by new sorts.</p>
<h3 id="Quick_Sort">Quick Sort</h3><p>The steps for quick sort are as follows:</p>
<ul>
<li>Choose an element of the list to be the pivot.</li>
<li>Put all elements smaller than the pivot to the left, elements larger than the pivot to the right.</li>
<li>Recursively sort the left and right partition.</li>
<li>Join the left, pivot, and the right.</li>
</ul>
<p>Quick Sort, as its name suggests, has the <a href="http://rosettacode.org/wiki/Sorting_algorithms/Quicksort" target="_blank" rel="external">reputation for the fastest sort</a>. It has O(NlogN) time complexity, although for certain inputs and bad pivot selection (e.g. a sorted list and first element for pivot), the worst case could be O(N^2). Also, for small subarrays, Quick Sort could use Insertion Sort to reduce overhead.</p>
<p>One problem with Quick Sort is that its performance decreases when dealing with lists with many identical elements. This could be solved by a variation: The 3 way Quick Sort, which separates the list into 3 separations of less-than, equal, and larger than.</p>
<p>Quick Sort is known as fast, and is therefore widely used in many system applications.</p>
<h3 id="Heap_Sort">Heap Sort</h3><p>The idea for Heap Sort is to create a heap with all the keys, and repeatedly remove the max key. As described above, when the max value is deleted, the last element replaces the root node, and sunk down to the appropriate place.</p>
<p>One significant feature of Heap Sort is that: it has O(NlogN) worst-case performance. But (From Course Slides):</p>
<ul>
<li>Inner loop longer than Quick Sort.</li>
<li>Cache unfriendly.</li>
<li>Not stable.</li>
</ul>
<h3 id="Summary_for_Sorting">Summary for Sorting</h3><p>There is an website introducing the details of different sorting algorithms, with sorting animations: <a href="http://www.sorting-algorithms.com/" target="_blank" rel="external">http://www.sorting-algorithms.com/</a> . The following table summarizes some of the common sorting algorithms.</p>
<table>
<thead>
<tr>
<th>Algorithm</th>
<th>Average Time</th>
<th>Worst Time</th>
<th>Extra Space</th>
<th>Adaptive</th>
<th>Stable</th>
</tr>
</thead>
<tbody>
<tr>
<td>Selection Sort</td>
<td>O(N^2)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>Insertion Sort</td>
<td>O(N^2)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Shell Sort</td>
<td>O(N^3/2)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Merge Sort</td>
<td>O(NlogN)</td>
<td>O(N^2)</td>
<td>O(N)</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Quick Sort</td>
<td>O(NlogN)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>3-Way Quick Sort</td>
<td>O(NlogN)</td>
<td>O(N^2)</td>
<td>O(1)</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Heap Sort</td>
<td>O(NlogN)</td>
<td>O(NlogN)</td>
<td>O(1)</td>
<td>No</td>
<td>No</td>
</tr>
</tbody>
</table>
<h2 id="Binary_Search_Trees">Binary Search Trees</h2><p>A Binary Search Tree is a Binary Tree in Symmetric Order. Meaning: each node has a key, that’s larger than all keys in its left subtree, but smaller than all keys in its right subtree.</p>
<p><strong>Search</strong>: Searching in Binary Search Tree is intuitive: if search key is less than node, go left, if greater, go right, if equal, search hit.</p>
<p>Search in Binary Tree has average time complexity of O(logN) for N elements.</p>
<p><strong>Insert</strong>: Inserting in Binary Search Tree is similar to search. It keeps finding in the tree until see NULL node.</p>
<p>Both Search Insertion requires O(logN) of time in average, but could be O(N) in worst case when the tree is unbalanced (e.g. The tree is inserted in sequential order).</p>
<p><strong>Deletion</strong>: One famous deletion technique for Binary Search Tree is the <a href="http://algs4.cs.princeton.edu/32bst/" target="_blank" rel="external">Hibbard deletion</a>. As Hibbard deletion describes, when deleting:</p>
<ul>
<li><strong>Node with one child:</strong> Delete the node and replace it with its child.</li>
<li><strong>Node with two children:</strong><ul>
<li>Find the node t to delete.</li>
<li>Find successor x of t, so that x has no left child (the min in t’s right subtree).</li>
<li>Put x in t’s spot.</li>
</ul>
</li>
</ul>
<p>See below:</p>
<p><img src="bst-delete.png" alt="BST deletion"></p>
<p>Deletion is said to have O(sqrt(N)) average time complexity (From course slides), but still suffers from performance worsening when the tree is unbalanced. One way to tackle this issue is to use a Balanced Search Tree, as described below.</p>
<h2 id="Balanced_Search_Trees">Balanced Search Trees</h2><h3 id="2-3_Search_Trees">2-3 Search Trees</h3><p>2-3 Tree has the following properties:</p>
<ul>
<li>Allow 1 or 2 keys per node.<ul>
<li>2-node: 1 key, 2 children.</li>
<li>3-node: 2 keys, 3 children.</li>
</ul>
</li>
<li>In symmetric order.</li>
<li>Perfect balance: every path from root to null link has same length.</li>
</ul>
<p>2-3 Tree is designed to keep the tree perfectly balanced, since all its transformation keeps the tree symmetric.</p>
<p><strong>Insertion for 2-3 Search Tree:</strong></p>
<ul>
<li>Search and find the node to insert in, as in Binary Search Tree.</li>
<li>If the node is a 2 node, then insert the key to make it a 3 node.</li>
<li>If the node is a 3 node, then insert the key to make it a temp 4 node, then:<ul>
<li>Split the 4 node, percolate the middle node up to the parent.</li>
<li>Split the rest 2 keys as two separate 2 nodes.</li>
<li>If the parent becomes 4 node, recursively split the parent node in the same way.</li>
</ul>
</li>
</ul>
<p>As shown below:</p>
<p><img src="23tree-insert3c.png" alt="2-3 Tree Insertion to 3 Node"></p>
<p>The idea for 2-3 Tree is a beautiful idea, but complicated in implementation. So there are variations and derivations of implementations. Red-Black Tree is one of them.</p>
<h3 id="Red-Black_Trees">Red-Black Trees</h3><p>One variation of Red-Black Tree discussed in the course is called the Left-Leaning Red-Black Tree. (Guibas-Sedgewick 1979 and Sedgewick 2007, and Sedgewick is the instructor of this online course!)</p>
<p>LLRBT uses a red node to represent the glue for 3-nodes in 2-3 Tree. Therefore it has the following properties:</p>
<ul>
<li>No node has two red links connected to it.</li>
<li>Every path from root to null link has the same number of black links. (Because the corresponding 2-3 Tree is balanced.)</li>
<li>Red links lean left.</li>
</ul>
<p>To understand the operations in LLRBT, we can build all operations with the following basic operations:</p>
<ul>
<li><strong>Left Rotation:</strong> Orient a temporarily right-leaning red link to lean left.<br>  as follows:<br>  <img src="redblack-left-rotate.png" alt="Left Rotate In LLRBT"></li>
<li><strong>Right Rotation:</strong> Same as Left Rotation, rotate node to the right.</li>
<li><strong>Color Flip:</strong> If a node has two red children, flip the color of children to black and mark itself red.</li>
</ul>
<p>And with these basic transformations, we can operate with insertion on the LLRBT, in case of following scenarios:</p>
<ul>
<li><strong>Inserting into a single node</strong> (A 2 node in 2-3 Tree):<ul>
<li><strong>Insert to the left:</strong> Add to the left, and mark the new node red.</li>
<li><strong>Insert to the right:</strong> Add to the right, and since there’s a right-leaning red link, left rotate its parent node, to make the parent a left-leaning red node.</li>
</ul>
</li>
<li><strong>Inserting into a 3 node</strong>:<ul>
<li><strong>To the left of a 3 node:</strong> This makes its parent in the middle of two left leaning red links. Right rotate the parent node, and flip color.</li>
<li><strong>To the center of a 3 node:</strong> This makes its parent in the middle of a two red links, the parent node is left leaning, and the inserted node is left leaning. Left rotate the parent node, then right flip the inserted node, then flip color.</li>
<li><strong>To the right of a 3 node:</strong> This makes the parent has two red children, then flip color.</li>
</ul>
</li>
</ul>
<p>As the graph shows:</p>
<p><img src="LLRBT_insert_3node.png" alt="Basic operations for inserting into 3-node in LLRBT"></p>
<p>Although the operations in each cases look really complicated, the actual code could be made concise and elegant using with recursion. To keep in mind that all these operations are used to guarantee that the tree is fully balanced, and there are no right leaning red links.</p>
<p>The Java example for inserting in LLRBT from the course slide is shown as follows. The insertion searches in the tree for appropriate insert position, and add a new red node at the end. Then determine if the node is violating the properties for LLRBT (Right leaning red node? Two consecutive red links? …), and operate on the node accordingly.</p>
<p>Code example for LLRBT insertion in Java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == NULL) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, RED);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) h.left = put(h.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) h.right = put(h.right, key, val);</span><br><span class="line">    <span class="keyword">else</span>              h.val = val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left))    h = rotateLeft(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; !isRed(h.right))    flipColors(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Symbol_Tables_And_Hash_Tables">Symbol Tables And Hash Tables</h2><p>The Symbol Table, again, is an abstract data type, which maps from keys to values. It supports operations of insertion, deletion, search by key, and etc.. It’s commonly implemented with Hash Tables, which is used everywhere. Some languages have built-in support for Hash Tables.</p>
<h3 id="Hash_Table">Hash Table</h3><p>Hash Table is a key-indexed table, that maps from its keys to value, and index is a function of the key (hashing function).</p>
<p>The ideal scenario is that the index distributed uniformly in the hashing index, so that the access to each element requires O(1) time. Somehow when there are collisions, there are two ways to resolve collisions.</p>
<p><strong>Separate Chaining:</strong> For separate chaining, each collision is stored under the same index, but uses a linked-list to store all the elements under the same index.</p>
<p><strong>Open Addressing:</strong> In case of a collision, the Hash Table probes the array for the next available position of inserting. There are more than one way to find the next available slot:</p>
<ul>
<li>Linear Probing.</li>
<li>Quadratic Probing.</li>
<li>Double Hashing.</li>
</ul>
<p>While for linear probing, when the array gets too full, the performance for searching and insertion degrades drastically. It keeps relatively good performance when the array is under 50% full.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Finally! Just finished all the lecture videos of “Algorithm I” from Coursera, and I believe now it’s a good time to review and summarize.<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://blog.kevinhu.me/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://blog.kevinhu.me/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Paper Reading - Fundamental Concepts In Programming Languages]]></title>
    <link href="http://blog.kevinhu.me/2015/01/03/Paper-Reading-Fundamental-Concepts-In-Programming-Languages/"/>
    <id>http://blog.kevinhu.me/2015/01/03/Paper-Reading-Fundamental-Concepts-In-Programming-Languages/</id>
    <published>2015-01-03T06:14:06.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<p>This is a holiday reading summary. I recently came across two interesting blogs on fundamental concepts in computer science, both with the title “10 Papers Every Programmer Should Read (At Least Twice)”. One could be found in <a href="http://web.archive.org/web/20121024173845/http:/blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice" target="_blank" rel="external">here</a>, and another one in <a href="http://blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/" target="_blank" rel="external">Fogus’ blog</a>. Topics of these papers range from Programming Language theories, functional programming, to Lamport’s distributed system theories. I will read and summarize some of them in my blog. It’ll be 20 papers, and 40 paper-readings to do if I do read each one twice. So, it might be a long time before all is finished.<br><a id="more"></a><br>The first one I chose is “Fundamental Concepts In Programming Languages” (<a href="https://github.com/papers-we-love/papers-we-love/blob/master/plt/fundamental-concepts-in-programming-languages.pdf?raw=true" target="_blank" rel="external">Link To Paper</a>). It’s probably the most influential set of lecture notes in computer science, compiled to paper by <a href="http://en.wikipedia.org/wiki/Christopher_Strachey" target="_blank" rel="external">Christopher Strachey</a> in 1967, two years before the development of C programming language. Left and Right-values, Parametric and Ad-hoc polymorphism were all defined in this paper.</p>
<p>I will only try to summarize some highlights that I find interesting.</p>
<h2 id="L-values_and_R-values">L-values and R-values</h2><p>Light and Right-values, also L and R-values. As their names suggest, L-value is for address-like object appropriate on the left of an assignment, R-value is for the contents-like object appropriate for the right. An L-value is for a location in memory, which has content — an associated R-value.</p>
<p>A name in program (or ‘identifier’) is associated with an L-value, and the association cannot be changed by any assignment. For example, in:</p>
<pre><code><span class="keyword">let</span> <span class="variable">p =</span> <span class="number">3.5</span>
</code></pre><p>In this statement, an available location in memory is setup as the L-value of <code>p</code>, and the R-value 3.5 is assigned to this location.</p>
<p>Somehow, multiple names could have same L-value, by assigning reference to other names. This is slightly different than the concept of pointers, which represents a location by R-value, explained in the paper:</p>
<blockquote>
<p>Suppose X is a real variable with L-value a, then P is an object whose R-value is a, we say the type of P is real pointer and that P ‘points to’ X.</p>
</blockquote>
<p>The L and R-value should also be specified for the function parameter calling modes, namely, calling a parameter by value (R-value) or reference (L-value). Free variables should also be defined as L-value or R-value, the difference can be shown by the following example.</p>
<pre><code>Free variable by R-value
let a = <span class="number">3</span>
let f[x] = x + a
<span class="keyword">...</span> (f[<span class="number">5</span>] = <span class="number">8</span>)
a := <span class="number">10</span>
<span class="keyword">...</span> (f[<span class="number">5</span>] = <span class="number">8</span>)

 Free variable by L-value
 let a = <span class="number">3</span>
 let f[x] = x + a
 <span class="keyword">...</span> (f[<span class="number">5</span>] = <span class="number">8</span>)
 a := <span class="number">10</span>
 <span class="keyword">...</span> (f[<span class="number">5</span>] = <span class="number">15</span>)
</code></pre><h2 id="Function_and_routines_as_data_items">Function and routines as data items</h2><p>First and second class objects are described as following:</p>
<blockquote>
<p>In ALGOL a real number may appear in an expression or be assigned to a variable, and either may appear as an actual parameter in a procedure call. A procedure, on the other hand, may only appear in another procedure call either as the operator (the most common case) or as one of the actual parameters. There are no expressions involving procedures or whose results are procedures. Thus in a sense in ALGOL are second class citizens…</p>
</blockquote>
<p>To represent functions as data items, we need to make sure the R-value of a function. It includes two parts — a rule for evaluating the expression, and an environment which supplies its free variables. An R-value of this sort will be called a closure.</p>
<h2 id="Types_and_Polymorphism">Types and Polymorphism</h2><p>In the paper, it describes:</p>
<blockquote>
<p>“The type of an object determines its representation and constrains the range of abstract object it may be used to represent.”</p>
</blockquote>
<p>Whether the type is an attribute of an L-value or an R-value is language dependent, and can largely affect the amount of work. L-values are invariant under assignment, so their type is also invariant. And if we can determine the type of a polymorphism operator and the result from the operands, we can these attribute <strong>manifest</strong>. Attributes that can only be determined by running the program are known as <strong>latent</strong>.</p>
<p>Polymorphism is the provision of a single interface to entities of different types. (Definition from <a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science" target="_blank" rel="external">Wikipedia</a>)). In this paper two modes of polymorphism is defined:</p>
<p><strong>Ad-hoc Polymorphism:</strong> It describes that functions could apply to arguments of different types, and can behave differently depending on the type of arguments. A good example could be the add (+) operand in some languages:</p>
<pre><code><span class="number">3</span> + <span class="number">5</span>
<span class="string">"Hello"</span> + <span class="string">" "</span> + <span class="string">"World"</span>
</code></pre><p>In the example above, (+) acts with different meanings. First is the adding of two integers, while the second is the concatenation of strings.</p>
<p><strong>Parametric Polymorphism</strong>: Parametric Polymorphism act the same regardless of the type. It treats the argument as a more generalized type. This makes the language more flexible while not breaking its static type-safety. A good example will be list operations. For example, to determine the length of a list one need not to know the data type of the list objects, and could therefore it could act on list of all types.</p>
<h2 id="Afterthoughts">Afterthoughts</h2><p>There are other interesting topics in the paper as well. After learning all these concepts from programming languages, it’s sometimes interesting and necessary to learn the origins, to know how these ideas first came into formation. Putting the trivias of different language syntax aside for a while and getting back to theories actually helps understanding their designs.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is a holiday reading summary. I recently came across two interesting blogs on fundamental concepts in computer science, both with the title “10 Papers Every Programmer Should Read (At Least Twice)”. One could be found in <a href="http://web.archive.org/web/20121024173845/http:/blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice">here</a>, and another one in <a href="http://blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/">Fogus’ blog</a>. Topics of these papers range from Programming Language theories, functional programming, to Lamport’s distributed system theories. I will read and summarize some of them in my blog. It’ll be 20 papers, and 40 paper-readings to do if I do read each one twice. So, it might be a long time before all is finished.<br>]]>
    
    </summary>
    
      <category term="PaperReading" scheme="http://blog.kevinhu.me/tags/PaperReading/"/>
    
      <category term="ProgrammingLanguage" scheme="http://blog.kevinhu.me/tags/ProgrammingLanguage/"/>
    
      <category term="ProgrammingLanguage" scheme="http://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[What Parsers Are They Using?]]></title>
    <link href="http://blog.kevinhu.me/2014/11/24/24-what-parsers-are-they-using/"/>
    <id>http://blog.kevinhu.me/2014/11/24/24-what-parsers-are-they-using/</id>
    <published>2014-11-24T23:29:00.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<p>This is a <del>quite boring</del> post on programming language trivia, which doesn’t dig into anything deep.</p>
<h2 id="GCC_and_Clang">GCC and Clang</h2><p>The GCC is mostly implemented in C, and used to use Bison for parser generation, according to its <a href="http://en.wikipedia.org/wiki/GNU_bison" target="_blank" rel="external">Wikipedia page</a>.<br>By default, it generates right recursive table driven LALR parser.<br><a id="more"></a></p>
<p>Somehow according to the <a href="http://en.wikipedia.org/wiki/GNU_bison#Where_is_it_used.3F" target="_blank" rel="external">same page</a>, GCC has switched to <a href="http://dinosaur.compilertools.net/yacc/" target="_blank" rel="external">YACC</a> before now switching to a hand-written recursive-descent parser for C/C++/Objective C. This could also be seen from GCC release notes <a href="https://gcc.gnu.org/gcc-3.4/changes.html#cplusplus" target="_blank" rel="external">3.4</a> and <a href="https://gcc.gnu.org/gcc-4.1/changes.html" target="_blank" rel="external">4.1</a>. </p>
<p>Clang, as well as LLVM is implemented in C++. It also uses a unified recursive-descent parser for C, Objective C, C++ and Objective C++, according to the <a href="http://clang.llvm.org/features.html" target="_blank" rel="external">LLVM Clang Page</a>. Both GCC and Clang now uses recursive-descent parser, claiming it provides with faster speed. On Clang page, it also states recursive-descent parser:</p>
<blockquote>
<p> … makes it very easy for new developers to understand the code, it easily supports ad-hoc rules and other strange hacks required by C/C++, and makes it straight-forward to implement excellent diagnostics and error recovery.</p>
</blockquote>
<h2 id="Python">Python</h2><p>Here Python refers to the CPython implementation. In its repo under <a href="https://github.com/python/cpython/tree/master/Parser" target="_blank" rel="external">“Parser” directory</a>, it could be seen CPython actually uses <a href="http://asdl.sourceforge.net/" target="_blank" rel="external">Zephyr ASDL</a> for syntax description. Zyphyr ASDL is also described in its <a href="https://www.cs.princeton.edu/research/techreps/TR-554-97" target="_blank" rel="external">Princeton CS Dept. Page</a>.</p>
<p>Python uses LL(1) grammar. Its AST file (Python-ast.c) isgenerated according to the ASDL description of the language. The detailed process is described in <a href="http://legacy.python.org/dev/peps/pep-0339/" target="_blank" rel="external">PEP339</a>.</p>
<h2 id="Ruby">Ruby</h2><p>Ruby MRI is implemented in C. According to <a href="http://en.wikipedia.org/wiki/GNU_bison#Where_is_it_used.3F" target="_blank" rel="external">Bison Wikipedia Page</a>, Ruby also uses Bison for the parser generation, which should be a right-recursive parser. </p>
<p>The source code for parser and syntax could be found in <a href="https://github.com/ruby/ruby/blob/trunk/parse.y" target="_blank" rel="external">its repo</a>.</p>
<h2 id="JavaScript">JavaScript</h2><p>JavaScript v8 is implemented in C++. It claims to be using a hand-written top-down parser, according to <a href="http://www.quora.com/What-are-the-parsing-techniques-used-by-modern-compilers" target="_blank" rel="external">this Quora post</a>.</p>
<p>I have no time to dig in its code base at the moment. Also it’s not in the scope of this post.</p>
<h2 id="Haskell">Haskell</h2><p>According to the <a href="http://www.quora.com/What-are-the-parsing-techniques-used-by-modern-compilers" target="_blank" rel="external">Quora post above</a>, GHC uses a generator called <a href="https://www.haskell.org/happy/" target="_blank" rel="external">Happy</a>. From its official website, it looks like it’s first created to generate parser specifically for GHC.</p>
<p>Its syntax is defined in its codebase directory <a href="https://github.com/ghc/ghc/tree/master/compiler/parser" target="_blank" rel="external">“compiler/parser/Parser.y”</a>.</p>
<h2 id="Julia">Julia</h2><p>Interestingly, after searching a while in its <a href="https://github.com/JuliaLang/julia/tree/master/src" target="_blank" rel="external">GitHub codebase</a>, I found that Julia actually uses Scheme for its<br>frontend and parser. Although most its other source files are in C.</p>
<p>It looks like it also uses a recursive-descent parser.</p>
<h2 id="Golang">Golang</h2><p>Golang parser is now implemented in Golang itself now. (Wow!) Not only that, most Golang implementation is in Go, according to its <a href="https://github.com/jnwhiteh/golang" target="_blank" rel="external">Github mirror repo</a>. By the time I checked it, it contains 75.7% Golang, 19.4% C, 3.0% Assembly, and 1.9% other.</p>
<p>From its parser <a href="https://github.com/jnwhiteh/golang/blob/master/src/go/parser/parser.go" target="_blank" rel="external">source code</a>, it looks like it also uses a recursive-descent parser.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is a <del>quite boring</del> post on programming language trivia, which doesn’t dig into anything deep.</p>
<h2 id="GCC_and_Clang">GCC and Clang</h2><p>The GCC is mostly implemented in C, and used to use Bison for parser generation, according to its <a href="http://en.wikipedia.org/wiki/GNU_bison">Wikipedia page</a>.<br>By default, it generates right recursive table driven LALR parser.<br>]]>
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="http://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[More On Passwd]]></title>
    <link href="http://blog.kevinhu.me/2014/10/31/31-more-on-passwd/"/>
    <id>http://blog.kevinhu.me/2014/10/31/31-more-on-passwd/</id>
    <published>2014-11-01T02:30:45.000Z</published>
    <updated>2015-12-19T21:09:59.256Z</updated>
    <content type="html"><![CDATA[<p>A little bit more interesting discoveries while digging into the passwd code file.</p>
<h2 id="The_‘s’_flag_in_file_permission">The ‘s’ flag in file permission</h2><p>First, the file permission of passwd executable is <code>-rwsr-xr-x</code>. There’s an ‘s’ flag which don’t usually appear in common Unix files. The usage of the ‘s’ field is explained here:</p>
<p><a href="http://en.wikipedia.org/wiki/Setuid" target="_blank" rel="external">http://en.wikipedia.org/wiki/Setuid</a></p>
<a id="more"></a>
<p>Which means when a user runs the passwd program, his effective uid will become the owner of the executable file, which is root in this case. While inside the passwd program, it uses <code>getuid</code>, which returns the user’s real id instead of effective id.</p>
<h2 id="On_updating_the_shadow_file">On updating the shadow file</h2><p>I also do notice that the whole passwd program would only require one Unix system capability: the <code>CAP_FCHOWN</code> capability, which is required when you’re changing the owner of one file. Here’s why the program needs it.</p>
<p>As a matter of fact, the passwd program never actually directly writes into the <code>/etc/shadow</code> file. For some reason (perhaps security concerns), it writes into a temp file first, set the uid and gid of the temp file, and then rewrite the shadow file with the temp file.</p>
<p>The code is defined in <code>commonio.c</code> file, <code>commonio_update</code> function. As described in the code bellow:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set the temp filename</span></span><br><span class="line"><span class="built_in">snprintf</span> (buf, <span class="keyword">sizeof</span> buf, <span class="string">"%s+"</span>, db-&gt;filename);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// open the file with name defined in buf, permissions defined in sb, returns the file pointer</span></span><br><span class="line">db-&gt;fp = fopen_set_perms (buf, <span class="string">"w"</span>, &amp;sb);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// write all data to db-&gt;fp, the temp fp</span></span><br><span class="line"><span class="keyword">if</span> (write_all (db) != <span class="number">0</span>)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rename the temp filename in buf to db-&gt;filename, which is /etc/shadow</span></span><br><span class="line"><span class="keyword">if</span> (lrename (buf, db-&gt;filename) != <span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>A little bit more interesting discoveries while digging into the passwd code file.</p>
<h2 id="The_‘s’_flag_in_file_permission">The ‘s’ flag in file permission</h2><p>First, the file permission of passwd executable is <code>-rwsr-xr-x</code>. There’s an ‘s’ flag which don’t usually appear in common Unix files. The usage of the ‘s’ field is explained here:</p>
<p><a href="http://en.wikipedia.org/wiki/Setuid">http://en.wikipedia.org/wiki/Setuid</a></p>]]>
    
    </summary>
    
      <category term="CodeReading" scheme="http://blog.kevinhu.me/tags/CodeReading/"/>
    
      <category term="Password" scheme="http://blog.kevinhu.me/tags/Password/"/>
    
      <category term="CodeReading" scheme="http://blog.kevinhu.me/categories/CodeReading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Dive Into Password]]></title>
    <link href="http://blog.kevinhu.me/2014/10/13/13-a-dive-into-password/"/>
    <id>http://blog.kevinhu.me/2014/10/13/13-a-dive-into-password/</id>
    <published>2014-10-14T02:08:55.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<h2 id="Passwd">Passwd</h2><p>The passwd is program on Unix systems to manage users’ passwords. The user and password information on most Unix systems is stored in two separate files: /etc/passwd for user information, and /etc/shadow for password information, including encrypted password value, expiration data, UID, GID, and etc.. The<br>rationale behind storing information in separate files is discussed in <a href="http://www.tldp.org/HOWTO/Shadow-Password-HOWTO-2.html" target="_blank" rel="external">Why shadow your passwd file?</a><br><a id="more"></a></p>
<p>The passwd program is a part of the shadow-utils, which includes a series of programs to manage user accounts, group accounts, and converting plain passwords to shadow password format, such as: groupadd, useradd, usermod, login, passwd, su, and etc..</p>
<p>The source file of <code>passwd</code> is available in <a href="http://pkg-shadow.alioth.debian.org/" target="_blank" rel="external">Debian Alioth Page</a> and <a href="https://packages.debian.org/source/wheezy/shadow" target="_blank" rel="external">Debian Package Information Page</a>. I downloaded the 4.1.5 original source for my study. See opensource isn’t just a campaign slogan, it’s something real!</p>
<p>Basically, what passwd does is to manage passwords, like updating passwords,  setting minimum and maximum password expiration date, and all these information is saved to the /etc/passwd and /etc/shadow files, and password information in particular, needs an encryption library for protection, instead of being saved as plain text.</p>
<p>Below is a <strong>NON</strong>-comprehensive list of code files required by the passwd program in the shadow-utils code base:</p>
<pre>
src/passwd.c
lib/defines.h
lib/getdef.(h/c)
lib/shadow.(h/c)
lib/shadowio.(h/c)
lib/commonio.(h/c)
lib/sgetspent.c
</pre>


<h2 id="How_we_change_our_password">How we change our password</h2><h3 id="Data_structure_definitions_first?">Data structure definitions first?</h3><ul>
<li><strong>Shadow passwd struct</strong>:<br>Defined in shadow.h in linux include directory. Defines the structure of the shadow file. The pointer in the main function is defined as:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">struct</span> spwd *sp;  <span class="comment">/* Shadow file entry for user   */</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Structure of the password file.  */</span></span><br><span class="line"><span class="keyword">struct</span> spwd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *sp_namp;              <span class="comment">/* Login name.  */</span></span><br><span class="line">    <span class="keyword">char</span> *sp_pwdp;              <span class="comment">/* Encrypted password.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_lstchg;         <span class="comment">/* Date of last change.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_min;            <span class="comment">/* Minimum number of days between changes.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_max;            <span class="comment">/* Maximum number of days between changes.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_warn;           <span class="comment">/* Number of days to warn user to change</span><br><span class="line">    the password.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_inact;          <span class="comment">/* Number of days the account may be</span><br><span class="line">    inactive.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sp_expire;         <span class="comment">/* Number of days since 1970-01-01 until</span><br><span class="line">    account expires.  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> sp_flag;  <span class="comment">/* Reserved.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>Passwd Structure</strong>:<br>Defined in pwd.h in linux include directory. Defines the <code>/etc/passwd</code> file structure. The pointer in the main function is defined:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">struct</span> passwd *pw;  <span class="comment">/* Password file entry for user      */</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/* The passwd structure.  */</span></span><br><span class="line"><span class="keyword">struct</span> passwd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *pw_name;                <span class="comment">/* Username.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_passwd;              <span class="comment">/* Password.  */</span></span><br><span class="line">    <span class="keyword">__uid_t</span> pw_uid;               <span class="comment">/* User ID.  */</span></span><br><span class="line">    <span class="keyword">__gid_t</span> pw_gid;               <span class="comment">/* Group ID.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_gecos;               <span class="comment">/* Real name.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_dir;                 <span class="comment">/* Home directory.  */</span></span><br><span class="line">    <span class="keyword">char</span> *pw_shell;               <span class="comment">/* Shell program.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Shadow_db structure</strong>: Defined in <code>lib/shadowio.c</code>. It’s a doubly linked list, storing information for all the shadow file entries. It’s declared with a type called <code>struct commonio_db</code>, defined in <code>commonio.h</code>.</p>
<p>  Shadow library has <code>commonio.c</code> for all the common io data structures and operations, and <code>shadowio.c</code>, which could be seen as a wrapper around common io for all shadow file data structure and operations.</p>
<p>  The <code>shadow_db</code> defined as below. The <code>SHADOW_FILE</code> as you might have already guessed, is a macro defined as <code>“/etc/shadow”</code>.</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> commonio_db shadow_db = &#123;</span><br><span class="line">    SHADOW_FILE,            <span class="comment">/* filename */</span></span><br><span class="line">    &amp;shadow_ops,            <span class="comment">/* ops */</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* fp */</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">ifdef</span> WITH_SELINUX</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* scontext */</span></span><br><span class="line">    <span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* head */</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* tail */</span></span><br><span class="line">    <span class="literal">NULL</span>,                   <span class="comment">/* cursor */</span></span><br><span class="line">    <span class="literal">false</span>,                  <span class="comment">/* changed */</span></span><br><span class="line">    <span class="literal">false</span>,                  <span class="comment">/* isopen */</span></span><br><span class="line">    <span class="literal">false</span>,                  <span class="comment">/* locked */</span></span><br><span class="line">    <span class="literal">false</span>                   <span class="comment">/* readonly */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>Some important global variables<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *name;   <span class="comment">/* The name of user whose password is being changed */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *myname; <span class="comment">/* The current user's name */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> amroot;  <span class="comment">/* The caller's real UID was 0 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> crypt_passwd[<span class="number">256</span>];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Main_function">Main function</h3><p>Though the whole password update procedure could be simply described as “reading and updating the <code>/etc/passwd</code> and <code>/etc/shadow</code> file”, the shadow library uses piles of code to check identity, permission, and several layers of function calls for encryption, and finally updating files. It needs to consider every aspect of the problem, which makes the code size larger than you  might expect.</p>
<p>Also, passwd libray took <a href="http://www.wikiwand.com/en/Linux_PAM" target="_blank" rel="external">PAM</a>, <a href="http://www.wikiwand.com/en/Trusted_computing_base" target="_blank" rel="external">TCB</a> and <a href="http://www.wikiwand.com/en/Security-Enhanced_Linux" target="_blank" rel="external">SELinux</a> into considerations. I would skip these here for I don’t yet have time to study all.</p>
<p>A good place to start reading is the <code>main()</code> entry of the <code>passwd.c</code>. The procedures could be summarized as follows:</p>
<ul>
<li><strong>Initialization</strong>:<br>Init data structures (<code>const struct passwd <em>pw</em></code>, <code>const struct spwd sp</code>, etc.), sanitize environment, check if the user is root, …;</li>
<li><strong>Parse parameters</strong>:<br>A large switch case for all parameters. As I’m now only interested in updating my password, I would follow the execution path where no parameters are given;</li>
<li><strong>Get username, check permissions</strong>:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pw = get_my_pwent();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!amroot &amp;&amp; (pw-&gt;pw_uid!=getuid()))&#123;...&#125;</span><br><span class="line">...</span><br><span class="line">sp = getspnam(name);</span><br><span class="line">...</span><br><span class="line">check_password(pw, sp);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Get username, init pw and sp data structures, check if the user is root or if the user is trying to change his own password. Then it checks the validity of the user’s account: is it expired, is its min password change time reached? These are in <code>check_password()</code> function.</p>
<ul>
<li><strong>Get new password</strong>:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (new_password(pw) != <span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>Here’s where there’s most fun. It’ when the <code>passwd</code> program prompts you for your old password, and tell you to input your new password. If you fail in trying too many times, the program would get upset and refuses to update password for you.<br>Under the hood, it also does the following things:</p>
<ul>
<li>Encrypt your input with <code>pw_encrypt()</code>(defined in <code>lib/encrypt.c</code>), then compare it with the old encrypted string. There must be a lot of fun to dig into the encryption method, but it’s not in the scope of this blog;</li>
<li>Warns you of weak password;</li>
<li><p>Encrypt the password then immediately wipe the cleartext password, saves the encrypted password to the global variable <code>crypt_passwd</code>, which would then copied to other data structures, and then saves to the shadow file.</p>
</li>
<li><p><strong>Update shadow file</strong>:</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update_shadow();</span><br></pre></td></tr></table></figure>
<p>The program warns you the username you are changing password, then it calls the <code>update_shadow()</code> if you have shadow file. Otherwise, it calls <code>update_noshadow()</code>.</p>
<p>The <code>update_shadow()</code> is going to the core of the program, and it’s what I will observe closely.</p>
<h3 id="update_shadow()_function">update_shadow() function</h3><p>Function <code>update_shadow()</code> is defined in <code>src/passwd.c</code>, and the summary of the procedures is:</p>
<ul>
<li><strong>Set a global lock</strong>:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (spw_lock() == <span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>Lock the shadow password file access. Spit an error if it’s already locked.</p>
<ul>
<li><strong>Open the shadow file</strong>:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (spw_open(O_RDWR)==<span class="number">0</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>Taking a deeper look inside the <code>spw_open</code> in <code>lib/shadowio.c</code>, you could find that here is when it opens up the shadow file, reads it, and stores all the entries to the <code>shadow_db</code> doubly linked list.</p>
<ul>
<li><strong>Locate the entry by name</strong>:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp = spw_locate (name);</span><br></pre></td></tr></table></figure>
<p>Also a function call in <code>lib/shadowio.c</code>. The <code>name</code> param is the current username.</p>
<ul>
<li><strong>Create nsp Data Structure</strong>:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsp = __spw_dup (sp);</span><br></pre></td></tr></table></figure>
<p>It copies the content in sp to a new pointer nsp;</p>
<ul>
<li><strong>Update the encrypted passwd</strong>:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update_crypt_pw(nsp-&gt;sp_pwdp);</span><br></pre></td></tr></table></figure>
<p>Finally! The <code>crypted_passwd</code> is copied to the data structure, with:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp=xstrdup(crypt_passwd)</span><br></pre></td></tr></table></figure></p>
<p>inside of <code>update_crypt_pw()</code> function. This process is hidden so deep.<br>The nsp data structure would then carry this encrypted password to the shadow file. The program would also update metadata, such as the expiration date and so on;</p>
<ul>
<li><strong>Update the shadow_db Data Structure</strong>:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (spw_update(nsp) == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> commonio_update(&amp;shadow_db, (<span class="keyword">const</span> <span class="keyword">void</span> *)sp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>The <code>spw_update()</code>, again is a wrapper for the relating <code>commonio_update()</code>. Inside it would try to find the entry of the <code>shadow_db</code> data structure, or create new entry when not found. Then it saves all the information in the <code>sp</code> to the <code>shadow_db</code>.</p>
<ul>
<li><strong>Close the shadow file, unlock the global lock</strong>:<br>*<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spw_close();</span><br><span class="line">...</span><br><span class="line">spw_unlock();</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Close and saves the shadow file to its place. Unlock the global lock, concludes the whole process. Still, there’s much interesting things to look at inside the <code>spw_close()</code> and <code>commonio_close()</code>, but I think I’ve written long enough.</p>
<h2 id="Afterthoughts">Afterthoughts</h2><p>Reading code is fun, recording the whole process is even more so. It’s a rewarding process, especially for some high-quality code as shadow library. It kinda teaches you how top-notch programmers tackles system-level problems. It’s also tiring though, when you dig into all the function calls, variables (especially global variables) while tracking its execution path. At some point I really wish the code could be a little bit more commented.</p>
<p>I might have the energy to blog all the code I will read, but I think I will definitely read more code before I start writing something similar. To conclude, it’s actually fun experience that quenches your curiosity of “How it actually works”.</p>
<blockquote>
<p>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Passwd">Passwd</h2><p>The passwd is program on Unix systems to manage users’ passwords. The user and password information on most Unix systems is stored in two separate files: /etc/passwd for user information, and /etc/shadow for password information, including encrypted password value, expiration data, UID, GID, and etc.. The<br>rationale behind storing information in separate files is discussed in <a href="http://www.tldp.org/HOWTO/Shadow-Password-HOWTO-2.html">Why shadow your passwd file?</a><br>]]>
    
    </summary>
    
      <category term="CodeReading" scheme="http://blog.kevinhu.me/tags/CodeReading/"/>
    
      <category term="Password" scheme="http://blog.kevinhu.me/tags/Password/"/>
    
      <category term="CodeReading" scheme="http://blog.kevinhu.me/categories/CodeReading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Dive Into PLY]]></title>
    <link href="http://blog.kevinhu.me/2014/10/11/11-a-dive-into-ply/"/>
    <id>http://blog.kevinhu.me/2014/10/11/11-a-dive-into-ply/</id>
    <published>2014-10-12T01:50:24.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<p>I’ve been auditing a course in computer language implementation and particularly interested in parser generator. Just spent an afternoon reading about the Python parser generator <a href="http://www.dabeaz.com/ply/" target="_blank" rel="external">PLY</a>. It’s a pure Python Implementation of Lex and Yacc. And <a href="http://www.dabeaz.com/ply/ply.html#ply_nn4" target="_blank" rel="external">here</a> is the PLY documentation I’ve been reading the whole afternoon.<br><a id="more"></a></p>
<h2 id="PLY_Lex">PLY Lex</h2><p>Basically, writing a tokenizer is to generate a finite automata.  It should be easy to implement with the assist of regular expressions. For PLY Lex, the following needs to be defined:</p>
<ul>
<li><strong>Tokens</strong>: The token types;</li>
<li><strong>Token definition</strong>: You can define a token by a variable of regular expression, or a method whose docstring is regular expression definition. Naming convention follows: <code>t_TOKENNAME</code>, e.g. SYMBOL token should be defined by a variable or method with name <code>t_SYMBOL</code>;</li>
<li><strong>Error method</strong>: define the <code>t_error()</code> method for error handling.</li>
</ul>
<p>Finally, run Lex build method to build the tokenizer. If you define all data structure in a class, point the module argument to that class.</p>
<p>Code listed as following:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLexer</span>:</span></span><br><span class="line">    tokens = (</span><br><span class="line">    <span class="string">"SYMBOL"</span>,</span><br><span class="line">    <span class="string">"OP"</span>,</span><br><span class="line">    <span class="string">"FIXNUM"</span>,</span><br><span class="line">    <span class="string">"WS"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    t_SYMBOL = <span class="string">r'[a-zA-Z_]+[a-zA-Z_0-9]+'</span></span><br><span class="line">        t_OP = <span class="string">r'\+|-|\*|/'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_WS</span><span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="string">r'\s+'</span></span><br><span class="line">            <span class="comment"># input t is the input token class</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_FIXNUM</span><span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="string">r'\d+'</span></span><br><span class="line">            t.value = int (t.value)</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_newline</span><span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="string">r'\n+'</span></span><br><span class="line">            <span class="comment"># t.lexer points to the lexer class, which stores info for whole lexer</span></span><br><span class="line">            t.lexer.lineno += len(t.value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t_error</span> <span class="params">(self, t)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Illegal"</span>)</span><br><span class="line">            t.lexer.skip (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">            self.lexer = ply.lex.lex(module=self, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span> <span class="params">(self, data)</span>:</span></span><br><span class="line">            self.lexer.input(data)</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> self.lexer:</span><br><span class="line">            <span class="keyword">print</span> (t)</span><br><span class="line"></span><br><span class="line">m = MyLexer ()</span><br><span class="line"><span class="comment"># build lexer and init data structre</span></span><br><span class="line">m.build ()</span><br><span class="line">m.run (<span class="string">"3 + 4 * 6"</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="PLY_Yacc">PLY Yacc</h2><p>Yacc generates a table-driven LR parser, and LALR(1) by default, SLR when specified.</p>
<p>Yacc also uses docstring to define Context Free Grammar. Similarly, grammar definition method has naming convention as <code>p_PRODUCT_NAME</code>. It also generates a shift/reduce parser.out output for debugging purpose.</p>
<p>Yacc allows ambiguous grammar. It can resolve ambiguity by supporting precedence. One example for arithmetic operations from documentation:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression : expression PLUS expression&#10;           | expression MINUS expression&#10;           | expression TIMES expression&#10;           | expression DIVIDE expression&#10;           | &#39;(&#39; expression &#39;)&#39;&#10;           | NUMBER</span><br></pre></td></tr></table></figure></p>
<p>Which creates ambiguity when parsing expressions like</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 + 4 * 5</span><br></pre></td></tr></table></figure>
<p>With precedence, Yacc would always know to handle higher precedence operations than lower precedence ones.</p>
<p>One example (from PLY offical release 3.14 examples) of expression definition with precedence defined:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">precedence = (&#10;    (&#39;left&#39;,&#39;+&#39;,&#39;-&#39;),&#10;        (&#39;left&#39;,&#39;*&#39;,&#39;/&#39;),&#10;            (&#39;right&#39;,&#39;UMINUS&#39;),&#10;            )&#10;&#10;def p_expression_binop(p):&#10;    &#39;&#39;&#39;expression : expression &#39;+&#39; expression&#10;                  | expression &#39;-&#39; expression&#10;                  | expression &#39;*&#39; expression&#10;                  | expression &#39;/&#39; expression&#39;&#39;&#39;&#10;                  if p[2] == &#39;+&#39;  : p[0] = p[1] + p[3]&#10;                  elif p[2] == &#39;-&#39;: p[0] = p[1] - p[3]&#10;                  elif p[2] == &#39;*&#39;: p[0] = p[1] * p[3]&#10;                  elif p[2] == &#39;/&#39;: p[0] = p[1] / p[3]</span><br></pre></td></tr></table></figure>
<p>A collection of examples could be found in <a href="https://github.com/dabeaz/ply/tree/master/example" target="_blank" rel="external">here</a>.</p>
<h2 id="Afterthoughts">Afterthoughts</h2><p>PLY is an interesting tool that I want to build something with. There’s also a variation based on PLY called <a href="https://github.com/erezsh/plyplus" target="_blank" rel="external">PLYPlus</a> that trys to provide a cleaner interface for programmers. Somehow I have a hunch that it could be done better.</p>
<p>GCC used to use bison generated parser as frontend, but now it’s using a hand-written recursive-descent parser for performance reasons. So is clang. For language generators as far as I know, Ruby uses Yacc as its parser, and Python uses <a href="http://www.cs.princeton.edu/research/techreps/TR-554-97" target="_blank" rel="external">ASDL</a>, which are all worth digging when I have time.</p>
<p>Somehow I wonder why not very many people claim to use PLY as a tool for language manipulations. It could be quite handy when you consider constructing something  with relatively complex grammar parsing,  requires faster development cycle, and is not performance critical. If I encounter any projects like that in future, I think PLY would be on the top list of my tool selections.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’ve been auditing a course in computer language implementation and particularly interested in parser generator. Just spent an afternoon reading about the Python parser generator <a href="http://www.dabeaz.com/ply/">PLY</a>. It’s a pure Python Implementation of Lex and Yacc. And <a href="http://www.dabeaz.com/ply/ply.html#ply_nn4">here</a> is the PLY documentation I’ve been reading the whole afternoon.<br>]]>
    
    </summary>
    
      <category term="ProgrammingLanguage" scheme="http://blog.kevinhu.me/tags/ProgrammingLanguage/"/>
    
      <category term="ProgrammingLanguage" scheme="http://blog.kevinhu.me/categories/ProgrammingLanguage/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A New Blog For My Tech Notes]]></title>
    <link href="http://blog.kevinhu.me/2014/10/08/08-a-new-blog-for-my-tech-notes/"/>
    <id>http://blog.kevinhu.me/2014/10/08/08-a-new-blog-for-my-tech-notes/</id>
    <published>2014-10-09T01:47:44.000Z</published>
    <updated>2015-12-19T21:09:59.252Z</updated>
    <content type="html"><![CDATA[<p>Hello World!</p>
<p>It’s been a while since the last time I ever wrote some serious blog posts. After some thought I now decide to separate my everyday chit-chat blog from a more tech-oriented blog, so that contents from either sides won’t get entwined with each other, especially when I decide to blog in both languages.</p>
<p>For a more tech-oriented blog I’d like to keep everything in English. For I believe it’s a language most tech people could understand, even in China. And now I could publish all my discoveries, my thoughts, my ideas centered around technology in this blog, and welcome discussions. Blogging is a beautiful way of communication, and hopefully I could make friends with like-minded through keeping this blog.</p>
<p>And there it goes. A brand new blogging journey!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hello World!</p>
<p>It’s been a while since the last time I ever wrote some serious blog posts. After some thought I now decide to separa]]>
    </summary>
    
      <category term="Diary" scheme="http://blog.kevinhu.me/categories/Diary/"/>
    
  </entry>
  
</feed>
